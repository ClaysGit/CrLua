#include ~/CrLua/LockTable

-------------------------------------------------------------------------------
--- Lua list utility functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.List'

local CrLua = CrLua or {}
CrLua.List = assert(not CrLua.List) and {}

-------------------------------------------------------------------------------
--- Concatenate two lists.
-- @param a list: table with number indices.
-- @param b list: table with number indices.
-- @return list: list with a's entries followed by b's entries.
-------------------------------------------------------------------------------
function CrLua.List.join(a, b)
    assert(type(a) == 'table' and type(b) == 'table')

    local result = {}
    for _, v in ipairs(a) do
        table.insert(result, v)
    end
    for _, v in ipairs(b) do
        table.insert(result, v)
    end
    return result
end

function CrLua.List._testJoin()
    local a = { 'one', 'two' }
    local b = { 'three', 'four' }
    local joined = CrLua.List.join(a, b)
    assert(#joined == 4)
    assert(joined[1] == 'one')
    assert(joined[2] == 'two')
    assert(joined[3] == 'three')
    assert(joined[4] == 'four')
end

-------------------------------------------------------------------------------
--- Filter list.
-- @param list : table with number indices.
-- @param filterFunction function : called with list items, return true to keep.
-- @return list : list items accepted by filter function.
-------------------------------------------------------------------------------
function CrLua.List.filter(list, filterFunction)
    assert(type(list) == 'table' and type(filterFunction) == 'function')

    local result = {}
    for _, v in ipairs(list) do
        if filterFunction(v) then
            table.insert(result, v)
        end
    end
    return result
end

function CrLua.List._testFilter()
    local list = { 1, 4, 5, 2, 5, 7 }
    local function filterFunction(entry)
        return entry % 2 == 0
    end
    local filtered = CrLua.List.filter(list, filterFunction)
    assert(#filtered == 2)
    assert(filtered[1] == 4)
    assert(filtered[2] == 2)
end

-------------------------------------------------------------------------------
--- Map list.
-- @param list : table with number indices.
-- @param mapFunction function : call for each list entry to populate result.
-- @return list : list of map function results for each entry in original list.
-------------------------------------------------------------------------------
function CrLua.List.map(list, mapFunction)
    assert(type(list) == 'table' and type(mapFunction) == 'function')

    local result = {}
    for _, v in ipairs(list) do
        local mapped = assert(mapFunction(v))
        table.insert(result, mapped)
    end
    return result
end

function CrLua.List._testMap()
    local list = { 1, 3 }
    local function mapFunction(entry)
        return entry + 1
    end
    local mapped = CrLua.List.map(list, mapFunction)
    assert(#mapped == 2)
    assert(mapped[1] == 2)
    assert(mapped[2] == 4)
end

-------------------------------------------------------------------------------
--- Convert a list to a set.
-- @param list : table with number indices.
-- @return set : table with list values as keys mapping to true.
-------------------------------------------------------------------------------
function CrLua.List.toSet(list)
    assert(type(list) == 'table')

    local result = {}
    for _, v in ipairs(list) do
        result[v] = true
    end
    return result
end

function CrLua.List._testToSet()
    local list = { 'a', 'b' }
    local set = CrLua.List.toSet(list)
    assert(set.a)
    assert(set.b)
    assert(not set.c)
end

-------------------------------------------------------------------------------
--- Convert a set to a list.
-- The list is dependent on table key iteration order, make no assumptions!
-- @param set table : map from key to true.
-- @return list : table with number indices.
-------------------------------------------------------------------------------
function CrLua.List.fromSet(set)
    assert(type(set) == 'table')

    local result = {}
    for k, v in pairs(set) do
        assert(v == true)
        table.insert(result, k)
    end
    return result
end

function CrLua.List._testToSet()
    local set = { a = true, b = true }
    local list = CrLua.List.fromSet(set)
    assert(#list == 2, '#list=' .. #list)
    if list[1] == 'a' then
        assert(list[1] == 'a' and list[2] == 'b')
    else
        assert(list[1] == 'b' and list[2] == 'a')
    end
end

CrLua.LockTable.readOnlyRequireKey(TAG, CrLua.List)
