-------------------------------------------------------------------------------
--- Lua list utility functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.List'

local CrLua = CrLua or {}
CrLua.List = assert(not CrLua.List) and {}

-------------------------------------------------------------------------------
--- Concatenate two lists.
-- @param a list: table with number indices.
-- @param b list: table with number indices.
-- @return list: list with a's entries followed by b's entries.
-------------------------------------------------------------------------------
function CrLua.List.join(a, b)
    assert(type(a) == 'table' and type(b) == 'table')

    local result = {}
    for _, v in ipairs(a) do
        table.insert(result, v)
    end
    for _, v in ipairs(b) do
        table.insert(result, v)
    end
    return result
end

function CrLua.List._testJoin()
    local a = { 'one', 'two' }
    local b = { 'three', 'four' }
    local joined = CrLua.List.join(a, b)
    assert(#joined == 4)
    assert(joined[1] == 'one')
    assert(joined[2] == 'two')
    assert(joined[3] == 'three')
    assert(joined[4] == 'four')
end

-------------------------------------------------------------------------------
--- Filter list.
-- @param list : table with number indices.
-- @param filterFunction function : called with list items, return true to keep.
-- @return list : list items accepted by filter function.
-------------------------------------------------------------------------------
function CrLua.List.filter(list, filterFunction)
    assert(type(list) == 'table' and type(filterFunction) == 'function')

    local result = {}
    for _, v in ipairs(list) do
        if filterFunction(v) then
            table.insert(result, v)
        end
    end
    return result
end

function CrLua.List._testFilter()
    local list = { 1, 4, 5, 2, 5, 7 }
    local function filterFunction(entry)
        return entry % 2 == 0
    end
    local filtered = CrLua.List.filter(list, filterFunction)
    assert(#filtered == 2)
    assert(filtered[1] == 4)
    assert(filtered[2] == 2)
end

-------------------------------------------------------------------------------
--- Map list.
-- @param list : table with number indices.
-- @param mapFunction function : call for each list entry to populate result.
-- @return list : list of map function results for each entry in original list.
-------------------------------------------------------------------------------
function CrLua.List.map(list, mapFunction)
    assert(type(list) == 'table' and type(mapFunction) == 'function')

    local result = {}
    for _, v in ipairs(list) do
        local mapped = assert(mapFunction(v))
        table.insert(result, mapped)
    end
    return result
end

function CrLua.List._testMap()
    local list = { 1, 3 }
    local function mapFunction(entry)
        return entry + 1
    end
    local mapped = CrLua.List.map(list, mapFunction)
    assert(#mapped == 2)
    assert(mapped[1] == 2)
    assert(mapped[2] == 4)
end

-------------------------------------------------------------------------------
--- Find the minimum entry in a list, with optional function for value.
-- @param list : table with number indices.
-- @param optional minFunction : call for each list entry for value to minimize.
-- @return ? : list item with the min value.
-------------------------------------------------------------------------------
function CrLua.List.min(list, minFunction)
    assert(type(list) == 'table' and ((not minFunction) or type(minFunction) == 'function'))

    local minScore = nil
    local minItem = nil
    for _, v in ipairs(list) do
        local score = (minFunction and minFunction(v)) or tonumber(v)
        if (not minScore) or score < minScore then
            minScore = score
            minItem = v
        end
    end
    return minItem
end

function CrLua.List._testMin()
    local list = { 2, 1, 3, 5, 4 }
    local minFunction = function(v)
        return v
    end
    local min1 = CrLua.List.min(list)
    local min2 = CrLua.List.min(list, minFunction)
    assert(min1 == min2 and min1 == 1)
end

-------------------------------------------------------------------------------
--- Find the maximum entry in a list, with optional function for value.
-- @param list : table with number indices.
-- @param optional maxFunction : call for each list entry for value to maximize.
-- @return ? : list item with the max value.
-------------------------------------------------------------------------------
function CrLua.List.max(list, maxFunction)
    assert(type(list) == 'table' and ((not maxFunction) or type(maxFunction) == 'function'))

    local maxScore = nil
    local maxItem = nil
    for _, v in ipairs(list) do
        local score = (maxFunction and maxFunction(v)) or tonumber(v)
        if (not maxScore) or score > maxScore then
            maxScore = score
            maxItem = v
        end
    end
    return maxItem
end

function CrLua.List._testMax()
    local list = { 2, 1, 3, 5, 4 }
    local maxFunction = function(v)
        return v
    end
    local max1 = CrLua.List.max(list)
    local max2 = CrLua.List.max(list, maxFunction)
    assert(max1 == max2 and max1 == 5)
end
