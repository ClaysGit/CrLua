#include ~/CrLua/Util

-------------------------------------------------------------------------------
--- Lua zone (board area) functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.Zone'

local CrLua = CrLua or {}
CrLua.Zone = assert(not CrLua.Zone) and {}

-------------------------------------------------------------------------------
--- Get the closest zone.
-- @param zones table : map from name to zone table with optional fields {xmin, xmax, ymin, ymax, zmin, zmax}.
-- @param position table : {x,y,z} entries.
-- @return key, zone : index of closest zone in zones table, closet zone.
-------------------------------------------------------------------------------
function CrLua.Zone.closest(zones, position)
    assert(type(zones) == 'table' and position and type(position.x) == 'number')
    local function distanceFunction(zone)
        local zonePosition = {
            x = ((zone.xmin or 0) + (zone.xmax or 0)) / 2,
            y = ((zone.ymin or 0) + (zone.ymax or 0)) / 2,
            z = ((zone.zmin or 0) + (zone.zmax or 0)) / 2
        }
        return CrLua.Util.distanceSq(position, zonePosition)
    end
    local key, zone = CrLua.Util.min(zones, distanceFunction)
    return key, zone
end

function CrLua.Zone._testClosest()
    local zones = { neg = { xmax = -0.01 }, pos = { xmin = 0.01 }}
    local key, zone = CrLua.Zone.closest(zones, { x = -1, y = 0, z = 0 })
    assert(key == 'neg' and zone.xmax == -0.01)
    local key, zone = CrLua.Zone.closest(zones, { x = 1, y = 0, z = 0 })
    assert(key == 'pos' and zone.xmin == 0.01)
end

-------------------------------------------------------------------------------
--- Is position inside zone?
-- @param zone table: optional fields {xmin, xmax, ymin, ymax, zmin, zmax}.
-- @param position table : {x,y,z} entries.
-- @return boolean : true if position is inside zone.
-------------------------------------------------------------------------------
function CrLua.Zone.isInside(zone, position)
    assert(type(zone) == 'table' and position and type(position.x) == 'number')
    return (not zone.xmin or position.x >= zone.xmin) and
        (not zone.xmax or position.x <= zone.xmax) and
        (not zone.ymin or position.y >= zone.ymin) and
        (not zone.ymax or position.y <= zone.ymax) and
        (not zone.zmin or position.z >= zone.zmin) and
        (not zone.zmax or position.z <= zone.zmax)
end

function CrLua.Zone._testIsInside()
    local zones = { neg = { xmax = -0.01 }, pos = { xmin = 0.01 }}
    assert(CrLua.Zone.isInside(zones.neg, { x = -1, y = 0, z = 0 }))
    assert(not CrLua.Zone.isInside(zones.neg, { x = 1, y = 0, z = 0 }))
end
