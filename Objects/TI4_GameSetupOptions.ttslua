-- @author Darrell for UI generation scripting
-- @author Milty for game setup

local _config = false
local DEFAULT_CONFIG = {
    playerCount = 6,
    extraRings = 0,
    useCodexACs = false
}

local codexACList = {'Hack Election', 'Harness Energy', 'Blitz', 'Fighter Conscription', 'Forward Supply Base', 'Rally', 'War Machine (1)', 'War Machine (2)', 'War Machine (3)', 'War Machine (4)', 'Master Plan', 'Insider Information', 'Plagiarize', 'Scramble Frequency', 'Solar Flare', 'Reflective Shielding', 'Impersonation', 'Sanction', 'Counterstroke', 'Ghost Squad',}

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _setupHelper = getHelperClient('TI4_SETUP_HELPER')
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

-------------------------------------------------------------------------------
function onLoad()
    _config = DEFAULT_CONFIG
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function onPlayerConnect(playerId)
    -- UI does not seem to appear for new players, recreating it fixes.
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function _createUI()
    local scale = self.getScale()
    local uiScale = (4 / scale.x) .. ' ' .. (4 / scale.z) .. ' ' .. (1 / scale.y)

    local function text(class, text)
        return {
            tag = 'Text',
            attributes = {
                class = class
            },
            value = text
        }
    end

    local function toggle(id, text, isOn)
        return {
            tag = 'Toggle',
            attributes = {
                id = id,
                isOn = isOn or nil
            },
            value = text
        }
    end

    local function toggleGroup(idPrefix, values)
        local height = math.ceil(#values / 3) * 50
        local toggles = {}
        for _, value in ipairs(values) do
            table.insert(toggles, {
                tag = 'ToggleButton',
                attributes = {
                    id = idPrefix .. string.gsub(tostring(value), ' ', '_')
                },
                value = value
            })
        end
        return {
            tag = 'ToggleGroup',
            attributes = {
                preferredHeight = height,
            },
            children = {
                {
                    tag = 'GridLayout',
                    children = toggles
                }
            }
        }
    end

    local defaultColorBlock = '#FFFFFF|#1F45FC|#38ACEC|rgba(0.78,0.78,0.78,0.5)'
    local defaults = {
        tag = 'Defaults',
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    spacing = 10,
                    childForceExpandHeight = false,
                }
            },
            {
                tag = 'HorizontalLayout',
                attributes = {
                    spacing = 10,
                }
            },
            {
                tag = 'GridLayout',
                attributes = {
                    spacing = '10 10',
                    cellSize = '86 40'
                },
            },
            {
                tag = 'ToggleGroup',
                attributes = {
                    toggleBackgroundColor = '#FF0000',
                    toggleSelectedColor = '#38ACEC',
                }
            },
            {
                tag = 'Toggle',
                attributes = {
                    fontSize = 16,
                    textColor = 'White',
                    onValueChanged = 'onToggleValueChanged',
                }
            },
            {
                tag = 'ToggleButton',
                attributes = {
                    fontSize = 16,
                    onValueChanged = 'onToggleValueChanged',
                    colors = defaultColorBlock
                }
                -- ToggleGroup.toggleSelectedColor does not seem to apply to ToggleButton?
            },
            {
                tag = 'Button',
                attributes = {
                    onClick = 'onButtonClick'
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'title',
                    fontSize = 24,
                    fontStyle = 'Bold',
                    color = 'White',
                    alignment = 'MiddleCenter',
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'heading',
                    fontSize = 16,
                    color = 'White',
                    alignment = 'MiddleCenter'
                }
            },
        }
    }
    local top = {
        tag = 'Panel',
        attributes = {
            position = '0 0 2',  -- 0.05
            rotation = '0 180 0',
            width = 300,
            height = 500,
            scale = uiScale,
        },
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    padding = '10 10 10 10',
                },
                children = {
                    text('title', 'TI4 Game Setup Options'),

                    text('heading', 'Player count'),
                    toggleGroup('playerCount', { 3, 4, 5, 6, 7, 8 }),

                    text('heading', 'Extra map rings'),
                    toggleGroup('extraRings', { 0, 1, 2 }),

                    toggle('useCodexACs', 'Use Codex Action Cards')
                }
            },
            {
                tag = 'Panel',
                attributes = {
                    height = 70,
                    padding = '10 10 10 10',
                    rectAlignment = 'LowerCenter',
                },
                children = {
                    {
                        tag = 'Button',
                        attributes = {
                            id = 'setup',
                            fontSize = 24,
                        },
                        value = 'Setup'
                    },
                }
            }
        }
    }

    self.UI.setXmlTable({ defaults, top })
end

function updateUiFromConfig()
    self.UI.setAttribute('useCodexACs', 'isOn', _config.useCodexACs)
    for i = 3, 8 do
        self.UI.setAttribute('playerCount' .. i, 'isOn', _config.playerCount == i)
    end
    for i = 0, 2 do
        self.UI.setAttribute('extraRings' .. i, 'isOn', _config.extraRings == i)
    end
end

-------------------------------------------------------------------------------

function onButtonClick(player, inputType, id)
    if id == 'setup' then
        setupGame(_config.playerCount, _config.extraRings)
        setupCodexACs(_config.useCodexACs)
        packSelfIntoSetupBag()
    else
        error(TAG .. ': unknown button "' .. id .. '"')
    end
end

function onToggleValueChanged(player, value, id)
    local valueAsBool = string.lower(value) == 'true' and true or false
    assert(type(valueAsBool) == 'boolean')

    local playerCount = string.match(id, '^playerCount(.*)$')
    local extraRings = string.match(id, '^extraRings(.*)$')

    if playerCount then
        if valueAsBool then
            _config.playerCount = tonumber(playerCount)
        end
    elseif extraRings then
        if valueAsBool then
            _config.extraRings = tonumber(extraRings)
        end
    elseif id == 'useCodexACs' then
        _config.useCodexACs = valueAsBool
    else
        error(TAG .. ': unknown toggle "' .. id .. '"')
    end

    if _config.playerCount > 6 then
        _config.extraRings = math.max(_config.extraRings, 1)
    end
    Wait.frames(updateUiFromConfig, 2)
end

-------------------------------------------------------------------------------

function setupGame(playerCount, extraRings)
    assert(type(playerCount) == 'number' and type(extraRings) == 'number')
    print('Setting up for ' .. playerCount .. ' players with ' .. extraRings .. ' extra map rings')
    if _zoneHelper.getPlayerCount() ~= playerCount or _zoneHelper.getExtraRings() ~= extraRings then
        _setupHelper.setup({
            playerCount = playerCount,
            extraRings = extraRings
        })
    end
end

function setupCodexACs(codexACsVal)
    local actionDeck = false
    local actionDeckPos = false
    local codexDeck = false
    for i, obj in ipairs(getAllObjects()) do
        if obj.getName() == 'Actions' then
            actionDeck = obj
        elseif obj.getName() == 'Codex Action Cards' then
            codexDeck = obj
        end
    end
    actionDeckPos = actionDeck and actionDeck.getPosition()
    if codexACsVal == true then
        if codexDeck and actionDeck then
            codexDeck.setPositionSmooth({
                x = actionDeckPos.x,
                y = actionDeckPos.y + 3,
                z = actionDeckPos.z
            }, false, true)
            Wait.time(function() actionDeck.shuffle() end, 5)
        else
            print('Warning: cannot find "Actions" and "Codex Action Cards" decks')
        end
    else
        print('Removing Codex action cards from deck.')
        local codexACSet = {}
        for _, codexAC in ipairs(codexACList) do
            codexACSet[codexAC] = true
        end
        for i, entry in ipairs(actionDeck.getObjects()) do
            if codexACSet[entry.name] then
                actionDeck.takeObject({
                    guid = entry.guid,
                    position = {
                        x = actionDeckPos.x,
                        y = actionDeckPos.y + 3 + (i / 5),
                        z = actionDeckPos.z + 5
                    }
                })
            end
        end
    end
end

function packSelfIntoSetupBag()
    local function getSetupBag()
        for _, object in ipairs(getAllObjects()) do
            if object.tag == 'Bag' and object.getName() == 'Setup Bag' then
                return object
            end
        end
        error('missing setup bag')
    end
    local setupBag = getSetupBag()
    setupBag.putObject(self)
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
