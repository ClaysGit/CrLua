-- @author Darrell for UI generation scripting
-- @author Milty for game setup

local _config = false
local DEFAULT_CONFIG = {
    playerCount = 6,
    extraRings = 0,
    usePoK = false,
    useCodex1ACs = false,
    is14ptGame = false,
    isRightClick = false,
}

local CONTRIBUTORS = {
    '3tamatulg',
    'Alister',
    'Billy',
    'Blarknob',
    'Brandondash',
    'Cruix',
    'Cyrusa',
    'Darrell',
    'Darth Batman',
    'Doot',
    'Garnet Bear',
    'Goatboy',  -- TI4 model for rotating space dock
    'Hooliganj',
    'Jabberwocky',  -- PoK wormholes, scripting
    'Jatta Pake',
    'Jefferson',
    'Lily',
    'Loving Teammate',
    'Mage',
    'Mantis',
    'Max Philippa',
    'Milty',
    'Nicest_guy_22',
    'Plat251',  -- crisper fonts on multiRoller
    'Positive',
    'Psicoma',
    'Raptor1210',
    'Rodney',
    'Saunick',  -- TI4 ship models on thingiverse
    'SCPT Hunter',
    'SCPT Matt',
    'Snorecerer',
    'Tactic Blue',
    'ThatRobHuman',
    'Toppopia',
    'Volverbot',  -- Numpad hot keys
    'Wekker',
    'West',  -- updated extra strat cards
    'x3n d0g',
}

local BACK_MESSAGE = [[
This mod is made of contributions from many people.
-
Thanks to $CONTRIBUTORS, and the entire TI4 community for their contributions.
-
A massive shout out to Fantasy Flight Games for creating an awesome game. If you have the opportunity please support them. The board game industry wouldn't be the same without them and if you enjoy their work please, please support them and your local game stores.
]]

-------------------------------------------------------------------------------

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _setupHelper = getHelperClient('TI4_SETUP_HELPER')
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

local _getByNameCache = {}

-------------------------------------------------------------------------------

function onLoad()
    _config = DEFAULT_CONFIG
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function onPlayerConnect(playerId)
    -- UI does not seem to appear for new players, recreating it fixes.
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function _createUI()
    local scale = self.getScale()
    local uiScale = (4 / scale.x) .. ' ' .. (4 / scale.z) .. ' ' .. (1 / scale.y)

    local function text(class, text)
        return {
            tag = 'Text',
            attributes = {
                class = class
            },
            value = text
        }
    end

    local function toggle(id, text, isOn)
        return {
            tag = 'Toggle',
            attributes = {
                id = id,
                isOn = isOn or nil
            },
            value = text
        }
    end

    local function toggleGroup(idPrefix, values)
        local height = math.ceil(#values / 3) * 50
        local toggles = {}
        for _, value in ipairs(values) do
            table.insert(toggles, {
                tag = 'ToggleButton',
                attributes = {
                    id = idPrefix .. string.gsub(tostring(value), ' ', '_'),
                },
                value = value
            })
        end
        return {
            tag = 'ToggleGroup',
            attributes = {
                preferredHeight = height,
            },
            children = {
                {
                    tag = 'GridLayout',
                    children = toggles
                }
            }
        }
    end

    local defaultColorBlock = '#FFFFFF|#1F45FC|#38ACEC|rgba(0.78,0.78,0.78,0.5)'
    local defaults = {
        tag = 'Defaults',
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    spacing = 10,
                    childForceExpandHeight = false,
                }
            },
            {
                tag = 'HorizontalLayout',
                attributes = {
                    spacing = 10,
                }
            },
            {
                tag = 'GridLayout',
                attributes = {
                    spacing = '10 10',
                    cellSize = '62 40' -- 86 40 for three columns
                },
            },
            {
                tag = 'ToggleGroup',
                attributes = {
                    toggleBackgroundColor = '#FF0000',
                    toggleSelectedColor = '#38ACEC',
                }
            },
            {
                tag = 'Toggle',
                attributes = {
                    fontSize = 16,
                    textColor = 'White',
                    onValueChanged = 'onToggleValueChanged',
                }
            },
            {
                tag = 'ToggleButton',
                attributes = {
                    fontSize = 16,
                    onValueChanged = 'onToggleValueChanged',
                    colors = defaultColorBlock
                }
                -- ToggleGroup.toggleSelectedColor does not seem to apply to ToggleButton?
            },
            {
                tag = 'Button',
                attributes = {
                    onClick = 'onButtonClick'
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'title',
                    fontSize = 24,
                    fontStyle = 'Bold',
                    color = 'White',
                    alignment = 'MiddleCenter',
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'heading',
                    fontSize = 16,
                    color = 'White',
                    alignment = 'MiddleCenter'
                }
            },
        }
    }
    local top = {
        tag = 'Panel',
        attributes = {
            position = '0 0 2',
            rotation = '0 180 0',
            width = 300,
            height = 500,
            scale = uiScale,
        },
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    padding = '10 10 10 90',
                },
                children = {
                    text('title', 'TI4 Game Setup Options'),

                    text('heading', 'Player count'),
                    toggleGroup('playerCount', { 2, 3, 4, 5, 6, 7, 8 }),

                    text('heading', 'Extra map rings'),
                    toggleGroup('extraRings', { 0, 1, 2 }),

                    toggle('usePoK', 'Use Prophecy of Kings expansion'),
                    toggle('useCodex1ACs', 'Use Codex 1 action cards'),
                    toggle('14ptGame', '14 point game'),
                }
            },
            {
                tag = 'Panel',
                attributes = {
                    height = 70,
                    padding = '10 10 10 10',
                    rectAlignment = 'LowerCenter',
                },
                children = {
                    {
                        tag = 'Button',
                        attributes = {
                            id = 'setup',
                            fontSize = 24,
                        },
                        value = 'Setup'
                    },
                }
            }
        }
    }
    local bottom = {
        tag = 'Panel',
        attributes = {
            position = '0 0 -22',
            rotation = '0 0 0',
            width = 300,
            height = 500,
            padding = '20 20 20 20',
            scale = uiScale,
            color = '#000000e0'
        },
        children = {
            {
                tag = 'Text',
                attributes = {
                    fontSize = 14,
                    color = 'White',
                    alignment = 'MiddleCenter',
                },
                value = BACK_MESSAGE:gsub('$CONTRIBUTORS', table.concat(CONTRIBUTORS, ', '))
            }
        }
    }

    self.UI.setXmlTable({ defaults, top, bottom })
end

function updateUiFromConfig()
    self.UI.setAttribute('usePoK', 'isOn', _config.usePoK)
    self.UI.setAttribute('useCodex1ACs', 'isOn', _config.useCodex1ACs)
    self.UI.setAttribute('14ptGame', 'isOn', _config.is14ptGame)
    for i = 3, 8 do
        self.UI.setAttribute('playerCount' .. i, 'isOn', _config.playerCount == i)
    end
    for i = 0, 2 do
        self.UI.setAttribute('extraRings' .. i, 'isOn', _config.extraRings == i)
    end
end

-------------------------------------------------------------------------------

local RIGHT_CLICK = '-2'

function onButtonClick(player, inputType, id)
    local isRightClick = inputType == RIGHT_CLICK and true or false
    if id == 'setup' then
        setupGame(isRightClick)
    else
        error('onButtonClick: unknown button "' .. id .. '"')
    end
end

function onToggleValueChanged(player, value, id)
    local valueAsBool = string.lower(value) == 'true' and true or false
    assert(type(valueAsBool) == 'boolean')

    local playerCount = string.match(id, '^playerCount(.*)$')
    local extraRings = string.match(id, '^extraRings(.*)$')

    if playerCount then
        if valueAsBool then
            _config.playerCount = tonumber(playerCount)
        end
    elseif extraRings then
        if valueAsBool then
            _config.extraRings = tonumber(extraRings)
        end
    elseif id == 'usePoK' then
        _config.usePoK = valueAsBool
    elseif id == 'useCodex1ACs' then
        _config.useCodex1ACs = valueAsBool
    elseif id == '14ptGame' then
        _config.is14ptGame = valueAsBool
    else
        error('onToggleValueChanged: unknown toggle "' .. id .. '"')
    end

    if _config.playerCount > 6 then
        _config.extraRings = math.max(_config.extraRings, 1)
    end
    Wait.frames(updateUiFromConfig, 2)
end

-------------------------------------------------------------------------------

function setupGame(isRightClick)
    _config.isRightClick = isRightClick
    startLuaCoroutine(self, 'setupGameCoroutine')
end

function setupGameCoroutine()
    assert(type(_config.playerCount) == 'number')
    assert(type(_config.extraRings) == 'number')
    assert(type(_config.usePoK) == 'boolean')
    assert(type(_config.useCodex1ACs) == 'boolean')
    assert(type(_config.is14ptGame) == 'boolean')
    assert(type(_config.isRightClick) == 'boolean')

    print('Setting up for ' .. _config.playerCount .. ' players with ' .. _config.extraRings .. ' extra map rings')

    setupPoK(_config.usePoK)
    coroutine.yield(0)

    setupCodex1ACs(_config.useCodex1ACs)
    coroutine.yield(0)

    setup14ptGame(_config.is14ptGame)
    coroutine.yield(0)

    _setupHelper.setup({
        playerCount = _config.playerCount,
        extraRings = _config.extraRings,
        isRightClick = _config.isRightClick,
        includePoK = _config.usePoK,
    })
    coroutine.yield(0)

    if not _config.isRightClick then
        packSelfIntoSetupBag()
    end
    coroutine.yield(0)

    return 1
end

function setupPoK(usePoK)
    -- Placeholder, not sure yet how to split between here and setup helper.

    local remove = {
        'Alliance ($COLOR)',
        'Leader Sheet ($COLOR)',
        'Exploration Mat',
        'Frontier Tokens Bag',
    }

    local add = {
        ['PoK Actions'] = {
            addToDeck = 'Actions'
        },
        ['Hazardous Exploration'] = {
            addToDeck = 'Hazardous Exploration'
        }
    }

end

function setupCodex1ACs(useCodex1ACs)
    if useCodex1ACs then
        _addCards('Variant Pieces (Searching Recommended)', 'Actions', 'Codex 1')
    else
        _removeCards('Purge Bag', 'Actions', 'Codex 1')
    end
end

function setup14ptGame(is14ptGame)
    local scoreboard = _getByName('Scoreboard')
    local expect = is14ptGame and true or false
    if scoreboard and scoreboard.is_face_down ~= expect then
        scoreboard.setLock(false)
        scoreboard.flip()
        Wait.time(function() scoreboard.setLock(true) end, 5)
    end
end

-------------------------------------------------------------------------------

function packSelfIntoSetupBag()
    local setupBag = _getByName('Setup Bag')
    local tutorial = _getByName('TI4 TTS Tutorial Series')
    if tutorial then
        setupBag.putObject(tutorial)
    end
    setupBag.putObject(self)
end

function _copy(t)
    if t and type(t) == 'table' then
        local copy = {}
        for k, v in pairs(t) do
            copy[k] = type(v) == 'table' and _copy(v) or v
        end
        t = copy
    end
    return t
end

function _getByName(name)
    local guid = _getByNameCache[name]
    local object = guid and getObjectFromGUID(guid)
    if object then
        return object
    end
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == name then
            _getByNameCache[name] = object.getGUID()
            return object
        end
    end
end

function _addCards(containerName, deckName, sourceName)
    local container = _getByName(containerName)
    if not container then
        error('_addCards: missing container "' .. containerName .. '"')
    end

    local name = sourceName .. ' ' .. deckName
    local guid = false
    for _, entry in ipairs(container.getObjects()) do
        if entry.name == name then
            guid = entry.guid
            break
        end
    end
    if not guid then
        error('_addCards: missing "' .. containerName .. '/' .. name .. '"')
    end

    local transform = _deckHelper.getDeckTransform(deckName)
    if not transform then
        error('_addCards: missing location for "' .. deckName .. '"')
    end

    container.takeObject({
        guid = guid,
        position = {
            x = transform.position.x,
            y = transform.position.y + 5,
            z = transform.position.z,
        },
        rotation = _copy(transform.rotation),
        smooth = true
    })

    local function delayedShuffle()
        local deck = getObjectFromGUID(_deckHelper.getDeck(deckName))
        if deck then
            deck.shuffle()
        end
    end
    Wait.time(delayedShuffle, 5)
end

function _removeCards(containerName, deckName, sourceName)
    local container = _getByName(containerName)
    if not container then
        error('_removeCards: missing container "' .. containerName .. '"')
    end

    local deck = getObjectFromGUID(_deckHelper.getDeck(deckName))
    if not deck then
        error('_removeCards: missing deck "' .. deckName .. '"')
    end

    local nameSet = {}
    for _, name in ipairs(_deckHelper.getCards(sourceName)) do
        nameSet[name] = true
    end

    local position = deck.getPosition()
    position.y = position.y + 5
    for _, entry in ipairs(deck.getObjects()) do
        if nameSet[entry.name] then
            deck.takeObject({
                position          = position,
                callback_function = function(object) container.putObject(object) end,
                smooth            = true,
                guid              = entry.guid
            })
            position.y = position.y + 0.2
        end
    end
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
