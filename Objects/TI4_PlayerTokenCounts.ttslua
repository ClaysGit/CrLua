--- Report player token counts.
-- Feature request from micmacmoose 9/5/20 on tts-module-workshop discord.
-- @author Darrell

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
_factionHelper = getHelperClient('TI4_FACTION_HELPER')
_zoneHelper = getHelperClient('TI4_ZONE_HELPER')

function onLoad(saveState)
    self.addContextMenuItem('Update token counts', updateTokenCounts, false)

    -- Guid may change if there's a conflict.  Wait a moment before using.
    local function delayedCreateTimer()
        local timerId = self.getName() .. '|' .. self.getGUID()
        -- No need to remove the timer if this is destroyed, TTS ignores it.
        Timer.destroy(timerId)
        Timer.create({
            identifier = timerId,
            function_owner = self,
            function_name = 'updateTokenCounts',
            delay = 5,  -- seconds
            repetitions = 0  -- repeat until explictly Timer.destroy'ed
        })
    end
    Wait.frames(delayedCreateTimer, 10)
end

function updateTokenCounts()
    local colorToFaction = _factionHelper.allFactions()
    local tokenNameToColor = {}
    for color, faction in pairs(colorToFaction) do
        tokenNameToColor[faction.tokenName .. ' Command Token'] = color
    end

    local colorToTokens = {}
    for _, object in ipairs(getAllObjects()) do
        local color = tokenNameToColor[object.getName()]
        if color then
            local tokens = colorToTokens[color]
            if not tokens then
                tokens = {}
                colorToTokens[color] = tokens
            end
            table.insert(tokens, object)
        end
    end

    -- Iterate in zone order, matches clockwise seating.
    local text = {}
    for _, color in ipairs(_zoneHelper.zones()) do
        local hex = Color.toHex(Color.fromString(color == 'White' and 'Black' or color))
        table.insert(text, '[' .. hex .. ']' .. color .. ': ')
        local faction = colorToFaction[color]
        local commandSheet = faction and getObjectFromGUID(faction.commandSheetGuid)
        local tokens = colorToTokens[color]
        if commandSheet and tokens then
            local numTactics = 0
            local numFleet = 0
            local numStrategy = 0
            local numOther = 0
            for _, token in ipairs(tokens) do
                local p = commandSheet.positionToLocal(token.getPosition())
                local dSq = p.x * p.x + p.z * p.z
                local degrees = math.deg(math.atan2(p.z, p.x))
                degrees = (degrees + 360) % 360

                if dSq < 15 then
                    if 300 > degrees and degrees > 240 then
                        numTactics = numTactics + 1
                    elseif 240 > degrees and degrees > 180 then
                        numFleet = numFleet + 1
                    elseif 180 > degrees and degrees > 120 then
                        numStrategy = numStrategy + 1
                    else
                        numOther = numOther + 1
                    end
                end
            end
            table.insert(text, numTactics .. ' Tactics, ')
            table.insert(text, numFleet .. ' Fleet, ')
            table.insert(text, numStrategy .. ' Strategy')
            if numOther > 0 then
                table.insert(text, ', ')
                table.insert(text, numOther .. ' Other')
            end
        end
        table.insert(text, '\n')
    end
    self.setDescription(table.concat(text, ''))
end
