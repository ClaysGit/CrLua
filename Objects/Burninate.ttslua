--- Sustain damage burn effect
-- @author Darrell

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')
local _lastCheck = false

local _burningObjectGuidSet = {}
local _deletedItems = false

function burn(object)
    _burningObjectGuidSet[object.getGUID()] = true

    local clone = self.clone({
        position     = object.getPosition(),
        snap_to_grid = false
    })
    clone.setRotation(object.getRotation())
    clone.setScale({ x = 0.01, y = 0.01, z = 0.01 })
    clone.AssetBundle.playLoopingEffect(2)

    -- Clone position is not enough, force to position.
    clone.setPosition(object.getPosition())
    object.addAttachment(clone)
end

function unburn(object)
    _burningObjectGuidSet[object.getGUID()] = nil

    local attachments = object.removeAttachments()
    for _, attachment in ipairs(attachments or {}) do
        if _deletedItems then
            _deletedItems.call('ignoreGuid', attachment.getGUID())
        end
        destroyObject(attachment)
    end
end

function onLoad(saveState)
    _lastCheck = math.floor(Time.time)
end

function onDestroy()
    for guid, _ in pairs(_burningObjectGuidSet) do
        local object = getObjectFromGUID(guid)
        if object then
            unburn(object)
        end
    end
end

function onUpdate()
    local now = math.floor(Time.time)
    if not _lastCheck or _lastCheck + 2 < now then
        _lastCheck = now

        local burnNameSet = {}
        for color, faction in pairs(_factionHelper.allFactions()) do
            burnNameSet[color .. ' Dreadnought'] = true
            burnNameSet[color .. ' War Sun'] = true
            burnNameSet[faction.flagship] = true
        end

        local function isBurnable(object)
            if object.held_by_color then
                return false
            end
            if object.tag ~= 'Generic' then
                return false
            end
            if not burnNameSet[object.getName()] then
                return false
            end
            return _zoneHelper.inTableZone(object.getPosition())
        end

        local burnableObjects = {}
        for _, object in ipairs(getAllObjects()) do
            if isBurnable(object) then
                table.insert(burnableObjects, object)
            end
            if object.getName() == 'TI4 Deleted Items' then
                _deletedItems = object
            end
        end

        for _, object in ipairs(burnableObjects) do
            local guid = object.getGUID()
            local shouldBurn = object.is_face_down

            if shouldBurn and not _burningObjectGuidSet[guid] then
                burn(object)
            end

            if not shouldBurn and _burningObjectGuidSet[guid] then
                unburn(object)
            end
        end
    end
end

function onObjectPickUp(playerColor, pickedUpObject)
    assert(type(pickedUpObject) == 'userdata')
    if _burningObjectGuidSet[pickedUpObject.getGUID()] then
        unburn(pickedUpObject)
    end
end

function onObjectDestroy(dyingObject)
    if _burningObjectGuidSet[dyingObject.getGUID()] then
        unburn(dyingObject)
    end
end

function onObjectEnterContainer(container, enterObject)
    if _burningObjectGuidSet[enterObject] then
        unburn(dyingObject)
    end
end
