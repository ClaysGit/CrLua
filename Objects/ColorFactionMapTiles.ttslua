-------------------------------------------------------------------------------
--- Draw a border around per-faction controlled map tiles.
-- @author Darrell
-- This was a feature request by "@Mr Smains" on the "help-support-requests"
-- Discord channel on 5/1/2020.
-------------------------------------------------------------------------------

local TAG = 'CrLua.Objects.ColorFactionMapTiles'

local _config = {
    thickness = 0.5,
}

function onLoad(save_state)
    -- Get a world Y value from CrLua.TI4.System.
    local y = CrLua.TI4.System.LOCAL_Y
    local system = CrLua.TI4.System.fromPosition({ x = 0, y = 0, z = 0 })
    assert(system and system.object)
    local position = system.object.positionToWorld({ x = 0, y = y, z = 0 })
    y = position.y

    local lines = {}
    local hexToOwners = getSystemOwners()

    --[[
    for hex, owners in pairs(hexToOwners) do
        if owners.ground then
            table.insert(lines, CrLua.TI4.Hex.vectorLine(hex, {
                thickness = 0.4,
                color = owners.ground
            }))
        end
        if owners.space then
            table.insert(lines, CrLua.TI4.Hex.vectorLine(hex, {
                thickness = 0.2,
                color = owners.space
            }))
        end
        for planetName, color in pairs(owners.planetName) do
            table.insert(lines, CrLua.TI4.System.planetVectorLine(owners.system, planetName, {
                thickness = 0.2,
                color = color
            }))
        end
    end
    --]]

    --[[
    -- Verify commonEdge
    for _, zone in ipairs(CrLua.TI4.Zone.all()) do
        local color = assert(zone.color)
        CrLua.Log.d(TAG, 'onLoad: ' .. color)
        local ownFullySet, ownPartialSet, ownSpaceSet = getOwned(hexToOwners, color)
            for hex, _ in pairs(ownFullySet) do
                local neighbors = CrLua.TI4.Hex.neighbors(hex)
                for _, neighbor in ipairs(neighbors) do
                    if not ownFullySet[neighbor] then
                        local points = CrLua.TI4.Hex.commonEdge(hex, neighbor)
                        table.insert(points, { x= (points[1].x + points[2].x) / 2, z = (points[1].z + points[2].z) / 2 })
                        table.insert(points, CrLua.TI4.Hex.toPosition(hex))
                        for _, point in ipairs(points) do
                            point.y = 1.4
                        end
                        table.insert(lines, {
                            points = points,
                            color = color,
                            thickness = 0.3,
                            loop = false,
                            square = true
                        })
                    end
                end
            end
        end
    end
    --]]

    for _, zone in ipairs(CrLua.TI4.Zone.all()) do
        local color = assert(zone.color)
        CrLua.Log.d(TAG, 'onLoad: ' .. color)
        local ownFullySet, ownPartialSet, ownSpaceSet = getOwned(hexToOwners, color)
        local polygons, _ = getControlPolygons(ownFullySet)
        for _, polygon in ipairs(polygons) do
            local thickness = 0.4
            local polygon = CrLua.Polygon.inset(polygon, thickness / 2.0)
            local points = CrLua.Polygon.toXYZ(polygon, y)
            table.insert(lines, {
                points = points,
                thickness = thickness,
                color = color,
                square = true,
                loop = true
            })
        end
    end
    --]]

    Global.setVectorLines(lines)
end

function onDrop(playerColor)
    local position = self.getPosition()
    local system = CrLua.TI4.System.fromPosition(position)
    local planetName = system and CrLua.TI4.System.planetFromPosition(system, position, true)
    if planetName then
        local lines = { CrLua.TI4.System.planetVectorLine(system, planetName, {}) }
        Global.setVectorLines(lines)
        Player[playerColor].pingTable(CrLua.TI4.System.planetToPosition(system, planetName))
    else
        Global.setVectorLines()
    end
end

-------------------------------------------------------------------------------

function errorHex(hex, message)
    Global.setVectorLines({ CrLua.TI4.Hex.vectorLine(hex, { color = 'Red' }) })
    error(message)
end

-------------------------------------------------------------------------------

--- Get owner tokens.
-- Results have {color,hex,system,planet fields.}
function getOwnerTokens()
    -- Map from token faction to color.
    local tokenFactionColor = {}
    local zones = CrLua.TI4.Zone.all()
    for _, zone in ipairs(zones) do
        if zone.tokenFaction and zone.color then
            tokenFactionColor[zone.tokenFaction] = zone.color
        end
    end

    local result = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        local tokenFaction = string.match(name, '^(.*) Owner Token$')
        if tokenFaction and tokenFactionColor[tokenFaction] then
            table.insert(result, {
                ownerToken = true,
                object = object,
                color = tokenFactionColor[tokenFaction],
            })
        end
    end
    return result
end

--- Get map from hex to list of {object, color, hex, system, ground, planet} tables.
function getAllUnitsAndOwnerTokens()
    -- Map from hex to system.
    local hexToSystem = {}
    for _, system in ipairs(CrLua.TI4.System.getAllSystems()) do
        local hex = CrLua.TI4.Hex.fromPosition(system.object.getPosition())
        hexToSystem[hex] = assert(not hexToSystem[hex]) and system
    end

    -- Get all relevant things.
    local units = CrLua.TI4.Unit.getAllUnits()
    local ownerTokens = getOwnerTokens()
    local things = CrLua.List.join(units, ownerTokens)

    -- Add hex, system, and ground, planet.
    local hexToThings = {}
    for _, thing in ipairs(things) do
        assert(type(thing.object) == 'userdata' and type(thing.color) == 'string')
        local position = thing.object.getPosition()
        thing.hex = CrLua.TI4.Hex.fromPosition(position)
        thing.system = hexToSystem[thing.hex]

        if thing.ownerToken then
            thing.ground = true
        else
            local attributes = CrLua.TI4.Unit.attributes(thing)
            if attributes[CrLua.TI4.Unit.ATTR.GROUND] or attributes[CrLua.TI4.Unit.ATTR.STRUCTURE] then
                thing.ground = true
            end
        end

        thing.planetName = thing.system and thing.ground and CrLua.TI4.System.planetFromPosition(thing.system, position, true)

        -- Keep all things in space, plus any ground units/owner tokens on planets.
        if thing.system and (not thing.ground or thing.planetName) then
            local entry = hexToThings[thing.hex]
            if not entry then
                entry = {}
                hexToThings[thing.hex] = entry
            end
            table.insert(entry, thing)
        end
    end

    return hexToThings
end

--- Get a map from hex to owner table with {ground, space, planetName[]} owners.
-- If planets are split between different players do not assign ground owner.
-- If any planet is not owned, do not assign ground owner.
function getSystemOwners()
    local hexToThings = getAllUnitsAndOwnerTokens()
    local hexToOwners = {}
    for hex, things in pairs(hexToThings) do
        for _, thing in ipairs(things) do
            local owners = hexToOwners[hex]
            if not owners then
                owners = {
                    system = assert(thing.system),
                    planetName = {}
                }
                hexToOwners[hex] = owners
            end

            assert(thing.color and thing.system)

            -- Wholely owned ground/space.
            if thing.ground then
                if owners.ground == nil then
                    owners.ground = thing.color
                elseif owners.ground ~= thing.color then
                    owners.ground = false
                end
            else
                if owners.space == nil then
                    owners.space = thing.color
                elseif owners.space ~= thing.color then
                    errorHex(hex, TAG .. ': more than one space color in tile ' .. thing.system.tile)
                end
            end

            -- Per-planet.
            if thing.ground then
                if owners.planetName[thing.planetName] and owners.planetName[thing.planetName] ~= thing.color then
                    errorHex(hex, TAG .. ': more than one ground color on ' .. thing.planetName .. ' tile ' .. thing.system.tile)
                end
                owners.planetName[thing.planetName] = thing.color
            end
        end
    end

    -- Remove ground owner if any planet is not owned.
    for hex, owners in pairs(hexToOwners) do
        local system = assert(owners.system)
        for _, planet in ipairs(system.planets or {}) do
            if not owners.planetName[planet.name] then
                owners.ground = false
                break
            end
        end
    end

    return hexToOwners
end

--- Get the hexes fully owned, partially owned, and space owned.
function getOwned(hexToOwners, color)
    local ownFullySet = {}
    local ownPartialSet = {}
    local ownSpaceSet = {}
    for hex, owners in pairs(hexToOwners) do
        if owners.ground == color then
            ownFullySet[hex] = true
        else
            for _, planetOwner in pairs(owners.planetName) do
                if planetOwner == color then
                    ownPartialSet[hex] = true
                    break
                end
            end
        end
        if owners.space == color then
            ownSpaceSet[hex] = true
        end
    end
    return ownFullySet, ownPartialSet, ownSpaceSet
end

-------------------------------------------------------------------------------

function edge(hex1, hex2)
    assert(type(hex1) == 'string' and type(hex2) == 'string')
    return hex1 .. hex2
end

function getControlEdges(hexSet)
    assert(type(hexSet) == 'table')
    local edgeSet = {}
    for hex, _ in pairs(hexSet) do
        for _, neighbor in ipairs(CrLua.TI4.Hex.neighbors(hex)) do
            if not hexSet[neighbor] then
                edgeSet[edge(hex, neighbor)] = true
            end
        end
    end
    return edgeSet
end

--- Get one polygon from a collection of hexes, removing edges as it goes.
-- The set may still have entries when finished meaning there is at least one
-- more disconnected polygon to find.
function getControlPolygon(hexSet, edgeSet)
    assert(type(hexSet) == 'table' and type(edgeSet) == 'table')
    --CrLua.Log.d(TAG, 'getControlPolygon: |edgeSet|=' .. #CrLua.List.fromKeys(edgeSet))

    local polygon = false
    local function addEdge(hex, neighbor)
        local edgePoints = CrLua.TI4.Hex.commonEdge(hex, neighbor)
        if not polygon then
            polygon = { { edgePoints[1].x, edgePoints[1].z } }
        else
            -- Polygon always extends from previous point!
            local a = polygon[#polygon]
            local b = { edgePoints[1].x, edgePoints[1].z }
            assert(math.abs(a[1] - b[1]) < 0.01 and math.abs(a[2] - b[2]) < 0.01)
        end
        table.insert(polygon, { edgePoints[2].x, edgePoints[2].z })
    end

    local function getStartingHexAndNeighborIndex()
        for hex, _ in pairs(hexSet) do
            for i, neighbor in ipairs(CrLua.TI4.Hex.neighbors(hex)) do
                local edgeKey = edge(hex, neighbor)
                if edgeSet[edgeKey] then
                    return hex, i
                end
            end
        end
        error('no starting edge')
    end
    local currentHex, neighborIndex = getStartingHexAndNeighborIndex()

    local path = {}  -- also get path to help with debugging
    local crossedEdgeSet = {}
    while currentHex do
        --CrLua.Log.d(TAG, 'getControlPolygon: ' .. currentHex)
        table.insert(path, currentHex)
        local neighbors = CrLua.TI4.Hex.neighbors(currentHex)
        for i = 1, 6 do
            local neighbor = neighbors[neighborIndex]
            local currentEdge = edge(currentHex, neighbor)

            if edgeSet[currentEdge] then

                -- Add this edge.
                assert(not hexSet[neighbor])
                edgeSet[currentEdge] = nil
                addEdge(currentHex, neighbor)
                neighborIndex = neighborIndex == 6 and 1 or neighborIndex + 1

            elseif crossedEdgeSet[currentEdge] then

                -- Already explored there, keep going.
                neighborIndex = neighborIndex == 6 and 1 or neighborIndex + 1

            elseif hexSet[neighbor] then

                -- We contol this neighbor, move there and start over.
                --CrLua.Log.d(TAG, 'getControlPolygon: ' .. currentHex .. ' -> ' .. neighbor)
                crossedEdgeSet[currentEdge] = true
                assert(not edgeSet[currentEdge])

                local reverseIndex = (((neighborIndex - 1) + 3) % 6) + 1

                currentHex = neighbor
                neighborIndex = reverseIndex
                neighborIndex = neighborIndex == 6 and 1 or neighborIndex + 1
                break  -- start over!

            elseif i == 6 then

                -- If we got to the end, no new edges or neighbors to explore!
                currentHex = false

            end
        end
    end

    -- The last point should always be the same as the first.  Remove last.
    local a = polygon[1]
    local b = polygon[#polygon]
    assert(math.abs(a[1] - b[1]) < 0.01 and math.abs(a[2] - b[2]) < 0.01)
    table.remove(polygon)

    --CrLua.Log.d(TAG, 'getControlPolygon: |polygon|=' .. #polygon)
    if #polygon > 2 then
        return polygon, path
    end
end

function getControlPolygons(hexSet)
    local function isEmptySet(set)
        for _, _ in pairs(set) do
            return false
        end
        return true
    end

    local edgeSet = getControlEdges(hexSet)

    local polygons = {}
    local paths = {}
    while not isEmptySet(edgeSet) do
        local polygon, path = getControlPolygon(hexSet, edgeSet)
        if polygon then
            table.insert(polygons, polygon)
        end
        if path then
            table.insert(paths, path)
        end
    end
    return polygons, paths
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/TI4/Hex>
#include <~/CrLua/TI4/System>
#include <~/CrLua/TI4/Unit>
#include <~/CrLua/TI4/Zone>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Polygon>
#include <~/CrLua/RedBlobHex>
#include <~/CrLua/Table>
#include <~/CrLua/Util>

CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)
--#include <~/CrLua/UnitTest>
--CrLua.UnitTest.runTests(TAG, CrLua, true)

CrLua.assertRequired({ 'TI4.Hex', 'TI4.System', 'TI4.Unit', 'List', 'Log' })
CrLua.lock()
