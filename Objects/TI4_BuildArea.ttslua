--- Show the produce and consume costs for contained objects.
-- @author Darrell

local TAG = 'BuildArea'

local BASE_PRODUCTION = 2

local OBJECT_EFFECTS = {
    -- Tokens
    ['Commodities/Tradegoods x1'] = {
        tradegoods = true,
        resources = 1,
    },
    ['Commodities/Tradegoods x3'] = {
        tradegoods = true,
        resources = 3,
    },

    -- Technologies
    ['Sarween Tools'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        sarween = true,
    },
    ['Prototype War Sun II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        unitAttributesOverrides = {
            ['War Sun'] = { cost = 10 },
        },
    },
    ['Mirror Computing'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        objectEffectsOverrides = {
            ['Commodities/Tradegoods x1'] = {
                resources = 2,
            },
            ['Commodities/Tradegoods x3'] = {
                resources = 6,
            },
        },
    },
    ['Hegemonic Trade Policy'] = {
        requireFaceUp = true,
        hegemonic = true,
    },
    ['Space Dock II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        baseProduction = 4,
    },
    ['Floating Factory II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        baseProduction = 4,
    },

    -- Agendas
    ['Regulated Conscription'] = {
        anywhereOnTable = true,
        requireFaceUp = true,
        unitAttributesOverrides = {
            ['Fighter'] = { cost = 1 },
            ['Infantry'] = { cost = 1 },
        },
    },
}

local _config = {
    defaultWidth = 8.37,
    defaultHeight = 5,
    minWidth = 8.37,
    minHeight = 5,
    thickness = 0.3,
}

local _data = {
    playerColor = 'Grey',
    width = _config.defaultWidth,
    height = _config.defaultHeight,

    boundingBox = false,
    lowerNameToResources = false,

    inside = {},

    dragOffset = {
        x = 0,
        z = 0
    }
}

-------------------------------------------------------------------------------

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

-------------------------------------------------------------------------------

function onLoad(saveState)
    CrLua.Log.d(TAG, 'onLoad')
    local saveState = saveState and JSON.decode(saveState)
    _data.width = saveState and saveState.width or _data.width
    _data.height = saveState and saveState.height or _data.height
    _data.width = math.max(_data.width, _config.minWidth)
    _data.height = math.max(_data.height, _config.minHeight)
    _data.playerColor = saveState and saveState.playerColor or _data.playerColor
    Wait.frames(updateEverything, 2)
end

function onSave()
    return JSON.encode({
        width = _data.width,
        height = _data.height,
        playerColor = _data.playerColor,
    })
end

function onObjectDrop(playerColor, droppedObject)
    assert(type(playerColor) == 'string' and type(droppedObject) == 'userdata')
    if droppedObject == self then
        CrLua.Log.d(TAG, 'onObjectDrop: self')
        updateEverything()
    elseif isInsideBuildArea(droppedObject) then
        _data.inside[droppedObject] = true
        updateProduceConsumeValues()
    end
end

function onObjectPickUp(playerColor, pickedUpObject)
    assert(type(playerColor) == 'string' and type(pickedUpObject) == 'userdata')
    if pickedUpObject == self then
        CrLua.Log.d(TAG, 'onObjectPickUp: self')
    elseif _data.inside[pickedUpObject] then
        _data.inside[pickedUpObject] = nil
        updateProduceConsumeValues()
    end
end

function onPlayerChangeColor(playerColor)
    CrLua.Log.d(TAG, 'onPlayerChangeColor')
    Wait.frames(updateEverything, 2)
end

function onObjectDestroy(dyingObject)
    if _data.inside[dyingObject] then
        _data.inside[dyingObject] = nil
        updateEverything()
    end
end

-------------------------------------------------------------------------------

function onButtonClick(player, option, id)
    announce(_data.items, _data.resourcesAndCost)
    commit()
end

function onBeginDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.dragOffset = {
        x = _data.width - pp.x,
        z = _data.height - pp.z
    }
end

function onEndDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.width = pp.x + _data.dragOffset.x
    _data.height = pp.z + _data.dragOffset.z
    _data.width = math.max(_data.width, _config.minWidth)
    _data.height = math.max(_data.height, _config.minHeight)
    updateEverything()
end

function onDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.width = pp.x + _data.dragOffset.x
    _data.height = pp.z + _data.dragOffset.z
    _data.width = math.max(_data.width, _config.minWidth)
    _data.height = math.max(_data.height, _config.minHeight)
    updateBoundingBox()
end

-------------------------------------------------------------------------------

function updateEverything()
    updatePlayerColor()
    updateBoundingBox()
    updateInsideBuildArea()
    updateProduceConsumeValues()
end

function updatePlayerColor()
    _data.playerColor = getPlayerColor() or 'Grey'
    self.setColorTint(_data.playerColor)
end

function updateBoundingBox()
    _data.boundingBox = getLocalBoundingBox()
    drawBoundingBox()
end

function updateInsideBuildArea()
    _data.inside = {}
    for _, object in ipairs(getAllObjects()) do
        if isInsideBuildArea(object) then
            _data.inside[object] = true
        end
    end
end

function updateProduceConsumeValues()
    _data.items = getProduceConsumeItems()
    _data.resourcesAndCost = getProduceConsumeResourcesAndCost(_data.items)
    drawUi(_data.items, _data.resourcesAndCost)
end

-------------------------------------------------------------------------------

function getLocalBoundingBox()
    local bounds = self.getBoundsNormalized()
    local min = {
        x = -bounds.size.x / 2.0,
        y = -bounds.size.y / 2.0,
        z = -bounds.size.z / 2.0
    }
    local max = {
        x = min.x + _data.width,
        y = bounds.size.y / 2.0,
        z = min.z + _data.height
    }
    return {
        min = min,
        max = max
    }
end

function isInsideBuildArea(object)
    assert(type(object) == 'userdata')
    local p = self.positionToLocal(object.getPosition())
    local bb = _data.boundingBox
    return bb.min.x <= p.x and p.x <= bb.max.x and bb.min.z <= p.z and p.z <= bb.max.z
end

function getResourcesAndInfluence(objectName)
    assert(type(objectName) == 'string')
    if not _data.lowerNameToResources then
        _data.lowerNameToResources = {}
        for lowerName, planet in pairs(_systemHelper.planets()) do
            _data.lowerNameToResources[lowerName] = {
                resources = planet.resources or 0,
                influence = planet.influence or 0
            }
        end
        for lowerName, other in pairs(_systemHelper.nonPlanetResourceInfluenceCards()) do
            _data.lowerNameToResources[lowerName] = {
                resources = other.resources or 0,
                influence = other.influence or 0
            }
        end
    end
    return _data.lowerNameToResources[string.lower(objectName)]
end

function getPlayerColor()
    local zoneColor = _zoneHelper.zoneFromPosition(self.getPosition())
    CrLua.Log.d(TAG, 'getPlayerColor: ' ..(zoneColor or 'nil'))
    return zoneColor
end

function getProduceConsumeItems()
    CrLua.Log.d(TAG, 'getProduceConsumeItems')
    local playerColor = _data.playerColor

    -- Get objects to consider.
    local objects = CrLua.Table.join(_data.inside, {})
    local function useOutsizeBuildAreaObject(object)
        local objectEffects = OBJECT_EFFECTS[object.getName()]
        if not objectEffects then
            return false
        end
        if objectEffects.requireFaceUp and object.is_face_down then
            return false
        end
        if objectEffects.anywhereInPlayerZone then
            return playerColor and _zoneHelper.zoneFromPosition(object.getPosition()) == playerColor
        end
        return objectEffects.anywhereOnTable
    end
    for _, object in ipairs(getAllObjects()) do
        if useOutsizeBuildAreaObject(object) then
            objects[object] = true
        end
    end

    local result = {
        consumeObjectNameToCount = {},
        produceUnitNameToUnitWithCount = {},
        objectEffectsOverrides = {},
        unitAttributesOverrides = {},
        production = BASE_PRODUCTION,
        sarween = false,
        hegemonic = false,
    }
    local function addUnit(unit)
        if result.produceUnitNameToUnitWithCount[unit.unitName] then
            unit.count = unit.count + result.produceUnitNameToUnitWithCount[unit.unitName].count
        end
        result.produceUnitNameToUnitWithCount[unit.unitName] = unit
    end
    local function addItem(name)
        local resourcesAndInfluence = getResourcesAndInfluence(name)
        if resourcesAndInfluence then
            result.consumeObjectNameToCount[name] = (result.consumeObjectNameToCount[name] or 0) + 1
        end
        local objectEffects = OBJECT_EFFECTS[name]
        if objectEffects then
            if objectEffects.resources then
                result.consumeObjectNameToCount[name] = (result.consumeObjectNameToCount[name] or 0) + 1
            end
            if objectEffects.objectEffectsOverrides then
                result.objectEffectsOverrides = CrLua.Table.join(result.objectEffectsOverrides, objectEffects.objectEffectsOverrides)
            end
            if objectEffects.unitAttributesOverrides then
                result.unitAttributesOverrides = CrLua.Table.join(result.unitAttributesOverrides, objectEffects.unitAttributesOverrides)
            end
            result.sarween = result.sarween or objectEffects.sarween
            result.hegemonic = result.hegemonic or objectEffects.hegemonic
            result.production = math.max(result.production, objectEffects.baseProduction or 0)
        end
    end

    for object, _ in pairs(objects) do
        local name = object.getName()
        local unit = CrLua.TI4.Unit.fromObject(object)
        if unit then
            addUnit(unit)
        elseif object.tag == 'Deck' then
            for _, entry in ipairs(object.getObjects()) do
                addItem(entry.name)
            end
        else
            addItem(name)
        end
    end

    CrLua.Log.d(TAG, 'getProduceConsumeItems', result)
    return result
end

function getProduceConsumeResourcesAndCost(produceConsumeItems)
    assert(type(produceConsumeItems) == 'table')
    CrLua.Log.d(TAG, 'getProduceConsumeResourcesAndCost')

    local result = {
        resources = 0,
        cost = 0,
        numUnits = 0,
    }

    for objectName, count in pairs(produceConsumeItems.consumeObjectNameToCount) do
        local objectEffects = OBJECT_EFFECTS[objectName]
        local objectEffectsOverrides = produceConsumeItems.objectEffectsOverrides[objectName]
        objectEffects = CrLua.Table.join(objectEffects or {}, objectEffectsOverrides or {})
        if objectEffects.resources then
            result.resources = result.resources + objectEffects.resources * count
        end

        local resourcesAndInfluence = getResourcesAndInfluence(objectName)
        if resourcesAndInfluence and resourcesAndInfluence.resources then
            result.resources = result.resources + resourcesAndInfluence.resources * count
        end
    end

    for unitName, unit in pairs(produceConsumeItems.produceUnitNameToUnitWithCount) do
        local unitAttributes = CrLua.TI4.Unit.attributes(unit)
        local unitAttributesOverrides = produceConsumeItems.unitAttributesOverrides[unitName]
        unitAttributes = CrLua.Table.join(unitAttributes, unitAttributesOverrides or {})
        result.cost = result.cost + math.ceil(unit.count * (unitAttributes.cost or 0))
        result.numUnits = result.numUnits + unit.count
    end

    -- If Hegemonic Trade Policy (swap resouce/influence values), replace
    -- hegemonic with the chosen planet.
    if produceConsumeItems.hegemonic then
        local best = false
        for objectName, _ in pairs(produceConsumeItems.consumeObjectNameToCount) do
            local resourcesAndInfluence = getResourcesAndInfluence(objectName)
            local useThis = true
            useThis = useThis and resourcesAndInfluence
            useThis = useThis and resourcesAndInfluence.influence > resourcesAndInfluence.resources
            useThis = useThis and (not best or resourcesAndInfluence.influence > best.influence)
            if useThis then
                best = resourcesAndInfluence
            end
        end
        if best then
            CrLua.Log.d(TAG, 'hegemonic')
            result.resources = result.resources - best.resources
            result.resources = result.resources + best.influence
        end
    end

    CrLua.Log.d(TAG, 'getProduceConsumeResourcesAndCost', result)
    return result
end

-------------------------------------------------------------------------------

function drawBoundingBox()
    local bb = _data.boundingBox
    local d = _config.thickness / 2.0
    local y = bb.max.y - 0.01
    self.setVectorLines({{
        points = {
            { x = bb.min.x + d, y = y, z = bb.min.z + d },
            { x = bb.min.x + d, y = y, z = bb.max.z - d },
            { x = bb.max.x - d, y = y, z = bb.max.z - d },
            { x = bb.max.x - d, y = y, z = bb.min.z + d },
        },
        color = _data.playerColor,
        rotation = { x = 0, y = 0, z = 0 },
        thickness = _config.thickness,
        loop = true,
        square = true,
    }})
end

function drawUi(items, resourcesAndCost)
    assert(type(items) == 'table' and type(resourcesAndCost) == 'table')
    CrLua.Log.d(TAG, 'drawUi')
    assert(type(_data.playerColor) == 'string')
    local colorTable = Color.fromString(_data.playerColor)
    local hexColor = '#' .. Color.toHex(colorTable)

    local function trimFloat(value)
        return math.floor(value * 1000.0) / 1000.0
    end

    -- Text panel size.
    local bounds = self.getBoundsNormalized()
    local panelWidth = bounds.size.x - _config.thickness
    local panelHeight = bounds.size.z - _config.thickness

    -- Draggable corner.
    local cornerWidth = 0.75
    local cornerHeight = cornerWidth
    local cornerX = _data.width - (bounds.size.x / 2.0) - (cornerWidth / 2.0)
    local cornerY = _data.height - (bounds.size.z / 2.0) - (cornerHeight / 2.0)

    -- UI uses x100 units.
    panelWidth = panelWidth * 100
    panelHeight = panelHeight * 100
    cornerWidth = cornerWidth * 100
    cornerHeight = cornerHeight * 100
    cornerX = cornerX * 100
    cornerY = cornerY * 100
    local panelPosition = '0 0 ' .. trimFloat(bounds.size.y * 50.0 + 2)
    local cornerPosition = trimFloat(cornerX) .. ' ' .. trimFloat(cornerY) .. ' ' .. trimFloat(-bounds.size.y * 50.0 + 1)

    local r1c1 = 'Build Cost: ' .. (resourcesAndCost and resourcesAndCost.cost or '-')
    local r2c1 = 'Resources: ' .. (resourcesAndCost and (resourcesAndCost.resources .. (items.sarween and '+ST' or '')) or '-')
    local r1c2 = '# Units: ' .. (resourcesAndCost and resourcesAndCost.numUnits or '-')
    local r2c2 = 'Production: R+' .. (items and items.production or '-')

    local w = panelWidth - 30
    local w1 = w * 0.45
    local w2 = w - (2 * w1)
    local fontSize = 40

    local columnWidths = trimFloat(w1) .. ' ' .. trimFloat(w1) .. ' ' .. trimFloat(w2)

    self.UI.setXmlTable({
        {
            tag = 'Defaults',
            children = {
                {
                    tag = 'Text',
                    attributes = {
                        color = '#ffffff',
                        fontSize = fontSize,
                        fontStyle = 'Bold',
                        alignment = 'MiddleCenter',
                        horizontalOverflow = 'Overflow',
                        verticalOverflow = 'Overflow',
                    }
                },
                {
                    tag = 'Button',
                    attributes = {
                        fontSize = fontSize,
                        fontStyle = 'Bold',
                        onClick = 'onButtonClick',
                    }
                },
            }
        },
        {
            tag = 'Panel',
            attributes = {
                position = panelPosition,
                rotation = '180 0 0',
                width = panelWidth,
                height = panelHeight,
                color = '#222222ff'
            },
            children = {
                {
                    tag = 'TableLayout',
                    attributes = {
                        cellBackgroundColor = 'Clear',
                        padding = '15 15 15 15',
                        columnWidths = columnWidths,
                    },
                    children = {
                        {
                            tag = 'Row',
                            children = {
                                { tag = 'Cell', children = {{
                                    tag = 'Text',
                                    value = r1c1
                                }}},
                                { tag = 'Cell', children = {{
                                    tag = 'Text',
                                    value = r1c2
                                }}},
                                { tag = 'Cell', children = {{
                                    tag = 'Button',
                                    attributes = {
                                        id = 'done',
                                        height = panelHeight,
                                    },
                                    value = '\u{25BA}'
                                }}},
                            }
                        },
                        {
                            tag = 'Row',
                            children = {
                                { tag = 'Cell', children = {{
                                    tag = 'Text',
                                    value = r2c1
                                }}},
                                { tag = 'Cell', children = {{
                                    tag = 'Text',
                                    value = r2c2
                                }}},
                            }
                        }
                    }
                }
            }
        },
        {
            tag = 'Panel',
            attributes = {
                id = 'corner',
                allowDragging = true,
                restrictDraggingToParentBounds = false,
                returnToOriginalPositionWhenReleased = false,
                onDrag = 'onDrag',
                onBeginDrag = 'onBeginDrag',
                onEndDrag = 'onEndDrag',
                position = cornerPosition,
                rotation = '180 0 0',
                width = cornerWidth,
                height = cornerHeight,
                color = hexColor
            },
        }
    })
end

-------------------------------------------------------------------------------

function announce(items, resourcesAndCost)
    assert(type(items) == 'table' and type(resourcesAndCost) == 'table')
    CrLua.Log.d(TAG, 'announce')
    local produce = {}
    for unitName, unit in pairs(items.produceUnitNameToUnitWithCount) do
        if unit.count > 1 then
            if unitName ~= 'Infantry' then
                unitName = unitName .. 's'
            end
        end
        table.insert(produce, unit.count .. ' ' .. unitName)
    end

    local tradegoods = 0
    local consume = {}
    for objectName, count in pairs(items.consumeObjectNameToCount) do
        local objectEffects = OBJECT_EFFECTS[objectName]
        local objectEffectsOverrides = items.objectEffectsOverrides[objectName]
        objectEffects = CrLua.Table.join(objectEffects or {}, objectEffectsOverrides or {})
        if objectEffects.tradegoods then
            tradegoods = tradegoods + (objectEffects.resources * count)
        else
            table.insert(consume, objectName)
        end
    end
    if tradegoods > 0 then
        table.insert(consume, tradegoods .. ' tradegood' .. (tradegoods > 1 and 's' or ''))
    end

    local message = table.concat({
        _data.playerColor,
        ' producing ' .. resourcesAndCost.numUnits .. ' units',
        ' { ' .. table.concat(produce, ', ') .. ' }',
        ' with production R+' .. items.production,
        ' and total cost ' .. resourcesAndCost.cost,
        ',',
        ' consuming ' .. resourcesAndCost.resources,
        items.sarween and '+ST' or '',
        ' resources',
        ' { ' .. table.concat(consume, ', ') .. ' }',
        '.',
    }, '')
    printToAll(message, _data.playerColor)
end

function commit()
    CrLua.Log.d(TAG, 'commit')
    for object, _ in pairs(_data.inside) do
        if object.tag == 'Card' and not object.is_face_down then
            object.flip()
        end
    end
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Table>
#include <~/CrLua/Util>

#include <~/CrLua/TI4/Faction>
#include <~/CrLua/TI4/Unit>

--CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)
--#include <~/CrLua/UnitTest>
--CrLua.UnitTest.runTests('CrLua.TI4.System', CrLua.TI4.System, true)

CrLua.assertRequired({ 'Log', 'TI4.Unit' })
CrLua.lock()
