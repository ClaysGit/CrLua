--- Show the produce and consume costs for contained objects.
-- @author Darrell

local TAG = 'BuildArea'

local BASE_PRODUCTION = 2

local OBJECT_EFFECTS = {
    -- Tokens
    ['Commodities/Tradegoods x1'] = {
        resources = 1
    },
    ['Commodities/Tradegoods x3'] = {
        resources = 3
    },

    -- Technologies
    ['Sarween Tools'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        sarween = true,
    },
    ['Prototype War Sun II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        unitAttributeOverrides = {
            ['War Sun'] = { cost = 10 }
        }
    },
    ['Mirror Computing'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        objectEffectsOverrides = {
            ['Commodities/Tradegoods x1'] = {
                resources = 2
            },
            ['Commodities/Tradegoods x3'] = {
                resources = 6
            },
        }
    },
    ['Hegemonic Trade Policy'] = {
        requireFaceUp = true,
        hegemonic = true,
    },
    ['Space Dock II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        baseProduction = 4,
    },
    ['Floating Factory II'] = {
        anywhereInPlayerZone = true,
        requireFaceUp = true,
        baseProduction = 4,
    },

    -- Agendas
    ['Regulated Conscription'] = {
        anywhereOnTable = true,
        requireFaceUp = true,
        unitAttributeOverrides = {
            ['Fighter'] = { cost = 1 },
            ['Infantry'] = { cost = 1 },
        },
    },
    ['Core Mining'] = {
        requireFaceUp = true,
        resources = 2,
    },
    ['Terraforming Initiative'] = {
        requireFaceUp = true,
        resources = 1,
    },
}

local _config = {
    defaultWidth = 8.37,
    defaultHeight = 5,
    minWidth = 8.37,
    minHeight = 5,
    thickness = 0.3,
}

local _data = {
    width = _config.defaultWidth,
    height = _config.defaultHeight,
    playerColor = 'Grey',
    inside = {},
    planets = false,
    dragOffset = {
        x = 0,
        z = 0
    }
}

-------------------------------------------------------------------------------

function onLoad(saveState)
    CrLua.Log.d(TAG, 'onLoad')
    local saveState = saveState and JSON.decode(saveState)
    _data.width = saveState and saveState.width or _data.width
    _data.height = saveState and saveState.height or _data.height
    _data.width = math.max(_data.width, _config.minWidth)
    _data.height = math.max(_data.height, _config.minHeight)
    _data.playerColor = saveState and saveState.playerColor or _data.playerColor
    Wait.frames(updateEverything, 2)
end

function onSave()
    return JSON.encode({
        width = _data.width,
        height = _data.height,
        playerColor = _data.playerColor,
    })
end

function onObjectDrop(playerColor, droppedObject)
    assert(type(playerColor) == 'string' and type(droppedObject) == 'userdata')
    if droppedObject == self then
        CrLua.Log.d(TAG, 'onObjectDrop: self')
        updateEverything()
    elseif isInsideBuildArea(droppedObject) then
        _data.inside[droppedObject] = true
        updateProduceConsumeValues()
    end
end

function onObjectPickUp(playerColor, pickedUpObject)
    assert(type(playerColor) == 'string' and type(pickedUpObject) == 'userdata')
    if pickedUpObject == self then
        CrLua.Log.d(TAG, 'onObjectPickUp: self')
    elseif _data.inside[pickedUpObject] then
        _data.inside[pickedUpObject] = nil
        updateProduceConsumeValues()
    end
end

function onPlayerChangeColor(playerColor)
    CrLua.Log.d(TAG, 'onPlayerChangeColor')
    Wait.frames(updateEverything, 2)
end

-------------------------------------------------------------------------------

function updateEverything()
    _data.playerColor = getPlayerColor() or 'Grey'
    self.setColorTint(_data.playerColor)
    drawSize()
    updateInsideBuildArea()
    updateProduceConsumeValues()
end

function updateInsideBuildArea()
    _data.inside = {}
    for _, object in ipairs(getAllObjects()) do
        if isInsideBuildArea(object) then
            _data.inside[object] = true
        end
    end
end

function updateProduceConsumeValues()
    local values = getProduceConsumeValues()
    drawUi(values)
end

-------------------------------------------------------------------------------

function isInsideBuildArea(object)
    assert(type(object) == 'userdata')
    local p = self.positionToLocal(object.getPosition())
    return p.x >= 0 and p.x <= _data.width and p.z >= 0 and p.z <= _data.height
end

function getPlanet(object)
    assert(type(object) == 'userdata')
    _data.planets = _data.planets or CrLua.TI4.System.getAllPlanets()
    return _data.planets[object.getName()]
end

function getPlayerColor()
    local position = self.getPosition()
    local zone = CrLua.TI4.Zone.insideWhich(position)
    local result = zone and zone.color
    CrLua.Log.d(TAG, 'getPlayerColor: ' ..(result or 'nil'))
    return result
end

function getProduceConsumeValues()
    local playerColor = _data.playerColor

    CrLua.TI4.Zone.update()
    local zone = CrLua.TI4.Zone.fromColor(playerColor)

    -- Get objects to consider.
    local function useObject(object)
        local objectEffects = OBJECT_EFFECTS[object.getName()]
        if not objectEffects then
            return false
        end
        if objectEffects.requireFaceUp and object.is_face_down then
            return false
        end
        if objectEffects.anywhereInPlayerZone and zone then
            return CrLua.TI4.Zone.inside(zone, object.getPosition())
        end
        return objectEffects.anywhereOnTable
    end
    local objects = CrLua.Table.join(_data.inside, {})
    for _, object in ipairs(getAllObjects()) do
        if useObject(object) then
            objects[object] = true
        end
    end

    -- First pass gathers override and counts units (so one fighter, one infantry cost 2, not 1).
    local unitNameToCount = {}
    local unitAttributeOverrides = {}
    local objectEffectsOverrides = {}
    for object, _ in pairs(objects) do
        local unit = CrLua.TI4.Unit.fromObject(object)
        if unit then
            unitNameToCount[unit.unitName] = (unitNameToCount[unit.unitName] or 0) + unit.count
        end
        local objectEffects = OBJECT_EFFECTS[object.getName()]
        if objectEffects then
            if objectEffects.unitAttributeOverrides then
                unitAttributeOverrides = CrLua.Table.join(unitAttributeOverrides, objectEffects.unitAttributeOverrides)
            end
            if objectEffects.objectEffectsOverrides then
                objectEffectsOverrides = CrLua.Table.join(objectEffectsOverrides, objectEffects.objectEffectsOverrides)
            end
        end
    end

    -- Apply object effect overrides to each entry.  This way overrides can
    -- replace a single field in an entry while preserving others.
    local overriddenObjectEvents = {}
    for k, v in pairs(OBJECT_EFFECTS) do
        overriddenObjectEvents[k] = CrLua.Table.join(v, objectEffectsOverrides[k] or {})
    end

    -- Get other costs/resources.
    local result = {
        resources = 0,
        cost = 0,
        unitCount = 0,
        production = BASE_PRODUCTION,
        sarween = false,
        hegemonic = false,
    }
    for object, _ in pairs(objects) do
        local objectEffects = overriddenObjectEvents[object.getName()]

        -- Add unit type only the first time we see it, with the total count.
        local unit = CrLua.TI4.Unit.fromObject(object)
        local count = unit and unitNameToCount[unit.unitName]
        if unit and count then
            local unitAttributes = CrLua.TI4.Unit.attributes(unit)
            local override = unitAttributeOverrides[unit.unitName]
            if override then
                unitAttributes = CrLua.Table.join(unitAttributes, override)
            end
            result.cost = math.ceil(result.cost + unitAttributes.cost * count)
            result.unitCount = result.unitCount + count
            unitNameToCount[unit.unitName] = nil
        end

        -- Planet resources.
        local planet = getPlanet(object)
        if planet then
            result.resources = result.resources + assert(planet.resources)
        end

        -- Any object effects?
        if objectEffects then
            result.sarween = result.sarween or objectEffects.sarween
            result.hegemonic = result.hegemonic or objectEffects.hegemonic
            result.production = math.max(result.production, objectEffects.baseProduction or 0)
            result.resources = result.resources + (objectEffects.resources or 0)
            result.cost = result.cost + (objectEffects.cost or 0)
        end
    end

    -- If Hegemonic Trade Policy (swap resouce/influence values), replace
    -- hegemonic with the chosen planet.
    if result.hegemonic then
        for object, _ in pairs(objects) do
            local planet = getPlanet(object)
            if planet and (not result.hegemonic or result.hegemonic.influence < planet.influence) then
                result.hegemonic = planet
            end
        end
        if result.hegemonic then
            result.resources = result.resources - result.hegemonic
            result.resources = result.resources + result.hegemonic
        end
    end

    CrLua.Log.d(TAG, 'getProduceConsumeValues', result)
    return result
end

-------------------------------------------------------------------------------

function drawSize()
    local bounds = self.getBoundsNormalized()
    local dx = (bounds.size.x / 2.0) - (_config.thickness / 2.0)
    local dz = (bounds.size.z / 2.0) - (_config.thickness / 2.0)
    local y = (bounds.size.y / 2) - 0.01
    local points = {
        { x = -dx, y = y, z = -dz },
        { x = -dx + _data.width, y = y, z = -dz },
        { x = -dx + _data.width, y = y, z = -dz + _data.height },
        { x = -dx, y = y, z = -dz + _data.height },
    }

    self.setVectorLines({{
        points = points,
        color = _data.playerColor,
        rotation = { x = 0, y = 0, z = 0 },
        thickness = _config.thickness,
        loop = true,
        square = true,
    }})
end

function drawUi(values)
    assert(type(_data.playerColor) == 'string')
    local colorTable = Color.fromString(_data.playerColor)
    local hexColor = '#' .. Color.toHex(colorTable)

    local function trimFloat(value)
        return math.floor(value * 1000.0) / 1000.0
    end

    -- Text panel size.
    local bounds = self.getBoundsNormalized()
    local panelWidth = bounds.size.x
    local panelHeight = bounds.size.z

    -- Draggable corner.
    local cornerWidth = 1
    local cornerHeight = 1
    local cornerX = _data.width - panelWidth / 2.0
    local cornerY = _data.height - panelHeight / 2.0

    -- UI uses x100 units.
    panelWidth = panelWidth * 100
    panelHeight = panelHeight * 100
    cornerWidth = cornerWidth * 100
    cornerHeight = cornerHeight * 100
    cornerX = cornerX * 100
    cornerY = cornerY * 100
    local panelPosition = '0 0 ' .. trimFloat(bounds.size.y * 50.0 + 1)
    local cornerPosition = trimFloat(cornerX) .. ' ' .. trimFloat(cornerY) .. ' ' .. trimFloat(-bounds.size.y * 50.0 + 1)

    self.UI.setXmlTable({
        {
            tag = 'Defaults',
            children = {
                {
                    tag = 'Text',
                    attributes = {
                        fontSize = 52,
                        fontStyle = 'Bold',
                        color = '#ffffffff',
                        horizontalOverflow = 'Overflow',
                        verticalOverflow = 'Overflow',
                    }
                },
            }
        },
        {
            tag = 'Panel',
            attributes = {
                position = panelPosition,
                rotation = '180 0 0',
                width = panelWidth,
                height = panelHeight,
                color = '#333333ff'
            },
            children = {
                {
                    tag = 'Text',
                    value = 'THIS IS TEXT'
                },
            }
        },
        {
            tag = 'Panel',
            attributes = {
                id = 'corner',
                allowDragging = true,
                restrictDraggingToParentBounds = false,
                returnToOriginalPositionWhenReleased = false,
                onDrag = 'onDrag',
                onBeginDrag = 'onBeginDrag',
                onEndDrag = 'onEndDrag',
                position = cornerPosition,
                rotation = '180 0 0',
                width = cornerWidth,
                height = cornerHeight,
                color = hexColor
            },
        }
    })
end

function onBeginDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.dragOffset = {
        x = _data.width - pp.x,
        z = _data.height - pp.z
    }
end

function onEndDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.width = pp.x + _data.dragOffset.x
    _data.height = pp.z + _data.dragOffset.z
    _data.width = math.max(_data.width, _config.minWidth - _config.thickness)
    _data.height = math.max(_data.height, _config.minHeight - _config.thickness)
    updateEverything()
end

function onDrag(player, option, id)
    local pp = self.positionToLocal(player.getPointerPosition())
    _data.width = pp.x + _data.dragOffset.x
    _data.height = pp.z + _data.dragOffset.z
    _data.width = math.max(_data.width, _config.minWidth - _config.thickness)
    _data.height = math.max(_data.height, _config.minHeight - _config.thickness)
    drawSize()
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Polygon>
#include <~/CrLua/Table>
#include <~/CrLua/Util>

#include <~/CrLua/TI4/Faction>
#include <~/CrLua/TI4/System>
#include <~/CrLua/TI4/Unit>
#include <~/CrLua/TI4/Zone>

CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)

CrLua.assertRequired({ 'Log', 'TI4.System', 'TI4.Unit', 'TI4.Zone' })
CrLua.lock()
