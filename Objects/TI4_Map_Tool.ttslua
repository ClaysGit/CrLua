-- TI4 Map Building Tool by Cruix

-- Maps are stored in a string by their tile numbers,
-- starting directly above Mecatol Rex and moving in
-- a clockwise spiral

-- Tiles are retrieved by their GUIDs, so any tiles that
-- are deleted and replaced with a new GUID will need to
-- have their information updated in createTiles() below

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

cur_input = ""
slice_datalabel_name = "slice_data_label"
do_lock = true
tile_diameter = 6.08
tile_radius = 3
tile_limit = 60
planet_deck_loc = {x = 56, y = 2, z = 8.75}
planet_deck_rot = {x = 0, y = 270, z = 180}
mecatol_guid = "04df02"
mecatol_name = "Mecatol Rex"
custodians_guid = "70642f"
waiting_id = 0
second_pass_delay = 1
deck_last_cards = {}
blanktile = {guid = "", key = "0"}
redbag_guid = "14a45f"
bluebag_guid = "69311f"
bag_guids = {
    redbag_guid,
    bluebag_guid,
    "dc3ab8",
    "a28c98",
    "4e62ee",
    "64e0ad",
    "236a35",
    "e32608",
    "10dc17",
    "5530cc",
    "888d81",
    "b65c3f",
    "be60fc",
    "a5f431",
    "db203a",
    "1f9f1a",
    "5b55e3",
    "037d7e",
    "bd8c3b",
    "cb9a22",  -- TI3 systems
}

tiles_by_key = {}
tiles_by_guid = {}
planets = { mecatol_name }

slicetext_6p = {{0, 1}, {0.87, 0.5}, {0.87, -0.5}, {0, -0.92}, {-0.87, -0.5}, {-0.87, 0.5}}
slicetext_5p = {{-0.3, 0.84}, {0.87, 0.5}, {0.87, -0.5}, {0, -0.92}, {-0.9, -0.15}}
slicetext_4p = {{-0.3, 0.84}, {0.9, 0.15}, {0.3, -0.8}, {-0.9, -0.15}}
slicetext_3p = {{0.87, 0.5}, {0, -0.92}, {-0.87, 0.5}}

ownership_6p = {1, 2, 3, 4, 5, 6, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 1}
ownership_5p = {1, 2, 3, 4, 5, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 5, 0, 1, 1, 0, 2, 2, 2, 3, 3, 3, 4, 4, 4, 0, 5, 5, 5, 0, 1, 1}
ownership_4p = {1, 2, 0, 3, 4, 0, 1, 0, 2, 2, 0, 3, 3, 0, 4, 4, 0, 1, 1, 1, 2, 2, 2, 2, 0, 3, 3, 3, 3, 4, 4, 4, 4, 0, 1, 1}
ownership_3p = {0, 1, 0, 2, 0, 3, 0, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0}

function onLoad()
    createInputs()
    createTiles()
end

function createTiles()
    addtile(blanktile)

    for _, system in pairs(_systemHelper.systems()) do

        local entry = {
            guid = system.guid,
            key = tostring(system.tile),
            home = system.home or nil,
            planets = nil,
            resources = nil,
            influence = nil,
            skips = nil,
        }

        if system.planets and #system.planets > 0 then
            entry.planets = {}
            for _, planet in ipairs(system.planets or {}) do
                table.insert(entry.planets, planet.name)
                if planet.resources and planet.resources > 0 then
                    entry.resources = (entry.resources or 0) + planet.resources
                end
                if planet.influence and planet.influence > 0 then
                    entry.influence = (entry.influence or 0) + planet.influence
                end
                if planet.tech then
                    local skip = string.upper(string.sub(planet.tech, 1, 1))
                    entry.skips = (entry.skip or '') .. skip
                end
            end
        end

        if entry.guid ~= mecatol_guid then
            addtile(entry)
        end
    end
end

function addtile(tileinfo)
    tiles_by_key[tileinfo.key] = tileinfo
    tiles_by_guid[tileinfo.guid] = tileinfo
    if tileinfo.planets ~= nil then
        for i, p in ipairs(tileinfo.planets) do
            table.insert(planets, p)
        end
    end
end

function createInputs()
    self.createInput({
        input_function = "input_string",
        function_owner = self,
        value    = 0,
        alignment  = 4,
        position  = {x=0, y=0.2, z=0},
        width    = 1000,
        height    = 180,
        font_size  = 50,
        validation  = 1,
        alignment  = 2,
        value    = "",
        label     = "Enter map string or press 'save' to save the current map"
    })
    self.createButton({
        click_function  = "build",
        function_owner  = self,
        label      = "Build",
        position    = {x=0, y=0.5, z=0.4},
        width      = 500,
        height      = 200,
        font_size    = 100,
    })
    self.createButton({
        click_function  = "save",
        function_owner  = self,
        label      = "Save",
        position    = {x=0, y=0.5, z=0.8},
        width      = 500,
        height      = 200,
        font_size    = 100,
    })
    self.createButton({
        click_function  = "toggle_lock",
        function_owner  = self,
        label      = "lock tiles",
        position    = {x=0.8, y=0.5, z=0.4},
        width      = 250,
        height      = 50,
        font_size    = 40,
    })
    self.createButton({
        click_function  = "place_cards",
        function_owner  = self,
        label      = "Place Cards",
        position    = {x=-0.9, y=0.5, z=0.4},
        width      = 400,
        height      = 200,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "return_cards",
        function_owner  = self,
        label      = "Return Cards",
        position    = {x=-0.9, y=0.5, z=0.8},
        width      = 400,
        height      = 200,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "clear_tiles",
        function_owner  = self,
        label      = "Clear",
        position    = {x=0.95, y=0.5, z=0.8},
        width      = 400,
        height      = 200,
        font_size    = 100,
    })
    self.createButton({
        click_function  = "count_slices3",
        function_owner  = self,
        label      = "3p",
        position    = {x=-1.2, y=0.5, z=-0.7},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "count_slices4",
        function_owner  = self,
        label      = "4p",
        position    = {x=-1, y=0.5, z=-0.7},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "count_slices5",
        function_owner  = self,
        label      = "5p",
        position    = {x=-0.8, y=0.5, z=-0.7},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "count_slices6",
        function_owner  = self,
        label      = "6p",
        position    = {x=-0.6, y=0.5, z=-0.7},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "clear_slicelabels",
        function_owner  = self,
        label      = "clear",
        position    = {x=-0.35, y=0.5, z=-0.7},
        width      = 160,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "pass",
        function_owner  = self,
        label      = "Count Resources",
        position    = {x=-0.8, y=0.5, z=-0.9},
        width      = 0,
        height      = 0,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "pass",
        function_owner  = self,
        label      = "Draw Lines",
        position    = {x=-0.8, y=0.5, z=-0.5},
        width      = 0,
        height      = 0,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "draw3P",
        function_owner  = self,
        label      = "3P",
        position    = {x=-1.2, y=0.5, z=-0.3},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "draw4P",
        function_owner  = self,
        label      = "4P",
        position    = {x=-1, y=0.5, z=-0.3},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "draw5P",
        function_owner  = self,
        label      = "5P",
        position    = {x=-0.8, y=0.5, z=-0.3},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "draw6P",
        function_owner  = self,
        label      = "6P",
        position    = {x=-0.6, y=0.5, z=-0.3},
        width      = 100,
        height      = 100,
        font_size    = 60,
    })
    self.createButton({
        click_function  = "drawAuto",
        function_owner  = self,
        label      = "Auto",
        position    = {x=-0.35, y=0.5, z=-0.3},
        width      = 160,
        height      = 100,
        font_size    = 60,
    })
end

function input_string(_, _, input)
    cur_input = input
end

function toggle_lock(_, color)
    do_lock = not do_lock
    local newlabel
    if do_lock then
        newlabel = "lock tiles"
    else
        newlabel = "unlock tiles"
    end
    self.editButton({index = 2, label = newlabel})
end

---------------------
-- Map building stuff
---------------------

function build(_, color)
    broadcastToAll("Building map from string: " .. cur_input)
    place_tiles(parse_string(cur_input))
end

function parse_string(input)
    local buildlist = {}
    for key in string.gmatch(input, "%d+") do
        if tiles_by_key[key] ~= nil then
            table.insert(buildlist, tiles_by_key[key])
        else
            broadcastToAll("Error parsing; no tile has the number " .. key)
            table.insert(buildlist, blanktile)
        end
    end
    return buildlist
end

function place_tiles(buildlist)
    local origin = {
        position = { x = 0, y = 1, z = 0 },
        rotation = { x = 0, y = 0, z = 0 }
    }

    local mecatol = getObjectFromGUID(mecatol_guid)
    if mecatol then
        origin.position = mecatol.getPosition()
        origin.rotation = mecatol.getRotation()
    else
        broadcastToAll("Unable to find Mecatol Rex, generating map at the center of the table.")
    end

    local hex_itr = spiral_hex_iterator(origin.position, origin.rotation)
    for i, info in ipairs(buildlist) do
        place_tile(info, hex_itr(), origin.rotation)
    end
end

function place_tile(tileinfo, location, rotation)
    if tileinfo == blanktile then
        return true
    end
    local guid = tileinfo.guid
    local tile = getObjectFromGUID(guid)
    if tile ~= nil then
        tile.setPositionSmooth(location)
        tile.setRotationSmooth(rotation)
        tile.setLock(do_lock)
        return true
    else
        for i, g in ipairs(bag_guids) do
            local bag = getObjectFromGUID(g)
            if place_tile_from_bag(bag, guid, location, rotation) then
                return true
            end
        end
    end
    broadcastToAll("Unable to find tile number " .. tileinfo.key .. ", ensure that no tiles have been deleted, and that all tiles are on the table or in their starting bags.")
    return false
end

function place_tile_from_bag(bag, guid, location, rotation)
    local function delayedLock(object)
        Wait.time(function() object.setLock(do_lock) end, 1)
    end

    if bag ~= nil and bag.getObjects ~= nil then
        for i, g in ipairs(bag.getObjects()) do
            if g.guid == guid then
                bag.takeObject({
                    guid = guid,
                    position = location,
                    rotation = rotation,
                    callback_function = do_lock and delayedLock
                })
                return true
            end
        end
    else
        return false
    end
end

function clear_tiles(_, color)
    broadcastToAll("Returning tiles")
    local redbag = getObjectFromGUID(redbag_guid)
    local bluebag = getObjectFromGUID(bluebag_guid)
    if redbag == nil then
        broadcastToAll("Cannot find red planet tiles bag")
    end
    if bluebag == nil then
        broadcastToAll("Cannot find blue planet tiles bag")
    end

    for i, obj in ipairs(getAllObjects()) do
        local info = tiles_by_guid[obj.guid]
        if info ~= nil and info.home == nil then
            obj.setLock(false)
            if info.planets ~= nil then
                if bluebag ~= nil then
                    bluebag.putObject(obj)
                end
            else
                if redbag ~= nil then
                    redbag.putObject(obj)
                end
            end
        end
    end
end

---------------------
-- Map saving stuff
---------------------

function save(_, color)
    broadcastToAll("saving map")
    save_tiles()
end

function save_tiles()
    local tile_itr = placed_tiles_iterator()
    if(tile_itr == nil) then
        return
    end

    local string = ""
    local blanks = 0
    for spot=1,tile_limit do
        local tile = tile_itr()
        if(tile ~= nil) then
            for i=1,blanks do
                string = string .. "0 "
            end
            string = string .. tile.info.key .. " "
            blanks = 0
        else
            blanks = blanks + 1
        end
    end
    cur_input = string
    self.editInput({index = 0, value = string})
end

---------------------
-- Card stuff
---------------------

function place_cards(_, color)
    broadcastToAll("Placing planet cards")

    local tile_itr = placed_tiles_iterator()
    if tile_itr == nil then
        return
    end
    local mecatol = getObjectFromGUID(mecatol_guid)
    local rot = mecatol.getRotation()
    rot.z = 180
    place_card(mecatol_name, mecatol.positionToWorld({x = 0, y = 1, z = 0}), rot)
    local custodians = getObjectFromGUID(custodians_guid)
    if custodians ~= nil then
        local custpos = custodians.getPosition()
        local mecpos = mecatol.getPosition()
        custodians.setPositionSmooth(mecatol.positionToWorld({x = 0, y = 5, z = 0}))
        custodians.setRotationSmooth(mecatol.getRotation())
    end

    for spot=1,tile_limit do
        local tile = tile_itr()
        if tile ~= nil then
            local planets = tile.info.planets
            if planets ~= nil then
                local num = #planets
                rot = tile.obj.getRotation()
                rot.z = 180
                if num == 1 then
                    place_card(planets[1], tile.obj.positionToWorld({x = 0, y = 1, z = 0}), rot, true)
                elseif num == 2 then
                    place_card(planets[1], tile.obj.positionToWorld({x = 0.6, y = 1, z = -1}), rot, true)
                    place_card(planets[2], tile.obj.positionToWorld({x = -0.4, y = 1, z = 1}), rot, true)
                end
            end
        end
    end
end

function return_cards(_, color)
    broadcastToAll("Returning planet cards")
    for i, p in ipairs(planets) do
        place_card(p, planet_deck_loc, planet_deck_rot, false)
    end
end

function place_card(name, location, rotation, broadcast_not_found)
    if name == "" then
        return true
    end

    if deck_last_cards[name] ~= nil then
        deck_last_cards[name] = {loc = location, rot = rotation}
        return true
    end

    for i, obj in ipairs(getAllObjects()) do
        if obj.tag == "Deck" then
            local deck_contents = obj.getObjects()
            for i, g in ipairs(deck_contents) do
                if g.nickname == name then
                    if #deck_contents == 2 then
                        Timer.create({
                            identifier="afterdeckdestroy" .. waiting_id, function_name="handle_waiting_card",
                            function_owner=self, delay=second_pass_delay
                        })
                        waiting_id = waiting_id + 1
                        if i == 1 then
                            deck_last_cards[deck_contents[2].nickname] = {}
                        else
                            deck_last_cards[deck_contents[1].nickname] = {}
                        end
                    end
                    obj.takeObject({
                        guid = g.guid,
                        position = location,
                        rotation = rotation
                    })
                    return true
                end
            end
        elseif obj.tag == "Card" then
            if obj.getName() == name then
                obj.setPositionSmooth(location)
                obj.setRotationSmooth(rotation)
                return true
            end
        end
    end
    if broadcast_not_found then
        broadcastToAll("Unable to find planet card for " .. name .. ", ensure that it has not been deleted and that it or a deck containing it is on the table.")
    end
    return false
end

function handle_waiting_card()
    for name, val in pairs(deck_last_cards) do
        if val.loc ~= nil then
            deck_last_cards[name] = nil
            place_card(name, val.loc, val.rot, false)
            return
        end
    end
end

---------------------
-- Counting stuff
---------------------

function count_slices3(_, color)
    count_slices(ownership_3p, slicetext_3p)
end

function count_slices4(_, color)
    count_slices(ownership_4p, slicetext_4p)
end

function count_slices5(_, color)
    count_slices(ownership_5p, slicetext_5p)
end

function count_slices6(_, color)
    count_slices(ownership_6p, slicetext_6p)
end

function clear_slicelabels()
    for i, obj in ipairs(getAllObjects()) do
        if(obj.getName() == slice_datalabel_name) and (obj.TextTool ~= nil) then
            destroyObject(obj)
        end
    end
end

function count_slices(ownership, slicetext)
    clear_slicelabels()
    local mecatol = getObjectFromGUID(mecatol_guid)
    if mecatol == nil then
        broadcastToAll("Unable to find Mecatol Rex, ensure that it has not been deleted and that it is at the center of the table.")
        return
    end
    local counts = {}
    for i, xz in ipairs(slicetext) do
        table.insert(counts, {resources = 0, influence = 0, skips = ""})
    end

    local tile_itr = placed_tiles_iterator()
    if(tile_itr == nil) then
        return
    end
    for i, owner in ipairs(ownership) do
        local tile = tile_itr()
        if (owner ~= 0) and (tile ~= nil) then
            if tile.info.resources ~= nil then
                counts[owner].resources = counts[owner].resources + tile.info.resources
            end
            if tile.info.influence ~= nil then
                counts[owner].influence = counts[owner].influence + tile.info.influence
            end
            if tile.info.skips ~= nil then
                counts[owner].skips = counts[owner].skips..tile.info.skips
            end
        end
    end

    for i, xz in ipairs(slicetext) do
        local resources = 0
        local influence = 0
        local skips = "RYB"
        local textpos = mecatol.getPosition()
        textpos = mecatol.positionToWorld({x = tile_diameter * 3 * xz[1], y = 1, z = tile_diameter * 3 * xz[2]})
        textpos = {-textpos.x, textpos.y, -textpos.z}
        local textrot = mecatol.getRotation()
        textrot.x = textrot.x + 90
        textrot.y = textrot.y + 180
        local table = {type = "3DText", position = textpos, rotation = textrot}
        local text = spawnObject(table)
        text.TextTool.setValue(counts[i].resources.."/"..counts[i].influence.." "..counts[i].skips)
        text.setName(slice_datalabel_name)
    end
end

---------------------
-- Helpers
---------------------

function pass()
end

function spiral_hex_iterator(startpos, startrot)
    local level = 1
    local dir = 120
    local steps = 0
    local north = startrot.y + 180
    local nextpos = move_in_dir(startpos, north)
    return function()
        local thispos = nextpos
        nextpos = move_in_dir(nextpos, north + dir)
        steps = steps + 1
        if steps >= level then
            steps = 0
            dir = (dir + 60) % 360
            if dir == 120 then
                nextpos = move_in_dir(nextpos, north)
                level = level + 1
            end
        end
        return thispos
    end
end

function move_in_dir(start, dir)
    return {x = start.x + math.sin(math.rad(dir)) * tile_diameter, y = start.y, z = start.z + math.cos(math.rad(dir)) * tile_diameter}
end

function placed_tiles_iterator()
    local mecatol = getObjectFromGUID(mecatol_guid)

    if mecatol == nil then
        broadcastToAll("Unable to find Mecatol Rex, ensure that it has not been deleted and that it is at the center of the table.")
        return nil
    end

    local hex_itr = spiral_hex_iterator(mecatol.getPosition(), mecatol.getRotation())
    return function()
        local hexpos = hex_itr()
        for g, info in pairs(tiles_by_guid) do
            local obj = getObjectFromGUID(g)
            if obj ~= nil then
                local objpos = obj.getPosition()
                if (math.abs(objpos.x - hexpos.x) < tile_radius) and (math.abs(objpos.z - hexpos.z) < tile_radius) then
                    return {obj = obj, info = info}
                end
            end
        end
        return nil
    end
end

--line drawing stuff

function draw3P()
    Global.setVectorLines({{points={{-14.2,1.0,9.1},{-14.2,1.0,9.4},{-14.3,1.0,9.6},{-14.4,1.0,9.9},{-14.6,1.0,10.1},{-14.8,1.0,10.3},{-15.0,1.0,10.5},{-15.3,1.0,10.6},{-15.5,1.0,10.7},{-15.8,1.0,10.7},{-16.1,1.0,10.7},{-16.4,1.0,10.6},{-16.6,1.0,10.5},{-16.9,1.0,10.3},{-17.1,1.0,10.1},{-17.2,1.0,9.9},{-17.3,1.0,9.6},{-17.4,1.0,9.4},{-17.4,1.0,9.1},{-17.4,1.0,8.8},{-17.3,1.0,8.5},{-17.2,1.0,8.3},{-17.1,1.0,8.0},{-16.9,1.0,7.8},{-16.6,1.0,7.7},{-16.4,1.0,7.6},{-16.1,1.0,7.5},{-15.8,1.0,7.5},{-15.5,1.0,7.5},{-15.3,1.0,7.6},{-15.0,1.0,7.7},{-14.8,1.0,7.8},{-14.6,1.0,8.0},{-14.4,1.0,8.3},{-14.3,1.0,8.5},{-14.2,1.0,8.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{1.7,1.0,-18.2},{1.7,1.0,-17.9},{1.6,1.0,-17.6},{1.5,1.0,-17.3},{1.3,1.0,-17.1},{1.1,1.0,-16.9},{0.8,1.0,-16.7},{0.6,1.0,-16.5},{0.3,1.0,-16.5},{0.0,1.0,-16.4},{-0.4,1.0,-16.5},{-0.7,1.0,-16.5},{-0.9,1.0,-16.7},{-1.2,1.0,-16.9},{-1.4,1.0,-17.1},{-1.6,1.0,-17.3},{-1.7,1.0,-17.6},{-1.8,1.0,-17.9},{-1.8,1.0,-18.2},{-1.8,1.0,-18.5},{-1.7,1.0,-18.8},{-1.6,1.0,-19.1},{-1.4,1.0,-19.3},{-1.2,1.0,-19.6},{-0.9,1.0,-19.7},{-0.7,1.0,-19.9},{-0.4,1.0,-20.0},{0.0,1.0,-20.0},{0.3,1.0,-20.0},{0.6,1.0,-19.9},{0.8,1.0,-19.7},{1.1,1.0,-19.6},{1.3,1.0,-19.3},{1.5,1.0,-19.1},{1.6,1.0,-18.8},{1.7,1.0,-18.5},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{17.6,1.0,9.2},{17.6,1.0,9.6},{17.5,1.0,9.9},{17.4,1.0,10.2},{17.2,1.0,10.4},{16.9,1.0,10.7},{16.7,1.0,10.9},{16.4,1.0,11.0},{16.1,1.0,11.1},{15.7,1.0,11.1},{15.4,1.0,11.1},{15.1,1.0,11.0},{14.8,1.0,10.9},{14.5,1.0,10.7},{14.3,1.0,10.4},{14.1,1.0,10.2},{14.0,1.0,9.9},{13.9,1.0,9.6},{13.9,1.0,9.2},{13.9,1.0,8.9},{14.0,1.0,8.6},{14.1,1.0,8.3},{14.3,1.0,8.0},{14.5,1.0,7.8},{14.8,1.0,7.6},{15.1,1.0,7.5},{15.4,1.0,7.4},{15.7,1.0,7.3},{16.1,1.0,7.4},{16.4,1.0,7.5},{16.7,1.0,7.6},{16.9,1.0,7.8},{17.2,1.0,8.0},{17.4,1.0,8.3},{17.5,1.0,8.6},{17.6,1.0,8.9},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{5.3,1.0,-2.9},{0.1,1.0,-6.1},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,-6.1},{-5.1,1.0,-2.8},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.2,1.0,3.0},{0.1,1.0,6.2},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,-6.0},{-0.1,1.0,-12.2},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.2,1.0,-12.2},{-10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.5,1.0,-6.0},{-10.6,1.0,6.4},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.6,1.0,6.3},{-0.1,1.0,12.3},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.1,1.0,12.2},{10.5,1.0,6.1},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,6.1},{10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-5.1,1.0,-2.8},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.2,1.0,6.2},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{5.2,1.0,2.9},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.4,1.0,11.2},{9.3,1.0,13.0},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-9.0,1.0,13.1},{-12.1,1.0,11.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.4,1.0,5.5},{-15.5,1.0,1.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.9,1.0,5.1},{16.0,1.0,1.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{6.6,1.0,-14.3},{3.8,1.0,-15.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-3.8,1.0,-15.5},{-6.5,1.0,-14.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.2,1.0,15.6},{0.2,1.0,23.4},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.1,1.0,15.6},{-0.1,1.0,23.6},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-7.7,1.0,-12.0},{-47.8,1.0,-12.1},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-19.4,1.0,3.2},{-47.4,1.0,3.1},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{19.5,1.0,3.1},{47.7,1.0,3.1},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.7,1.0,-9.1},{48.0,1.0,-9.1},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-34.8,1.0,-5.3},{-39.2,1.0,-5.3},{-39.2,1.0,-2.2},{-34.8,1.0,-2.2},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},})
end

function draw4P()
    Global.setVectorLines({{points={{-34.8,1.0,-1.6},{-38.7,1.0,-1.6},{-38.7,1.0,1.4},{-34.8,1.0,1.4},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{47.8,1.0,6.1},{17.9,1.0,6.0},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-48.0,1.0,6.1},{-17.5,1.0,6.1},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{0.1,1.0,-6.1},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,-6.1},{-5.1,1.0,-2.8},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.2,1.0,3.0},{0.1,1.0,6.2},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,-6.0},{-0.1,1.0,-12.2},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.2,1.0,-12.2},{-10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.5,1.0,-6.0},{-10.6,1.0,6.4},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.6,1.0,6.3},{-0.1,1.0,12.3},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.1,1.0,12.2},{10.5,1.0,6.1},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,6.1},{10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-5.1,1.0,-2.8},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.2,1.0,6.2},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{5.2,1.0,2.9},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.7,1.0,-6.3},{-47.5,1.0,-6.2},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-6.2},{47.8,1.0,-6.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{7.0,1.0,-15.1},{7.0,1.0,-14.8},{6.9,1.0,-14.5},{6.8,1.0,-14.2},{6.6,1.0,-13.9},{6.4,1.0,-13.7},{6.1,1.0,-13.5},{5.8,1.0,-13.4},{5.5,1.0,-13.3},{5.2,1.0,-13.3},{4.9,1.0,-13.3},{4.6,1.0,-13.4},{4.3,1.0,-13.5},{4.1,1.0,-13.7},{3.8,1.0,-13.9},{3.7,1.0,-14.2},{3.5,1.0,-14.5},{3.5,1.0,-14.8},{3.4,1.0,-15.1},{3.5,1.0,-15.4},{3.5,1.0,-15.7},{3.7,1.0,-16.0},{3.8,1.0,-16.2},{4.1,1.0,-16.4},{4.3,1.0,-16.6},{4.6,1.0,-16.8},{4.9,1.0,-16.8},{5.2,1.0,-16.9},{5.5,1.0,-16.8},{5.8,1.0,-16.8},{6.1,1.0,-16.6},{6.4,1.0,-16.4},{6.6,1.0,-16.2},{6.8,1.0,-16.0},{6.9,1.0,-15.7},{7.0,1.0,-15.4},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{17.5,1.0,3.2},{17.4,1.0,3.5},{17.4,1.0,3.8},{17.2,1.0,4.1},{17.0,1.0,4.3},{16.8,1.0,4.6},{16.5,1.0,4.8},{16.2,1.0,4.9},{15.9,1.0,5.0},{15.6,1.0,5.0},{15.3,1.0,5.0},{15.0,1.0,4.9},{14.7,1.0,4.8},{14.4,1.0,4.6},{14.2,1.0,4.3},{14.0,1.0,4.1},{13.9,1.0,3.8},{13.8,1.0,3.5},{13.8,1.0,3.2},{13.8,1.0,2.8},{13.9,1.0,2.5},{14.0,1.0,2.2},{14.2,1.0,2.0},{14.4,1.0,1.7},{14.7,1.0,1.5},{15.0,1.0,1.4},{15.3,1.0,1.3},{15.6,1.0,1.3},{15.9,1.0,1.3},{16.2,1.0,1.4},{16.5,1.0,1.5},{16.8,1.0,1.7},{17.0,1.0,2.0},{17.2,1.0,2.2},{17.4,1.0,2.5},{17.4,1.0,2.8},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{-3.4,1.0,15.2},{-3.4,1.0,15.6},{-3.5,1.0,15.9},{-3.7,1.0,16.2},{-3.9,1.0,16.5},{-4.1,1.0,16.7},{-4.4,1.0,16.9},{-4.7,1.0,17.0},{-5.0,1.0,17.1},{-5.3,1.0,17.1},{-5.6,1.0,17.1},{-5.9,1.0,17.0},{-6.2,1.0,16.9},{-6.5,1.0,16.7},{-6.7,1.0,16.5},{-6.9,1.0,16.2},{-7.1,1.0,15.9},{-7.1,1.0,15.6},{-7.2,1.0,15.2},{-7.1,1.0,14.9},{-7.1,1.0,14.6},{-6.9,1.0,14.3},{-6.7,1.0,14.0},{-6.5,1.0,13.8},{-6.2,1.0,13.6},{-5.9,1.0,13.5},{-5.6,1.0,13.4},{-5.3,1.0,13.4},{-5.0,1.0,13.4},{-4.7,1.0,13.5},{-4.4,1.0,13.6},{-4.1,1.0,13.8},{-3.9,1.0,14.0},{-3.7,1.0,14.3},{-3.5,1.0,14.6},{-3.4,1.0,14.9},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{-13.8,1.0,-3.2},{-13.8,1.0,-2.8},{-13.9,1.0,-2.5},{-14.1,1.0,-2.2},{-14.3,1.0,-1.9},{-14.5,1.0,-1.7},{-14.8,1.0,-1.5},{-15.1,1.0,-1.4},{-15.4,1.0,-1.3},{-15.7,1.0,-1.3},{-16.1,1.0,-1.3},{-16.4,1.0,-1.4},{-16.7,1.0,-1.5},{-17.0,1.0,-1.7},{-17.2,1.0,-1.9},{-17.4,1.0,-2.2},{-17.5,1.0,-2.5},{-17.6,1.0,-2.8},{-17.7,1.0,-3.2},{-17.6,1.0,-3.5},{-17.5,1.0,-3.8},{-17.4,1.0,-4.1},{-17.2,1.0,-4.4},{-17.0,1.0,-4.7},{-16.7,1.0,-4.8},{-16.4,1.0,-5.0},{-16.1,1.0,-5.1},{-15.7,1.0,-5.1},{-15.4,1.0,-5.1},{-15.1,1.0,-5.0},{-14.8,1.0,-4.8},{-14.5,1.0,-4.7},{-14.3,1.0,-4.4},{-14.1,1.0,-4.1},{-13.9,1.0,-3.8},{-13.8,1.0,-3.5},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{-0.1,1.0,-21.2},{-0.1,1.0,-23.7},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.3,1.0,-21.2},{-0.3,1.0,-23.7},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.0,1.0,-21.2},{0.1,1.0,-23.8},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,-21.3},{0.1,1.0,-23.9},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.2,1.0,21.3},{-0.3,1.0,23.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.3,1.0,21.3},{-0.4,1.0,23.9},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.0,1.0,21.3},{-0.1,1.0,23.9},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,21.4},{0.1,1.0,23.9},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.8,1.0,6.7},{15.7,1.0,9.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.7,1.0,9.2},{14.2,1.0,10.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.5,1.0,11.2},{8.9,1.0,13.4},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{7.3,1.0,14.1},{3.4,1.0,16.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{2.0,1.0,17.3},{0.1,1.0,18.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.0,1.0,18.4},{-1.9,1.0,17.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-8.7,1.0,13.1},{-12.0,1.0,11.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-14.0,1.0,10.2},{-15.7,1.0,9.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.8,1.0,9.2},{-15.9,1.0,7.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.8,1.0,5.5},{-15.8,1.0,1.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.8,1.0,-6.5},{-15.9,1.0,-8.6},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.8,1.0,-8.9},{-14.2,1.0,-9.7},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-12.0,1.0,-10.8},{-8.8,1.0,-12.8},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-6.9,1.0,-14.0},{-3.5,1.0,-16.0},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-1.7,1.0,-17.0},{-0.1,1.0,-18.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.0,1.0,-18.2},{1.5,1.0,-17.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{8.7,1.0,-13.4},{12.2,1.0,-11.1},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{13.7,1.0,-10.3},{15.8,1.0,-8.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.8,1.0,-8.8},{15.8,1.0,-6.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.7,1.0,-5.4},{15.7,1.0,-0.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},})
end

function draw5P()
    Global.setVectorLines({{points={{-34.8,1.0,-1.6},{-38.7,1.0,-1.6},{-38.7,1.0,1.4},{-34.8,1.0,1.4},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{47.8,1.0,6.1},{17.9,1.0,6.0},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-48.0,1.0,6.1},{-17.5,1.0,6.1},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-14.2,1.0,9.1},{-14.2,1.0,9.4},{-14.3,1.0,9.6},{-14.4,1.0,9.9},{-14.6,1.0,10.1},{-14.8,1.0,10.3},{-15.0,1.0,10.5},{-15.3,1.0,10.6},{-15.5,1.0,10.7},{-15.8,1.0,10.7},{-16.1,1.0,10.7},{-16.4,1.0,10.6},{-16.6,1.0,10.5},{-16.9,1.0,10.3},{-17.1,1.0,10.1},{-17.2,1.0,9.9},{-17.3,1.0,9.6},{-17.4,1.0,9.4},{-17.4,1.0,9.1},{-17.4,1.0,8.8},{-17.3,1.0,8.5},{-17.2,1.0,8.3},{-17.1,1.0,8.0},{-16.9,1.0,7.8},{-16.6,1.0,7.7},{-16.4,1.0,7.6},{-16.1,1.0,7.5},{-15.8,1.0,7.5},{-15.5,1.0,7.5},{-15.3,1.0,7.6},{-15.0,1.0,7.7},{-14.8,1.0,7.8},{-14.6,1.0,8.0},{-14.4,1.0,8.3},{-14.3,1.0,8.5},{-14.2,1.0,8.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.4,1.0,-8.9},{17.4,1.0,-8.6},{17.3,1.0,-8.4},{17.2,1.0,-8.1},{17.0,1.0,-7.8},{16.8,1.0,-7.6},{16.6,1.0,-7.4},{16.3,1.0,-7.3},{16.0,1.0,-7.2},{15.7,1.0,-7.2},{15.4,1.0,-7.2},{15.1,1.0,-7.3},{14.8,1.0,-7.4},{14.6,1.0,-7.6},{14.4,1.0,-7.8},{14.2,1.0,-8.1},{14.1,1.0,-8.4},{14.0,1.0,-8.6},{14.0,1.0,-8.9},{14.0,1.0,-9.2},{14.1,1.0,-9.5},{14.2,1.0,-9.8},{14.4,1.0,-10.1},{14.6,1.0,-10.3},{14.8,1.0,-10.4},{15.1,1.0,-10.6},{15.4,1.0,-10.7},{15.7,1.0,-10.7},{16.0,1.0,-10.7},{16.3,1.0,-10.6},{16.6,1.0,-10.4},{16.8,1.0,-10.3},{17.0,1.0,-10.1},{17.2,1.0,-9.8},{17.3,1.0,-9.5},{17.4,1.0,-9.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{1.7,1.0,-18.2},{1.7,1.0,-17.9},{1.6,1.0,-17.6},{1.5,1.0,-17.3},{1.3,1.0,-17.1},{1.1,1.0,-16.9},{0.8,1.0,-16.7},{0.6,1.0,-16.5},{0.3,1.0,-16.5},{0.0,1.0,-16.4},{-0.4,1.0,-16.5},{-0.7,1.0,-16.5},{-0.9,1.0,-16.7},{-1.2,1.0,-16.9},{-1.4,1.0,-17.1},{-1.6,1.0,-17.3},{-1.7,1.0,-17.6},{-1.8,1.0,-17.9},{-1.8,1.0,-18.2},{-1.8,1.0,-18.5},{-1.7,1.0,-18.8},{-1.6,1.0,-19.1},{-1.4,1.0,-19.3},{-1.2,1.0,-19.6},{-0.9,1.0,-19.7},{-0.7,1.0,-19.9},{-0.4,1.0,-20.0},{0.0,1.0,-20.0},{0.3,1.0,-20.0},{0.6,1.0,-19.9},{0.8,1.0,-19.7},{1.1,1.0,-19.6},{1.3,1.0,-19.3},{1.5,1.0,-19.1},{1.6,1.0,-18.8},{1.7,1.0,-18.5},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,9.2},{17.6,1.0,9.6},{17.5,1.0,9.9},{17.4,1.0,10.2},{17.2,1.0,10.4},{16.9,1.0,10.7},{16.7,1.0,10.9},{16.4,1.0,11.0},{16.1,1.0,11.1},{15.7,1.0,11.1},{15.4,1.0,11.1},{15.1,1.0,11.0},{14.8,1.0,10.9},{14.5,1.0,10.7},{14.3,1.0,10.4},{14.1,1.0,10.2},{14.0,1.0,9.9},{13.9,1.0,9.6},{13.9,1.0,9.2},{13.9,1.0,8.9},{14.0,1.0,8.6},{14.1,1.0,8.3},{14.3,1.0,8.0},{14.5,1.0,7.8},{14.8,1.0,7.6},{15.1,1.0,7.5},{15.4,1.0,7.4},{15.7,1.0,7.3},{16.1,1.0,7.4},{16.4,1.0,7.5},{16.7,1.0,7.6},{16.9,1.0,7.8},{17.2,1.0,8.0},{17.4,1.0,8.3},{17.5,1.0,8.6},{17.6,1.0,8.9},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-14.0,1.0,-8.9},{-14.1,1.0,-8.6},{-14.1,1.0,-8.3},{-14.3,1.0,-8.0},{-14.4,1.0,-7.8},{-14.6,1.0,-7.6},{-14.9,1.0,-7.4},{-15.1,1.0,-7.3},{-15.4,1.0,-7.2},{-15.7,1.0,-7.2},{-16.0,1.0,-7.2},{-16.3,1.0,-7.3},{-16.5,1.0,-7.4},{-16.8,1.0,-7.6},{-17.0,1.0,-7.8},{-17.1,1.0,-8.0},{-17.3,1.0,-8.3},{-17.3,1.0,-8.6},{-17.4,1.0,-8.9},{-17.3,1.0,-9.1},{-17.3,1.0,-9.4},{-17.1,1.0,-9.7},{-17.0,1.0,-9.9},{-16.8,1.0,-10.1},{-16.5,1.0,-10.3},{-16.3,1.0,-10.4},{-16.0,1.0,-10.5},{-15.7,1.0,-10.5},{-15.4,1.0,-10.5},{-15.1,1.0,-10.4},{-14.9,1.0,-10.3},{-14.6,1.0,-10.1},{-14.4,1.0,-9.9},{-14.3,1.0,-9.7},{-14.1,1.0,-9.4},{-14.1,1.0,-9.1},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{0.1,1.0,-6.1},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,-6.1},{-5.1,1.0,-2.8},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.5,1.0,-10.9},{3.2,1.0,-16.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-2.9,1.0,-16.4},{-12.4,1.0,-10.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.6,1.0,-5.7},{-15.6,1.0,5.6},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.8,1.0,-5.6},{15.8,1.0,5.7},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,-6.0},{-0.1,1.0,-12.2},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.2,1.0,-12.2},{-10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.5,1.0,-6.0},{-10.6,1.0,6.4},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,6.1},{10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-5.1,1.0,-2.8},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{5.2,1.0,2.9},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.5,1.0,-12.4},{-20.6,1.0,-12.4},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-12.4},{20.9,1.0,-12.4},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{20.9,1.0,-12.5},{20.9,1.0,-23.6},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.7,1.0,-6.3},{-47.5,1.0,-6.2},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.7,1.0,-12.2},{-20.8,1.0,-12.2},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.8,1.0,-12.3},{-20.7,1.0,-23.8},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.7,1.0,-12.4},{-20.6,1.0,-23.7},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-12.2},{21.0,1.0,-12.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{21.0,1.0,-12.3},{21.0,1.7,-24.0},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-6.2},{47.8,1.0,-6.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.3,1.0,11.1},{9.0,1.0,13.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-12.1,1.0,11.2},{-8.6,1.0,13.3},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-8.9,1.0,15.3},{-9.0,1.0,23.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{8.9,1.0,15.4},{8.5,1.0,23.8},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-34.8,1.0,-1.6},{-34.8,1.0,1.4},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.1,1.0,3.0},{3.2,1.0,4.7},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-5.2,1.0,3.1},{-2.9,1.0,5.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,6.1},{8.2,1.0,7.8},},color={0.96,0.39,0.11},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.6,1.0,6.4},{-8.2,1.0,8.0},},color={0.96,0.39,0.11},thickness=0.1,rotation={0,0,0},loop=false,square=false,},})
end

function draw6P()
    Global.setVectorLines({{points={{-34.8,1.0,-1.6},{-38.7,1.0,-1.6},{-38.7,1.0,1.4},{-34.8,1.0,1.4},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{47.8,1.0,6.1},{17.9,1.0,6.0},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-48.0,1.0,6.1},{-17.5,1.0,6.1},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-21.0,1.0,12.1},{-17.9,1.0,12.1},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-21.0,1.0,12.2},{-21.2,1.0,23.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.9,1.0,12.2},{-20.9,1.0,12.2},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{21.0,1.0,12.2},{20.9,1.0,23.8},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{21.0,1.0,12.2},{21.0,1.0,23.8},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{21.0,1.0,12.1},{17.9,1.0,12.1},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,12.3},{21.0,1.0,12.3},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{20.8,1.0,23.9},{20.9,1.0,12.3},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.8,1.0,12.2},{-21.1,1.0,24.0},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.7,1.0,12.3},{-21.0,1.0,23.9},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-14.2,1.0,9.1},{-14.2,1.0,9.4},{-14.3,1.0,9.6},{-14.4,1.0,9.9},{-14.6,1.0,10.1},{-14.8,1.0,10.3},{-15.0,1.0,10.5},{-15.3,1.0,10.6},{-15.5,1.0,10.7},{-15.8,1.0,10.7},{-16.1,1.0,10.7},{-16.4,1.0,10.6},{-16.6,1.0,10.5},{-16.9,1.0,10.3},{-17.1,1.0,10.1},{-17.2,1.0,9.9},{-17.3,1.0,9.6},{-17.4,1.0,9.4},{-17.4,1.0,9.1},{-17.4,1.0,8.8},{-17.3,1.0,8.5},{-17.2,1.0,8.3},{-17.1,1.0,8.0},{-16.9,1.0,7.8},{-16.6,1.0,7.7},{-16.4,1.0,7.6},{-16.1,1.0,7.5},{-15.8,1.0,7.5},{-15.5,1.0,7.5},{-15.3,1.0,7.6},{-15.0,1.0,7.7},{-14.8,1.0,7.8},{-14.6,1.0,8.0},{-14.4,1.0,8.3},{-14.3,1.0,8.5},{-14.2,1.0,8.8},},color={1.00,1.00,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{17.4,1.0,-8.9},{17.4,1.0,-8.6},{17.3,1.0,-8.4},{17.2,1.0,-8.1},{17.0,1.0,-7.8},{16.8,1.0,-7.6},{16.6,1.0,-7.4},{16.3,1.0,-7.3},{16.0,1.0,-7.2},{15.7,1.0,-7.2},{15.4,1.0,-7.2},{15.1,1.0,-7.3},{14.8,1.0,-7.4},{14.6,1.0,-7.6},{14.4,1.0,-7.8},{14.2,1.0,-8.1},{14.1,1.0,-8.4},{14.0,1.0,-8.6},{14.0,1.0,-8.9},{14.0,1.0,-9.2},{14.1,1.0,-9.5},{14.2,1.0,-9.8},{14.4,1.0,-10.1},{14.6,1.0,-10.3},{14.8,1.0,-10.4},{15.1,1.0,-10.6},{15.4,1.0,-10.7},{15.7,1.0,-10.7},{16.0,1.0,-10.7},{16.3,1.0,-10.6},{16.6,1.0,-10.4},{16.8,1.0,-10.3},{17.0,1.0,-10.1},{17.2,1.0,-9.8},{17.3,1.0,-9.5},{17.4,1.0,-9.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{1.7,1.0,-18.2},{1.7,1.0,-17.9},{1.6,1.0,-17.6},{1.5,1.0,-17.3},{1.3,1.0,-17.1},{1.1,1.0,-16.9},{0.8,1.0,-16.7},{0.6,1.0,-16.5},{0.3,1.0,-16.5},{0.0,1.0,-16.4},{-0.4,1.0,-16.5},{-0.7,1.0,-16.5},{-0.9,1.0,-16.7},{-1.2,1.0,-16.9},{-1.4,1.0,-17.1},{-1.6,1.0,-17.3},{-1.7,1.0,-17.6},{-1.8,1.0,-17.9},{-1.8,1.0,-18.2},{-1.8,1.0,-18.5},{-1.7,1.0,-18.8},{-1.6,1.0,-19.1},{-1.4,1.0,-19.3},{-1.2,1.0,-19.6},{-0.9,1.0,-19.7},{-0.7,1.0,-19.9},{-0.4,1.0,-20.0},{0.0,1.0,-20.0},{0.3,1.0,-20.0},{0.6,1.0,-19.9},{0.8,1.0,-19.7},{1.1,1.0,-19.6},{1.3,1.0,-19.3},{1.5,1.0,-19.1},{1.6,1.0,-18.8},{1.7,1.0,-18.5},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{17.6,1.0,9.2},{17.6,1.0,9.6},{17.5,1.0,9.9},{17.4,1.0,10.2},{17.2,1.0,10.4},{16.9,1.0,10.7},{16.7,1.0,10.9},{16.4,1.0,11.0},{16.1,1.0,11.1},{15.7,1.0,11.1},{15.4,1.0,11.1},{15.1,1.0,11.0},{14.8,1.0,10.9},{14.5,1.0,10.7},{14.3,1.0,10.4},{14.1,1.0,10.2},{14.0,1.0,9.9},{13.9,1.0,9.6},{13.9,1.0,9.2},{13.9,1.0,8.9},{14.0,1.0,8.6},{14.1,1.0,8.3},{14.3,1.0,8.0},{14.5,1.0,7.8},{14.8,1.0,7.6},{15.1,1.0,7.5},{15.4,1.0,7.4},{15.7,1.0,7.3},{16.1,1.0,7.4},{16.4,1.0,7.5},{16.7,1.0,7.6},{16.9,1.0,7.8},{17.2,1.0,8.0},{17.4,1.0,8.3},{17.5,1.0,8.6},{17.6,1.0,8.9},},color={0.63,0.13,0.94},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{1.6,1.0,18.0},{1.6,1.0,18.3},{1.5,1.0,18.6},{1.4,1.0,18.9},{1.2,1.0,19.1},{1.0,1.0,19.3},{0.8,1.0,19.5},{0.5,1.0,19.6},{0.2,1.0,19.7},{0.0,1.0,19.7},{-0.3,1.0,19.7},{-0.6,1.0,19.6},{-0.9,1.0,19.5},{-1.1,1.0,19.3},{-1.3,1.0,19.1},{-1.5,1.0,18.9},{-1.6,1.0,18.6},{-1.7,1.0,18.3},{-1.7,1.0,18.0},{-1.7,1.0,17.8},{-1.6,1.0,17.5},{-1.5,1.0,17.2},{-1.3,1.0,17.0},{-1.1,1.0,16.8},{-0.9,1.0,16.6},{-0.6,1.0,16.5},{-0.3,1.0,16.4},{0.0,1.0,16.4},{0.2,1.0,16.4},{0.5,1.0,16.5},{0.8,1.0,16.6},{1.0,1.0,16.8},{1.2,1.0,17.0},{1.4,1.0,17.2},{1.5,1.0,17.5},{1.6,1.0,17.8},},color={0.12,0.53,1.00},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{-14.0,1.0,-8.9},{-14.1,1.0,-8.6},{-14.1,1.0,-8.3},{-14.3,1.0,-8.0},{-14.4,1.0,-7.8},{-14.6,1.0,-7.6},{-14.9,1.0,-7.4},{-15.1,1.0,-7.3},{-15.4,1.0,-7.2},{-15.7,1.0,-7.2},{-16.0,1.0,-7.2},{-16.3,1.0,-7.3},{-16.5,1.0,-7.4},{-16.8,1.0,-7.6},{-17.0,1.0,-7.8},{-17.1,1.0,-8.0},{-17.3,1.0,-8.3},{-17.3,1.0,-8.6},{-17.4,1.0,-8.9},{-17.3,1.0,-9.1},{-17.3,1.0,-9.4},{-17.1,1.0,-9.7},{-17.0,1.0,-9.9},{-16.8,1.0,-10.1},{-16.5,1.0,-10.3},{-16.3,1.0,-10.4},{-16.0,1.0,-10.5},{-15.7,1.0,-10.5},{-15.4,1.0,-10.5},{-15.1,1.0,-10.4},{-14.9,1.0,-10.3},{-14.6,1.0,-10.1},{-14.4,1.0,-9.9},{-14.3,1.0,-9.7},{-14.1,1.0,-9.4},{-14.1,1.0,-9.1},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=true,square=false,},{points={{5.3,1.0,-2.9},{0.1,1.0,-6.1},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.1,1.0,-6.1},{-5.1,1.0,-2.8},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.2,1.0,3.0},{0.1,1.0,6.2},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{12.5,1.0,-10.9},{3.2,1.0,-16.2},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-2.9,1.0,-16.4},{-12.4,1.0,-10.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-15.6,1.0,-5.7},{-15.6,1.0,5.6},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-12.5,1.0,10.8},{-3.0,1.0,16.5},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{2.8,1.0,16.4},{12.6,1.0,10.9},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{15.8,1.0,-5.6},{15.8,1.0,5.7},},color={0.96,0.44,0.81},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,-6.0},{-0.1,1.0,-12.2},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.2,1.0,-12.2},{-10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.5,1.0,-6.0},{-10.6,1.0,6.4},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-10.6,1.0,6.3},{-0.1,1.0,12.3},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-0.1,1.0,12.2},{10.5,1.0,6.1},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{10.4,1.0,6.1},{10.5,1.0,-5.9},},color={0.91,0.59,0.03},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-5.1,1.0,-2.8},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{0.2,1.0,6.2},{-5.2,1.0,3.0},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{5.3,1.0,-2.9},{5.2,1.0,2.9},},color={0.13,0.69,0.61},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.5,1.0,-12.4},{-20.6,1.0,-12.4},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-12.4},{20.9,1.0,-12.4},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{20.9,1.0,-12.5},{20.9,1.0,-23.6},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.7,1.0,-6.3},{-47.5,1.0,-6.2},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-17.7,1.0,-12.2},{-20.8,1.0,-12.2},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.8,1.0,-12.3},{-20.7,1.0,-23.8},},color={0.19,0.70,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{-20.7,1.0,-12.4},{-20.6,1.0,-23.7},},color={0.86,0.10,0.09},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-12.2},{21.0,1.0,-12.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{21.0,1.0,-12.3},{21.0,1.7,-24.0},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},{points={{17.6,1.0,-6.2},{47.8,1.0,-6.2},},color={0.90,0.90,0.17},thickness=0.1,rotation={0,0,0},loop=false,square=false,},})
end

function drawAuto()
    local _thickness = 0.1
    local lines = {}
    for _, color in ipairs(_zoneHelper.zones()) do
        table.insert(lines, {
            points = _zoneHelper.zoneBorder({
                color = color,
                inset = _thickness / 2.0,
                clipToTable = true,
            }),
            color = color,
            thickness = _thickness,
            loop = true,
            square = true
        })
    end
    Global.setVectorLines(lines)
end
