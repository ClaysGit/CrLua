--- TI4 Graveyard bag v3.0, move objects inserted into this bag to correct locations.
-- @author original by Mantis
-- @author card handling by GarnetBear
-- @author May 2020 update by Darrell
-- @author v3 May 2020 update by Darrell
--
-- v3.1: safer transition when two cards forming a deck, and vice versa.

-- Token bags use inconsistent name to bag, hard code for simplicity.
local TOKEN_BAGS = {
    ['x1 Fighter Token'] = 'x1 Fighters Tokens Bag',
    ['x3 Fighter Token'] = 'x3 Fighters Tokens Bag',
    ['x1 Infantry'] = 'x1 Infantry Token Bag',
    ['x3 Infantry'] = 'x3 Infantry Token Bag',
    ['Commodities/Tradegoods x1'] = 'Commodities/Tradegoods x1 Bag',
    ['Commodities/Tradegoods x3'] = 'Commodities/Tradegoods x3 Bag'
}

-- Bag with faction tokens.
local PICK_FACTION_BAG = {
    'Pick a Race to Play',
    'Pick a Faction to Play',
}

-- Decks with discard location and card names.
local DECKS = {
    {
        name = 'Secret Objectives',
        shuffleOnDiscard = true,
        discardTransforms = {
            [6] = {
                position = { x = -70.7, y = 1.8, z = 11.6 },
                rotation = { x = 0, y = 90, z = 180 },
            },
            [8] = {
                position = { x = 83.3, y = 5.8, z = -12.5 },
                rotation = { x = 0, y = 90, z = 180 },
            }
        },
        cards = {
            'Adapt New Strategies',
            'Become the Gatekeeper',
            'Control the Region',
            'Cut Supply Lines',
            'Destroy Their Greatest Ship',
            'Establish A Perimeter',
            'Forge An Alliance',
            'Form a Spy Network',
            'Fuel the War Machine',
            'Gather A Mighty Fleet',
            'Learn Secrets of the Cosmos',
            'Make an Example of Their World',
            'Master the Laws of Physics',
            'Mine Rare Metals',
            'Monopolize Production',
            'Occupy the Seat of the Empire',
            'Spark a Rebellion',
            'Threaten Enemies',
            'Turn Their Fleets to Dust',
            'Unveil Flagship',
        },
    },
    {
        name = 'Agenda',
        discardTransforms = {
            [6] = {
                position = { x = -67.0, y = 1.7, z = 15.4 },
                rotation = { x = 0, y = 90, z = 0 },
            },
            [8] = {
                position = { x = 79.6, y = 5.7, z = -16.4 },
                rotation = { x = 0, y = 270, z = 0 },
            }
        },
        cards = {
            'Anti-Intellectual Revolution',
            'Archived Secret',
            'Arms Reduction',
            'Classified Document Leaks',
            'Colonial Redistribution',
            'Committee Formation',
            'Compensated Disarmament',
            'Conventions of War',
            'Core Mining',
            'Demilitarized Zone',
            'Economic Equality',
            'Enforced Travel Ban',
            'Executive Sanctions',
            'Fleet Regulations',
            'Holy Planet of Ixth',
            'Homeland Defense Act',
            'Imperial Arbiter',
            'Incentive Program',
            'Ixthian Artifact',
            'Judicial Abolishment',
            'Minister of Commerce',
            'Minister of Exploration',
            'Minister of Industry',
            'Minister of Peace',
            'Minister of Policy',
            'Minister of Sciences',
            'Minister of War',
            'Miscount Disclosed',
            'Mutiny',
            'New Constitution',
            'Prophecy of Ixth',
            'Public Execution',
            'Publicize Weapon Schematics',
            'Regulated Conscription',
            'Representative Government',
            'Research Team - Biotic',
            'Research Team - Cybernetic',
            'Research Team - Propulsion',
            'Research Team - Warfare',
            'Seed of an Empire',
            'Senate Sanctuary',
            'Shard of the Throne',
            'Shared Research',
            'Swords to Plowshares',
            'Terraforming Initiative',
            'The Crown of Emphidia',
            'The Crown of Thanlos',
            'Unconventional Measures',
            'Wormhole Reconstruction',
            'Wormhole Research',
        },
    },
    {
        name = 'Actions',
        discardTransforms = {
            [6] = {
                position = { x = -67.0, y = 1.7, z = 19.3 },
                rotation = { x = 0, y = 90, z = 0 },
            },
            [8] = {
                position = { x = 79.7, y = 5.7, z = -20.2 },
                rotation = { x = 0, y = 270, z = 0 },
            }
        },
        cards = {
            'Ancient Burial Sites',
            'Assassinate Representative',
            'Bribery',
            'Bunker',
            'Confusing Legal Text',
            'Construction Rider',
            'Courageous to the End',
            'Cripple Defenses',
            'Diplomacy Rider',
            'Direct Hit (1)',
            'Direct Hit (2)',
            'Direct Hit (3)',
            'Direct Hit (4)',
            'Disable',
            'Distinguished Councilor',
            'Economic Initiative',
            'Emergency Repairs',
            'Experimental Battlestation',
            'Fighter prototype',
            'Fire Team',
            'Flank Speed (1)',
            'Flank Speed (2)',
            'Flank Speed (3)',
            'Flank Speed (4)',
            'Focused Research',
            'Frontline Deployment',
            'Ghost Ship',
            'Imperial Rider',
            'In the Silence of Space',
            'Industrial Initiative',
            'Infiltrate',
            'Insubordination',
            'Intercept',
            'Leadership Rider',
            'Lost Star Chart',
            'Lucky Shot',
            'Maneuvering Jets (1)',
            'Maneuvering Jets (2)',
            'Maneuvering Jets (3)',
            'Maneuvering Jets (4)',
            'Mining Initiative',
            'Morale Boost (1)',
            'Morale Boost (2)',
            'Morale Boost (3)',
            'Morale Boost (4)',
            'Parley',
            'Plague',
            'Political Stability',
            'Politics Rider',
            'Public Disgrace',
            'Reactor Meltdown',
            'Reparations',
            'Repeal Law',
            'Rise of a Messiah',
            'Sabotage (1)',
            'Sabotage (2)',
            'Sabotage (3)',
            'Sabotage (4)',
            'Salvage',
            'Shields Holding (1)',
            'Shields Holding (2)',
            'Shields Holding (3)',
            'Shields Holding (4)',
            'Signal Jamming',
            'Skilled Retreat (1)',
            'Skilled Retreat (2)',
            'Skilled Retreat (3)',
            'Skilled Retreat (4)',
            'Spy',
            'Summit',
            'Tactical Bombardment',
            'Technology Rider',
            'Trade Rider',
            'Unexpected Action',
            'Unstable Planet',
            'Upgrade',
            'Uprising',
            'Veto',
            'War Effort',
            'Warfare Rider',
        },
    }
}

-------------------------------------------------------------------------------

local data = {
    tableSize = false,
    cardNameToDeckAttributes = false,
    objectNameToBagGuid = {},
    pickFactionTokenBagGuid = nil,
}

-------------------------------------------------------------------------------

--- Get discard pile transform (position, rotation) for given card.
local function getCardDestination(cardName)
    assert(type(cardName) == 'string')

    -- The first time a card is discarded create a fast-lookup name->deck map.
    if not data.cardNameToDeckAttributes then
        data.cardNameToDeckAttributes = {}
        for _, deckAttributes in ipairs(DECKS) do
            for _, cardName in ipairs(deckAttributes.cards) do
                data.cardNameToDeckAttributes[cardName] = deckAttributes
            end
        end
    end

    return data.cardNameToDeckAttributes[cardName]
end

--- Get bag for object.
local function getNonCardDestination(objectName)
    assert(type(objectName) == 'string')

    local bagGuid = data.objectNameToBagGuid[objectName]
    local bag = bagGuid and getObjectFromGUID(bagGuid)

    -- If we do not have a bag, look for one and remember it if found.  If more
    -- than one choose closest (reduces objects from flying over the table).
    -- Remember via guid to prevent trying to access a deleted bag later.
    -- Do not store "nacks" for objects with no bag, it could be unpacked!
    if not bag and string.len(objectName) > 0 then
        local acceptBag = {
            [objectName] = true,
            [objectName .. 's Bag'] = true,
            [TOKEN_BAGS[objectName] or false] = true
        }
        local bestDistance = false
        for _, candidate in ipairs(getAllObjects()) do
            local tag = candidate.tag
            local name = candidate.getName()
            if (tag == 'Bag' or tag == 'Infinite') and acceptBag[name] then
                local p1 = self.getPosition()
                local p2 = candidate.getPosition()
                local dSq = ((p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2)
                if not bestDistance or dSq < bestDistance then
                    bag = candidate
                    bestDistance = dSq
                end
            end
        end
        data.objectNameToBagGuid[objectName] = bag and bag.getGUID()
    end

    -- If "FACTION Owner Token" and no bag, put in the "Pick a Race to Play" bag
    -- (scan again to make earlier, more common scan do less work).
    if not bag and string.match(objectName, ' Owner Token$') then
        local bagGuid = data.pickFactionTokenBagGuid
        bag = bagGuid and getObjectFromGUID(bagGuid)
        if not bag then
            for _, candidate in ipairs(getAllObjects()) do
                for _, pickFactionBag in ipairs(PICK_FACTION_BAG) do
                    if candidate.getName() == pickFactionBag then
                        bag = candidate
                        break
                    end
                end
            end
        end
        data.pickFactionTokenBagGuid = bag and bag.getGUID()
    end

    return bag
end

-------------------------------------------------------------------------------

--- Put cards into the deck discard pile.
function putCard(cardObject, deckAttributes, index)
    assert(type(cardObject) == 'userdata' and cardObject.tag == 'Card' and type(deckAttributes) == 'table')

    local function getDiscardPile()
        local discardTransform = deckAttributes.discardTransforms[data.tableSize]
        local p = discardTransform.position
        local castPosition = { x = p.x, y = p.y + 4, z = p.z }
        local hits = Physics.cast({
            origin       = castPosition,
            direction    = { x = 0, y = -1, z = 0 },
            type         = 1,  -- ray
            max_distance = 6
        })
        local firstPoint = false
        local deckOrCard = false
        for _, hit in ipairs(hits) do
            firstPoint = firstPoint or hit.point
            if hit.hit_object.tag == 'Card' or hit.hit_object.tag == 'Deck' then
                deckOrCard = hit.hit_object
                break
            end
        end
        return deckOrCard, firstPoint
    end

    local discardTransform = deckAttributes.discardTransforms[data.tableSize]
    local deckOrCard, firstPoint = getDiscardPile()

    -- Place into discard pile, or drop to start a new one.
    -- (Move to above discard pile even if will putObject so puts on top.)
    local cardPosition = firstPoint or castPosition
    cardPosition.y = cardPosition.y + 0.2 * (index or 1)
    cardObject.setPosition(cardPosition)
    cardObject.setRotation(discardTransform.rotation)
    if deckOrCard then
        if deckOrCard.tag == 'Deck' and not deckOrCard.spawning then
            deckOrCard.putObject(cardObject)
        elseif deckOrCard.tag == 'Card' then
            deckOrCard.putObject(cardObject)
        end
    end

    if deckAttributes.shuffleOnDiscard then
        local function delayedShuffle()
            local deckOrCard, firstPoint = getDiscardPile()
            if deckOrCard and deckOrCard.tag == 'Deck' and not deckOrCard.spawning then
                deckOrCard.shuffle()
            end
        end
        Wait.time(delayedShuffle, 1)
    end
end

--- Given a deck, return guid list for cards that should be put elsewhere.
-- Does not mutate the deck, ok to use the onObjectEnterContainer object.
function shouldPutCardsFromDeck(deckObject)
    assert(type(deckObject) == 'userdata' and deckObject.tag == 'Deck')
    local cardGuids = false
    for i, card in ipairs(deckObject.getObjects()) do
        local deckAttributes = getCardDestination(card.name)
        if deckAttributes then
            cardGuids = cardGuids or {}
            table.insert(cardGuids, card.guid)
        end
    end
    return cardGuids
end

--- Put cards from a deck into their respective discard piles.
-- Mutates the deck, must remove from graveyard bag first!
function putCardsFromDeck(deckObject, cardGuids)
    assert(type(deckObject) == 'userdata' and deckObject.tag == 'Deck' and type(cardGuids) == 'table')
    local position = deckObject.getPosition()
    local cardsPerDeck = {}
    for i, cardGuid in ipairs(cardGuids) do
        if deckObject.tag == 'Deck' then
            local cardObject = deckObject.takeObject({
                guid = cardGuid,
                position = { x = position.x, y = position.y + 1 + i, z = position.z },
            })
            local deckAttributes = getCardDestination(cardObject.getName())
            cardsPerDeck[deckAttributes] = (cardsPerDeck[deckAttributes] or 0) + 1
            putCard(cardObject, deckAttributes, cardsPerDeck[deckAttributes])
            deckObject = deckObject.remainder or deckObject
        elseif deckObject.tag == 'Card' and deckObject.getGUID() == cardGuid then
            local cardObject = deckObject
            local deckAttributes = getCardDestination(cardObject.getName())
            cardsPerDeck[deckAttributes] = (cardsPerDeck[deckAttributes] or 0) + 1
            putCard(cardObject, deckAttributes, cardsPerDeck[deckAttributes])
            deckObject = nil
        end
    end
    -- Any any remaining card(s) they have nowhere to go.  Put in self.
    if deckObject then
        self.putObject(deckObject)
    end
end

-------------------------------------------------------------------------------

function onLoad(saveState)
    -- Hard code deck positions for "normal" table as well as "8 player madness".
    -- I started going down the road of finding the decks by name on first load,
    -- then using onSave -> onLoad(saveState) to remember when loading games in
    -- progress where the deck names might not be there... but be simple & safe.
    local commandSheetCount = 0
    for _, object in ipairs(getAllObjects()) do
        if string.match(object.getName(), '^Command Sheet %(%a+%)$') then
            commandSheetCount = commandSheetCount + 1
        end
    end
    data.tableSize = commandSheetCount == 8 and 8 or 6  -- only allow 8 or 6
end

function onObjectEnterContainer(container, enterObject)
    if container == self then

        local function getEnterObject()
            local bounds = self.getBounds()
            return self.takeObject({
                guid = enterObject.getGUID(),
                position = {
                    x = bounds.center.x,
                    y = bounds.center.y + (bounds.size.y / 2) + 2,
                    z = bounds.center.z,
                }
            })
        end

        if enterObject.tag == 'Card' then
            local deckAttributes = getCardDestination(enterObject.getName())
            if deckAttributes then
                putCard(getEnterObject(), deckAttributes)
            end
        elseif enterObject.tag == 'Deck' then
            local shouldPut = shouldPutCardsFromDeck(enterObject)
            if shouldPut then
                putCardsFromDeck(getEnterObject(), shouldPut)
            end
        else
            local bag = getNonCardDestination(enterObject.getName())
            if bag then
                bag.putObject(getEnterObject())
            end
        end
    end
end
