--- TI4 Graveyard bag v3.0, move objects inserted into this bag to correct locations.
-- @author original by Mantis
-- @author card handling by GarnetBear
-- @author May 2020 update by Darrell

-- Token bags use inconsistent name to bag, hard code for simplicity.
local TOKEN_BAGS = {
    ['x1 Fighter Token'] = 'x1 Fighters Tokens Bag',
    ['x3 Fighter Token'] = 'x3 Fighters Tokens Bag',
    ['x1 Infantry'] = 'x1 Infantry Token Bag',
    ['x3 Infantry'] = 'x3 Infantry Token Bag',
    ['Commodities/Tradegoods x1'] = 'Commodities/Tradegoods x1 Bag',
    ['Commodities/Tradegoods x3'] = 'Commodities/Tradegoods x3 Bag'
}

-- Decks with discard location and card names.
local DECKS = {
    {
        name = 'Secret Objectives',
        shuffleOnDiscard = true,
        discardTransforms = {
            [6] = {
                position = { x = -70.7, y = 1.8, z = 11.6 },
                rotation = { x = 0, y = 90, z = 180 },
            },
            [8] = {
                position = { x = 83.3, y = 5.8, z = -12.5 },
                rotation = { x = 0, y = 90, z = 180 },
            }
        },
        cards = {
            'Adapt New Strategies',
            'Become the Gatekeeper',
            'Control the Region',
            'Cut Supply Lines',
            'Destroy Their Greatest Ship',
            'Establish A Perimeter',
            'Forge An Alliance',
            'Form a Spy Network',
            'Fuel the War Machine',
            'Gather A Mighty Fleet',
            'Learn Secrets of the Cosmos',
            'Make an Example of Their World',
            'Master the Laws of Physics',
            'Mine Rare Metals',
            'Monopolize Production',
            'Occupy the Seat of the Empire',
            'Spark a Rebellion',
            'Threaten Enemies',
            'Turn Their Fleets to Dust',
            'Unveil Flagship',
        },
    },
    {
        name = 'Agenda',
        discardTransforms = {
            [6] = {
                position = { x = -67.0, y = 1.7, z = 15.4 },
                rotation = { x = 0, y = 90, z = 0 },
            },
            [8] = {
                position = { x = 79.6, y = 5.7, z = -16.4 },
                rotation = { x = 0, y = 270, z = 0 },
            }
        },
        cards = {
            'Anti-Intellectual Revolution',
            'Archived Secret',
            'Arms Reduction',
            'Classified Document Leaks',
            'Colonial Redistribution',
            'Committee Formation',
            'Compensated Disarmament',
            'Conventions of War',
            'Core Mining',
            'Demilitarized Zone',
            'Economic Equality',
            'Enforced Travel Ban',
            'Executive Sanctions',
            'Fleet Regulations',
            'Holy Planet of Ixth',
            'Homeland Defense Act',
            'Imperial Arbiter',
            'Incentive Program',
            'Ixthian Artifact',
            'Judicial Abolishment',
            'Minister of Commerce',
            'Minister of Exploration',
            'Minister of Industry',
            'Minister of Peace',
            'Minister of Policy',
            'Minister of Sciences',
            'Minister of War',
            'Miscount Disclosed',
            'Mutiny',
            'New Constitution',
            'Prophecy of Ixth',
            'Public Execution',
            'Publicize Weapon Schematics',
            'Regulated Conscription',
            'Representative Government',
            'Research Team - Biotic',
            'Research Team - Cybernetic',
            'Research Team - Propulsion',
            'Research Team - Warfare',
            'Seed of an Empire',
            'Senate Sanctuary',
            'Shard of the Throne',
            'Shared Research',
            'Swords to Plowshares',
            'Terraforming Initiative',
            'The Crown of Emphidia',
            'The Crown of Thanlos',
            'Unconventional Measures',
            'Wormhole Reconstruction',
            'Wormhole Research',
        },
    },
    {
        name = 'Actions',
        discardTransforms = {
            [6] = {
                position = { x = -67.0, y = 1.7, z = 19.3 },
                rotation = { x = 0, y = 90, z = 0 },
            },
            [8] = {
                position = { x = 79.7, y = 5.7, z = -20.2 },
                rotation = { x = 0, y = 270, z = 0 },
            }
        },
        cards = {
            'Ancient Burial Sites',
            'Assassinate Representative',
            'Bribery',
            'Bunker',
            'Confusing Legal Text',
            'Construction Rider',
            'Courageous to the End',
            'Cripple Defenses',
            'Diplomacy Rider',
            'Direct Hit (1)',
            'Direct Hit (2)',
            'Direct Hit (3)',
            'Direct Hit (4)',
            'Disable',
            'Distinguished Councilor',
            'Economic Initiative',
            'Emergency Repairs',
            'Experimental Battlestation',
            'Fighter prototype',
            'Fire Team',
            'Flank Speed (1)',
            'Flank Speed (2)',
            'Flank Speed (3)',
            'Flank Speed (4)',
            'Focused Research',
            'Frontline Deployment',
            'Ghost Ship',
            'Imperial Rider',
            'In the Silence of Space',
            'Industrial Initiative',
            'Infiltrate',
            'Insubordination',
            'Intercept',
            'Leadership Rider',
            'Lost Star Chart',
            'Lucky Shot',
            'Maneuvering Jets (1)',
            'Maneuvering Jets (2)',
            'Maneuvering Jets (3)',
            'Maneuvering Jets (4)',
            'Mining Initiative',
            'Morale Boost (1)',
            'Morale Boost (2)',
            'Morale Boost (3)',
            'Morale Boost (4)',
            'Parley',
            'Plague',
            'Political Stability',
            'Politics Rider',
            'Public Disgrace',
            'Reactor Meltdown',
            'Reparations',
            'Repeal Law',
            'Rise of a Messiah',
            'Sabotage (1)',
            'Sabotage (2)',
            'Sabotage (3)',
            'Sabotage (4)',
            'Salvage',
            'Shields Holding (1)',
            'Shields Holding (2)',
            'Shields Holding (3)',
            'Shields Holding (4)',
            'Signal Jamming',
            'Skilled Retreat (1)',
            'Skilled Retreat (2)',
            'Skilled Retreat (3)',
            'Skilled Retreat (4)',
            'Spy',
            'Summit',
            'Tactical Bombardment',
            'Technology Rider',
            'Trade Rider',
            'Unexpected Action',
            'Unstable Planet',
            'Upgrade',
            'Uprising',
            'Veto',
            'War Effort',
            'Warfare Rider',
        },
    }
}

-------------------------------------------------------------------------------

local data = {
    tableSize = false,
    cardNameToDeckAttributes = false,
    objectNameToBagGuid = {},
    pickFactionTokenBagGuid = nil,
}

-------------------------------------------------------------------------------

--- Get discard pile transform (position, rotation) for given card.
local function getCardDestination(cardName)
    assert(type(cardName) == 'string')

    -- The first time a card is discarded create a fast-lookup name->deck map.
    if not data.cardNameToDeckAttributes then
        data.cardNameToDeckAttributes = {}
        for _, deckAttributes in ipairs(DECKS) do
            for _, cardName in ipairs(deckAttributes.cards) do
                data.cardNameToDeckAttributes[cardName] = deckAttributes
            end
        end
    end

    return data.cardNameToDeckAttributes[cardName]
end

--- Get bag for object.
local function getNonCardDestination(objectName)
    assert(type(objectName) == 'string')

    local bagGuid = data.objectNameToBagGuid[objectName]
    local bag = bagGuid and getObjectFromGUID(bagGuid)

    -- If we do not have a bag, look for one and remember it if found.  If more
    -- than one choose closest (reduces objects from flying over the table).
    -- Remember via guid to prevent trying to access a deleted bag later.
    -- Do not store "nacks" for objects with no bag, it could be unpacked!
    if not bag and string.len(objectName) > 0 then
        local acceptBag = {
            [objectName] = true,
            [objectName .. 's Bag'] = true,
            [TOKEN_BAGS[objectName] or false] = true
        }
        local bestDistance = false
        for _, candidate in ipairs(getAllObjects()) do
            local tag = candidate.tag
            local name = candidate.getName()
            if (tag == 'Bag' or tag == 'Infinite') and acceptBag[name] then
                local p1 = self.getPosition()
                local p2 = candidate.getPosition()
                local dSq = ((p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2)
                if not bestDistance or dSq < bestDistance then
                    bag = candidate
                    bestDistance = dSq
                end
            end
        end
        data.objectNameToBagGuid[objectName] = bag and bag.getGUID()
    end

    -- If "FACTION Owner Token" and no bag, put in the "Pick a Race to Play" bag
    -- (scan again to make earlier, more common scan do less work).
    if not bag and string.match(objectName, ' Owner Token$') then
        local bagGuid = data.pickFactionTokenBagGuid
        bag = bagGuid and getObjectFromGUID(bagGuid)
        if not bag then
            for _, candidate in ipairs(getAllObjects()) do
                if candidate.getName() == 'Pick a Race to Play' then
                    bag = candidate
                    break
                end
            end
        end
        data.pickFactionTokenBagGuid = bag and bag.getGUID()
    end

    return bag
end

-------------------------------------------------------------------------------

--- Put cards into the deck discard pile.
local function putCard(cardObject, deckAttributes)
    assert(cardObject.tag == 'Card' and deckAttributes.cards)

    -- Find the discard pile.
    local discardTransform = deckAttributes.discardTransforms[data.tableSize]
    local p = discardTransform.position
    local castPosition = { x = p.x, y = p.y + 2, z = p.z }
    local hits = Physics.cast({
        origin       = castPosition,
        direction    = { x = 0, y = -1, z = 0 },
        type         = 1,  -- ray
        max_distance = 4
    })
    local firstPoint = false
    local deck = false
    for _, hit in ipairs(hits) do
        firstPoint = firstPoint or hit.point
        if hit.hit_object.tag == 'Card' or hit.hit_object.tag == 'Deck' then
            deck = hit.hit_object
            break
        end
    end

    -- Move card to be above the discard pile.  If there is a discard pile,
    -- this ensures it goes on top.  If no pile, it drops to start a new one.
    local cardPosition = firstPoint or castPosition
    cardPosition.y = cardPosition.y + 0.1
    cardObject.setPosition(cardPosition)
    cardObject.setRotation(discardTransform.rotation)
    if deck then
        deck.putObject(cardObject)
        if deckAttributes.shuffleOnDiscard then
            deck.shuffle()
        end
    end
end

--- Given a deck, return guid list for cards that should be put elsewhere.
-- Does not mutate the deck, ok to use the onObjectEnterContainer object.
local function shouldPutCardsFromDeck(deckObject)
    local cardGuids = false
    for i, card in ipairs(deckObject.getObjects()) do
        local deckAttributes = getCardDestination(card.name)
        if deckAttributes then
            cardGuids = cardGuids or {}
            table.insert(cardGuids, card.guid)
        end
    end
    return cardGuids
end

--- Put cards from a deck into their respective discard piles.
-- Mutates the deck, must remove from graveyard bag first!
local function putCardsFromDeck(deckObject, cardGuids)
    for _, cardGuid in ipairs(cardGuids) do
        if deckObject.getQuantity() > 0 then
            local cardObject = deckObject.takeObject({ guid = cardGuid })
            local deckAttributes = getCardDestination(cardObject.getName())
            putCard(cardObject, deckAttributes)
        end
    end
end

-------------------------------------------------------------------------------

function onLoad(saveState)
    -- Hard code deck positions for "normal" table as well as "8 player madness".
    -- I started going down the road of finding the decks by name on first load,
    -- then using onSave -> onLoad(saveState) to remember when loading games in
    -- progress where the deck names might not be there... but be simple & safe.
    local commandSheetCount = 0
    for _, object in ipairs(getAllObjects()) do
        if string.match(object.getName(), '^Command Sheet %(%a+%)$') then
            commandSheetCount = commandSheetCount + 1
        end
    end
    data.tableSize = commandSheetCount == 8 and 8 or 6  -- only allow 8 or 6
end

function onObjectEnterContainer(container, enterObject)
    if container ~= self then
        return
    end

    -- Objects need to be removed from this graveyard bag before they can move
    -- to their final location.  Take them from here to a position above the
    -- graveyard bag (to prevent them from falling into a different bag).
    local bounds = self.getBounds()
    local takeParameters = {
        position = {
            x = bounds.center.x,
            y = bounds.center.y + (bounds.size.y / 2) + 2,
            z = bounds.center.z
        }
    }

    if enterObject.tag == 'Card' then
        local deckAttributes = getCardDestination(enterObject.getName())
        if deckAttributes then
            putCard(self.takeObject(takeParameters), deckAttributes)
        end
    elseif enterObject.tag == 'Deck' then
        local shouldPut = shouldPutCardsFromDeck(enterObject)
        if shouldPut then
            local deckObject = self.takeObject(takeParameters)
            putCardsFromDeck(deckObject, shouldPut)
            if deckObject.getQuantity() > 0 then
                self.putObject(deckObject)
            end
        end
    else
        local bag = getNonCardDestination(enterObject.getName())
        if bag then
            bag.putObject(self.takeObject(takeParameters))
        end
    end
end
