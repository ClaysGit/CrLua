function onLoad(save_state)
    print('onLoad')
    Global.setVectorLines({})
    CrLua.UnitTest.runTests('CrLua', CrLua, true)
end

function onDrop(playerColor)
    print('onDrop')

    -- Set self color to zone color.
    CrLua.TI4.Zone.updateZones()
    local zone = CrLua.TI4.Zone.insideWhichPlayerZone(self.getPosition())
    local zoneColor = zone and CrLua.TI4.Zone.color(zone)
    local zoneFaction = zone and CrLua.TI4.Zone.faction(zone)
    self.setColorTint(zoneColor or 'Grey')
    print('onDrop: zone faction = "' .. (zoneFaction or '<nil>') .. '"')

    local position = self.getPosition()
    local selfHex = CrLua.TI4.Hex.fromPosition(position)
    local vectorLines = {
        CrLua.TI4.Hex.vectorLines(selfHex, {
            color = { 1, 0, 0 },
            thickness = 0.6
        })
    }

    local neighborHexes = CrLua.TI4.Hex.neighbors(selfHex)
    for _, neighborHex in ipairs(neighborHexes) do
        local lines = CrLua.TI4.Hex.vectorLines(neighborHex, {
            color = { 0, 1, 0 },
            thickness = 0.4
        })
        table.insert(vectorLines, lines)
    end

    -- Get all wormholes, add new 'hex' field.
    local allWormholes = CrLua.TI4.Wormhole.findWormholes()
    for _, wormhole in ipairs(allWormholes) do
        local position = wormhole.object.getPosition()
        wormhole.hex = CrLua.TI4.Hex.fromPosition(position)
    end

    local selfWormholeTypeSet = {}
    for _, wormhole in ipairs(allWormholes) do
        if wormhole.hex == selfHex then
            selfWormholeTypeSet[wormhole.type] = true
        end
    end
    CrLua.Log.d('selfWormholeTypeSet', selfWormholeTypeSet)

    local wormholeNeighbors = {}
    for _, wormhole in ipairs(allWormholes) do
        if selfWormholeTypeSet[wormhole.type] and wormhole.hex ~= selfHex then
            table.insert(wormholeNeighbors, wormhole)
        end
    end

    for _, wormhole in ipairs(wormholeNeighbors) do
        local lines = CrLua.TI4.Hex.vectorLines(wormhole.hex, {
            color = { 0, 0, 1 },
            thickness = 0.2
        })
        table.insert(vectorLines, lines)
    end

    Global.setVectorLines(vectorLines)



    for _, object in ipairs(getAllObjects()) do
        local unit = CrLua.TI4.Unit.fromObject(object)
        if unit then
            print ('xxx color=' .. unit.color .. ' unitName=' .. unit.unitName)
        end
    end
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Polygon>
#include <~/CrLua/RedBlobHex>
#include <~/CrLua/Table>
#include <~/CrLua/TI4/Hex>
#include <~/CrLua/TI4/Unit>
#include <~/CrLua/TI4/WormHole>
#include <~/CrLua/TI4/Zone>
#include <~/CrLua/TTS/Object>
#include <~/CrLua/TTS/Player>
#include <~/CrLua/UnitTest>
#include <~/CrLua/Util>

CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)
CrLua.assertRequired() -- do this BEFORE lock
CrLua.lock()
