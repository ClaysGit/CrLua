--- Prepare table for Franken!
-- @author Darrell

-- Per-zone:
-- Frankenstein Checklist
-- 2 bags

-- TI4 Frankenstein MultiRoller

local CREATE_BAGS = {
    {
        position = { 4, 3, -6 },
        color = 'Yellow'
    },
    {
        position = {0,3,-6},
        color = 'Red'
    },
    {
        position = {-4,3,-6},
        color = 'Green'
    },
    {
        position = {4,3,6},
        color = 'Purple'
    },
    {
        position = {0,3,6},
        color = 'Blue'
    },
    {
        position = {-4,3,6},
        color = 'White'
    },
}

-- Unpack items directly to these positions.
local UNPACK_TRANSFORMS = {
    ['Faction Sheets/Tokens'] = {
        position = {70, 2, 18},
    },
    ['Base Unit Tiles'] = {
        position = {70, 2, 15},
    },
    ['Non Draft Parts'] = {
        position = {70, 2, 12},
    },
    ['A. Draft'] = {
        position = {79, 2, -17},
        rotation = {0, 90, 0},
    },
    ['B. Build Galaxy'] = {
        position = {76, 3, -17},
        rotation = {0, 90, 0},
    },
    ['C. Reveal'] = {
        position = {73, 4, -17},
        rotation = {0, 90, 0},
    },
    ['D. Build Factions'] = {
        position = {70, 5, -17},
        rotation = {0, 90, 0},
    },
    ['Home Planet Cards'] = {
        position = {61.23, 1.85, 2.05},
        rotation = {0, 90, 0},
    },
}

local UNPACK_TO_BAGS = {
    ['Promissory Notes'] = 2,
    ['Home Systems'] = 2,
    ['Flagships'] = 2,
    ['Starting Techs'] = 2,
    ['Commodity Tiles'] = 2,
    ['Starting Units'] = 2,
    ['Faction Abilities'] = 3,
    ['Faction Techs'] = 3,
}

local EXTERNAL_TO_BAGS = {
    ['Blue Planet Tiles'] = 3,
    ['Red Anomaly Tiles'] = 2
}

local CLONE_TO_HIDDEN = {
    'Frankenstein Checklist',
}

local HIDDEN_ZONE_SCALE = {20, 6, 10}

local HIDDEN_ZONE_TRANSFORMS = {
    White = {
        position = {-38, 3, 18},
        rotation = {0, 0, 0},
    },
    Blue = {
        position = {-12, 3, 18},
        rotation = {0, 0, 0},
    },
    Purple = {
        position = {37, 3, 18},
        rotation = {0, 0, 0},
    },
    Yellow = {
        position = {38, 3, -18},
        rotation = {0, 180, 0},
    },
    Red = {
        position = {12, 3, -18},
        rotation = {0, 180, 0},
    },
    Green = {
        position = {-37, 3, -18},
        rotation = {0, 180, 0},
    },
}

local HIDDEN_ZONE_NAME = 'FrankenZone'

local MAX_UI_ROWS = 25

local _useToggles = false
local _toggles = false

-------------------------------------------------------------------------------

local function getEntryGuid(container, name)
    for _, entry in ipairs(container.getObjects()) do
        if entry.name == name then
            return entry.guid
        end
    end
    error('no entry "' .. name .. '"')
end

local function takeToAbove(container, name)
    local guid = getEntryGuid(container, name)
    local pos = container.getPosition()
    local object = self.takeObject({
        position = { pos.x, pos.y + 5, pos.z },
        guid = guid
    })
    assert(object)
    return object
end

local function packFactions()
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Bag' and object.getName() == 'Factions' and object.getVar('packBoxes') then
            object.call('packBoxes')
            break
        end
    end
end

local function createHiddenZones()
    for color, transform in pairs(HIDDEN_ZONE_TRANSFORMS) do
        local hiddenZone = spawnObject({
            type              = 'FogOfWarTrigger',
            position          = transform.position,
            rotation          = transform.rotation,
            scale             = HIDDEN_ZONE_SCALE,
            callback_fucntion = nil,
            sound             = false,
            params            = {},
            snap_to_grid      = false,
        })
        hiddenZone.setValue(color)
        hiddenZone.setName(HIDDEN_ZONE_NAME)
        coroutine.yield(0)
    end
end

local function cloneToHidden(name)
    local object = takeToAbove(self, name)
    coroutine.yield(0)
    local json = object.getJSON()
    destroyObject(object)

    for _, transform in pairs(HIDDEN_ZONE_TRANSFORMS) do
        local clone = spawnObjectJSON({
            json = json,
            position = transform.position,
            rotation = transform.rotation,
            sound             = false,
            snap_to_grid      = false,
        })
        clone.use_grid = false
        clone.use_snap_points = false
        clone.sticky = false
        coroutine.yield(0)
    end
end

local function createHiddenBags()
    for _, transform in pairs(HIDDEN_ZONE_TRANSFORMS) do
        local p = transform.position
        for i = 1, 2 do
            local bag = spawnObject({
                type = 'Bag',
                position = { p[1] + 2 + (i * 3), p[2], p[3] },
                sound = false,
                snap_to_grid = false,
            })
            bag.use_grid = false
            bag.use_snap_points = false
            bag.sticky = false
            coroutine.yield(0)
        end
        coroutine.yield(0)
    end
end

local function unpackToTable()
    for name, transform in pairs(UNPACK_TRANSFORMS) do
        local guid = getEntryGuid(self, name)
        self.takeObject({
            position = transform.position,
            rotation = transform.rotation,
            guid = guid,
        })
        coroutine.yield(0)
    end
end

local function replaceMultiRollers(name)
    local toReplace = {}
    for _, object in ipairs(getAllObjects()) do
        if string.match(object.getName(), '^TI4 MultiRoller') then
            table.insert(toReplace, object)
        end
    end

    -- MultiRoller is now Franken aware.
    for _, object in ipairs(toReplace) do
        object.call('setFranken')
    end
end

-------------------------------------------------------------------------------

local function createBags()
    local result = {}
    for _, rule in ipairs(CREATE_BAGS) do
        local bag = spawnObject({
            type              = 'Bag',
            position          = rule.position,
            sound             = false,
            snap_to_grid      = false,
        })
        bag.use_grid = false
        bag.use_snap_points = false
        bag.setColorTint(rule.color)
        table.insert(result, bag)
    end
    return result
end

local function unpackToBags(bags)
    for name, count in pairs(UNPACK_TO_BAGS) do
        local container = takeToAbove(self, name)
        assert(container, 'missing ' .. name)
        coroutine.yield(0)
        container.setLock(true)

        while container.spawning do
            coroutine.yield(0)
        end
        coroutine.yield(0)

        container.shuffle()

        -- Get available guids (after shuffle).
        -- IF TOO FEW, TAKE WILL GET AN ENTRY AT RANDOM.
        local guids = {}
        for _, entry in ipairs(container.getObjects()) do
            if (not _useToggles) or _toggles[entry.guid] then
                table.insert(guids, entry.guid)
            end
        end

        if #guids < (#bags * count) then
            error('too few "' .. name .. '" entries selected')
        end

        for _, bag in ipairs(bags) do
            for _ = 1, count do
                local pos = bag.getPosition()
                local object = container.takeObject({
                    guid = table.remove(guids),
                    position = { x = pos.x, y = pos.y + 5, z = pos.z },
                    smooth = false,
                    callback_function = function(object) bag.putObject(object) end
                })
                coroutine.yield(0)
            end
            coroutine.yield(0)
        end

        for _ = 1, 30 do
            coroutine.yield(0)
        end
        container.setLock(false)
        self.putObject(container)
    end
end

-------------------------------------------------------------------------------

function doSetup()
    startLuaCoroutine(self, 'doSetupCoroutine')
end

function doSetupCoroutine()
    packFactions()
    coroutine.yield(0)

    local bags = createBags()
    coroutine.yield(0)

    unpackToBags(bags)
    coroutine.yield(0)

    createHiddenZones()
    coroutine.yield(0)

    createHiddenBags()
    coroutine.yield(0)

    unpackToTable()
    coroutine.yield(0)

    local pos = self.getPosition()
    for _, name in ipairs(CLONE_TO_HIDDEN) do
        cloneToHidden(name)
        coroutine.yield(0)
    end

    replaceMultiRollers()
    coroutine.yield(0)

    return 1
end

function removeHiddenZones()
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Fog' and object.getName() == HIDDEN_ZONE_NAME then
            destroyObject(object)
        end
    end
end

function onLoad(saveState)
    local function doSimpleSetup()
        _useToggles = false
        doSetup()
    end
    self.addContextMenuItem('Setup Franken', doSimpleSetup)
    self.addContextMenuItem('Custom Franken..', createCustomSelectionUi)
    self.addContextMenuItem('Remove hidden zones', removeHiddenZones)

    createCustomSelectionUi()  -- TODO DELE XXX
end

-------------------------------------------------------------------------------

function createCustomSelectionUi()
    startLuaCoroutine(self, 'createCustomSelectionUiLuaCoroutine')
end

function createCustomSelectionUiLuaCoroutine()
    local function sortEntries(a, b)
        return a.name < b.name
    end
    local nameList = {}
    local nameToEntries = {}
    for name, count in pairs(UNPACK_TO_BAGS) do
        table.insert(nameList, name)
        local object = takeToAbove(self, name)
        assert(object)
        coroutine.yield(0)
        local entries = {}
        for _, entry in ipairs(object.getObjects()) do
            table.insert(entries, {
                guid = entry.guid,
                name = entry.name
            })
        end
        table.sort(entries, sortEntries)
        nameToEntries[name] = entries
        self.putObject(object)
        coroutine.yield(0)
    end

    if not _toggles then
        _toggles = {}
        for name, entries in pairs(nameToEntries) do
            for _, entry in ipairs(entries) do
                if entry.guid then
                    _toggles[entry.guid] = true
                end
            end
        end
    end

    -- Split into columns, wrapping long lists.
    -- Place a header as first entry or false for wrapped.
    local cols = {}
    table.sort(nameList)
    for _, name in ipairs(nameList) do
        local entries = nameToEntries[name]
        local entriesPerColumn = #entries + 1  -- +1 for heading
        local div = 1
        while entriesPerColumn > MAX_UI_ROWS do
            div = div + 1
            entriesPerColumn = math.ceil(#entries / div) + 1
        end
        local col = {{ name = name }}
        for _, entry in ipairs(entries) do
            table.insert(col, entry)
            if #col >= entriesPerColumn then
                table.insert(cols, col)
                col = {{ name = '...' }}
            end
        end
        if #col > 1 then
            table.insert(cols, col)
        end
    end

    local numCols = #cols
    local numRows = 1
    for _, col in ipairs(cols) do
        numRows = math.max(numRows, #col)
    end
    --print('ui ' .. numCols .. 'x' .. numRows)

    numRows = numRows + 1
    local centerColIdx = math.floor(numCols / 2)
    cols[centerColIdx][numRows] = { name = 'Cancel', id = 'cancel' }
    cols[centerColIdx+1][numRows] = { name = 'Unpack', id = 'doCustomSetup' }

    local function getValue(rowIdx, colIdx)
        local col = cols[colIdx]
        return col and col[rowIdx]
    end

    local function makeCell(rowIdx, colIdx)
        local value = getValue(rowIdx, colIdx)
        assert(not value or value.name)
        return {
            tag = 'Cell',
            children = value and {
                {
                    tag = (value.guid and 'Toggle') or (value.id and 'Button') or 'Text',
                    attributes = {
                        id = value.guid or value.id or nil,
                        isOn = value.guid and (_toggles[value.guid] or false) or nil,
                    },
                    value = value.name,
                }
            } or nil
        }
    end

    local rows = {}
    for rowIdx = 1, numRows do
        local row = {}
        for colIdx = 1, numCols do
            if getValue(rowIdx, colIdx) ~= false then
                table.insert(row, makeCell(rowIdx, colIdx))
            end
        end
        table.insert(rows, {
            tag = 'Row',
            children = row
        })
    end

    local tableLayout = {
        tag = 'TableLayout',
        attributes = {
            cellPadding = '15 15 0 0',
        },
        children = rows
    }

    local defaults = {
        tag = 'Defaults',
        children = {
            {
                tag = 'Text',
                attributes = {
                    fontSize = 16,
                    fontStyle = 'Bold',
                }
            },
            {
                tag = 'Toggle',
                attributes = {
                    fontSize = 14,
                    onValueChanged = 'onToggleValueChanged',
                }
            },
            {
                tag = 'Button',
                attributes = {
                    fontSize = 20,
                    fontStyle = 'Bold',
                    onClick = 'onButtonClick'
                }
            },
        }
    }

    local panel = {
        tag = 'Panel',
        attributes = {
            id = 'ui',
            active = 'true',
            position = '0 -' .. (numRows * 25) .. ' -350',
            rotation = '180 180 0',
            width = numCols * 200,
            height = numRows * 50,
            color = '#ffffff',
        },
        children = {
            tableLayout
        }
    }

    self.UI.setXmlTable({ defaults, panel })
    return 1
end

function onButtonClick(player, input, id)
    if id == 'cancel' then
        self.UI.setXmlTable({{}})
    elseif id == 'doCustomSetup' then
        self.UI.setXmlTable({{}})
        _useToggles = true
        doSetup()
    else
        error('unknown id "' .. id .. '"')
    end
end

function onToggleValueChanged(player, value, id)
    local valueAsBool = string.lower(value) == 'true' and true or false
    assert(type(valueAsBool) == 'boolean')
    _toggles[id] = valueAsBool or nil
end


-------------------------------------------------------------------------------

local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
