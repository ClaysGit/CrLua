--- Player zones.
-- @author Darrell

-- Users should copy this getHelperClient function, and use via:
--
-- local zoneHelper = getHelperClient('TI4_ZONE_HELPER')
-- local zoneColor = zoneHelper.zoneFromPosition(object.getPosition())
-- local guidToZoneColor = zoneHelper.zonesFromPositions(guidToPosition)
--
-- Where one can call any main function in this file via the helper.
function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local DEFAULT_ZONES = {
    [6] = {
        zones = {
            [1] = {{-51, 6}, {-51, 49}, {-21, 49}, {-21, 6}},
            [2] = {{-21, 6}, {-21, 49}, { 21, 49}, {21, 6}, {1.5, 21}, {-1.5, 21}},
            [3] = {{21, 6}, {21, 49}, {51, 49}, {51, 6}},
            [4] = {{21, -50}, {21, -6}, {51, -6}, {51, -50}},
            [5] = {{-21, -50}, {-21, -6}, {-1.5, -21}, {1.5, -21}, {21, -6}, {21, -50}},
            [6] = {{-51, -50}, {-51, -6}, {-21, -6}, {-21, -50}},

            -- If not all seats are taken, use bigger zones.
            [12] = {{-51, 6}, {-51, 49}, {-1.5, 49}, {-1.5, 21}, {-21, 6}},
            [23] = {{21, 6}, {1.5, 21}, {1.5, 49}, {51, 49}, {51, 6}},
            [123] = {{-51, 6}, {-51, 49}, {51, 49}, {51, 6}, {21, 6}, {1.5, 21}, {-1.5, 21}, {-21, 6}},
            [45] = {{51, -6}, {51, -49}, {1.5, -49}, {1.5, -21}, {21, -6}},
            [56] = {{-21, -6}, {-1.5, -21}, {-1.5, -49}, {-51, -49}, {-51, -6}},
            [456] = {{51, -6}, {51, -49}, {-51, -49}, {-51, -6}, {-21, -6}, {-1.5, -21}, {1.5, -21}, {21, -6} },
        },
        tableXZ = {{-48, -28}, {-48, 28}, {48, 28}, {48, -28}},
        y = 1,
    },
    [8] = {
        [1] = {{40.5, -100}, {40.5, -15}, {78, -15}, {78, -100}},
        [2] = {{0, -100}, {0, -15}, {40.5, -15}, {40.5, -100}},
        [3] = {{-40.5, -100}, {-40.5, -15}, {0, -15}, {0, -100}},
        [4] = {{-78, -100}, {-78, -15}, {-40.5, -15}, {-40.5, -100}},
        [5] = {{-78, 15}, {-78, 100}, {-40.5, 100}, {-40.5, 15}},
        [6] = {{-40.5, 15}, {-40.5, 100}, {0, 100}, {0, 15}},
        [7] = {{0, 15}, {0, 100}, {40.5, 100}, {40.5, 15}},
        [8] = {{40.5, 15}, {40.5, 100}, {78, 100}, {78, 15}},
    },
    tableXZ = {{-78, -15}, {-78, 15}, {78, 15}, {78, -15}},
    y = 5,
}

-- Current zones.
local _zones = {
    y = false,
    colorToZone = {},
    tableXZ = {},
}

local _update = {
    time = false,
    periodicUpdateSeconds = 10,
}

--- Get all zones.
-- @return table : list of color strings.
function zones()
    _maybeUpdateZones()
    local result = {}
    for color, zone in pairs(_zones.colorToZone) do
        table.insert(result, color)
    end
    return result
end

--- Get zone color from position.
-- @param position table : {xyz} position.
-- @return string : zone color, or nil if not in zone.
function zoneFromPosition(position)
    assert(type(position) == 'table' and type(position.x) == 'number')
    _maybeUpdateZones()
    for color, zone in pairs(_zones.colorToZone) do
        if _boundingBoxContains(zone.boundingBox, position) and _polygonContains(zone.polygon, position) then
            return color
        end
    end
end

--- Given map from guids to positions, return map from guids to zone.
-- This is a bulk operation to reduce call overhead.
-- @param guidToPosition table : guid to {xyz} tables.
-- @return table : map from guid to zone color string.
function zonesFromPositions(guidToPosition)
    assert(type(guidToPosition) == 'table')
    _maybeUpdateZones()
    local result = {}
    for guid, position in pairs(guidToPosition) do
        result[guid] = zoneFromPosition(position)
    end
    return result
end

--- Get guids for objects in any player's hand.
-- @param playerColor string.
-- @return table : set from guid string to true.
function inHand()
    local result = {}
    for _, player in ipairs(Player.getPlayers()) do
        for i = 1, player.getHandCount() do
            for _, object in ipairs(player.getHandObjects(i)) do
                result[object.guid] = true
            end
        end
    end
    return result
end

--- Is position on the main table?
-- @param position table : {xyz} position.
-- @return boolean : true if on main table.
function inTableZone(position)
    assert(type(position) == 'table' and type(position.x) == 'number')
    _maybeUpdateZones()
    return _boundingBoxContains(_zones.table.boundingBox, position) and _polygonContains(_zones.table.polygon, position)
end

--- Get XYZ border about a zone (suitable for vector lines).
-- @param parameters table: {color:string, inset:number, clipToTable:boolean}
-- @return table : list of {xyz} points.
function zoneBorder(parameters)
    assert(type(parameters.color) == 'string')
    _maybeUpdateZones()
    local result = {}
    local zone = _zones.colorToZone[parameters.color]
    local polygon = zone and zone.polygon
    if polygon then
        if parameters.inset then
            polygon = _inset(polygon, parameters.inset)
        end
        if parameters.clipToTable then
            local bb = _zones.table.boundingBox
            for i, xz in ipairs(polygon) do
                xz[1] = math.max(xz[1], bb.min.x)
                xz[1] = math.min(xz[1], bb.max.x)
                xz[2] = math.max(xz[2], bb.min.z)
                xz[2] = math.min(xz[2], bb.max.z)
            end
        end
        for _, xz in ipairs(polygon) do
            table.insert(result, { x = xz[1], y = _zones.y, z = xz[2] })
        end
    end
    return result
end

function _boundingBox(polygonXZ)
    assert(type(polygonXZ) == 'table')

    local min, max
    for i, vertex in ipairs(polygonXZ) do
        local x, z = vertex[1], vertex[2]
        if i == 1 then
            min = { x = x, z = z }
            max = { x = x, z = z }
        else
            min.x = math.min(min.x, x)
            min.z = math.min(min.z, z)
            max.x = math.max(max.x, x)
            max.z = math.max(max.z, z)
        end
    end
    return { min = min, max = max }
end

function _testBoundingBox()
    local polygon = { {0, 0}, {-1, 2}, {1, 0}, {0, -2} }
    local box = _boundingBox(polygon)
    assert(box.min.x == -1 and box.min.z == -2)
    assert(box.max.x == 1 and box.max.z == 2)
end

function _boundingBoxContains(boxXZ, position)
    assert(type(boxXZ) == 'table' and boxXZ.min and type(position) == 'table' and position.x)
    local gteMin = position.x >= boxXZ.min.x and position.z >= boxXZ.min.z
    local lteMax = position.x <= boxXZ.max.x and position.z <= boxXZ.max.z
    return gteMin and lteMax
end

function _testBoundingBoxContains()
    local box = _boundingBox({ {0, 0}, {2, 2} })
    assert(_boundingBoxContains(box, { x = 1, z = 1 }))
    assert(not _boundingBoxContains(box, { x = 3, z = 3 }))
end

--- Is the point inside the polygon (2D)?
-- Uses the "ray casting method".
-- @see https://love2d.org/wiki/PointWithinShape
--
-- @param polygonXZ table : list of 2d points, each point is a list of two numbers.
-- @param point table : list of 2 numbers.
-- @return boolean : true if point is inside polygon.
function _polygonContains(polygonXZ, position)
    assert(type(polygonXZ) == 'table' and type(position) == 'table' and position.x)

    local x, z = 1, 2
    local numverts = #polygonXZ
    local tx, tz = position.x, position.z
    local p0 = polygonXZ[numverts]

    -- get test bit for above/below X axis
    local zflag0 = p0[z] >= tz
    local insideFlag = false

    for _, p1 in ipairs(polygonXZ) do
        local zflag1 = p1[z] >= tz

        -- Check if endpoints straddle (are on opposite sides) of X axis
        -- (i.e. the Zs differ); if so, +X ray could intersect this edge.
        if zflag0 ~= zflag1 then
            -- Check intersection of pgon segment with +X ray.
            -- Note if >= point's X; if so, the ray hits it.
            if ((p1[z] - tz) * (p0[x] - p1[x]) >= (p1[x] - tx) * (p0[z] - p1[z])) == zflag1 then
                insideFlag = not insideFlag
            end
        end

        -- Move to the next pair of vertices, retaining info as possible.
        zflag0 = zflag1
        p0 = p1
    end

    return insideFlag
end

function _testPolygonContains()
    local polygon = { {0,0}, {0,2}, {2,2}, {2,0} }
    assert(_polygonContains(polygon, {x=1,z=1}))
    assert(not _polygonContains(polygon, {x=3,z=3}))
end

--- Inset polygon by fixed perpendicular distance.
-- Requires polygon vertices be given in clockwise order, otherwise will outset!
-- @see http://alienryderflex.com/polygon_inset/
-- @see http://alienryderflex.com/intersect/
-- @param polygon table : list of 2d points, each point is a list of two numbers.
-- @param inset number : inset distance (negative to outset).
-- @return inset polygon table : new inset polygon, original left as-is.
function _inset(polygon, inset)
    assert(type(polygon) == 'table' and type(inset) == 'number')
    assert(#polygon > 2)

    local x = 1
    local y = 2

    local function lineIntersection(a, b, c, d)
        assert(not(a[x] == b[x] and a[y] == b[y]))
        assert(not(c[x] == d[x] and c[y] == d[y]))

        -- Translate so A is at the origin.
        --local A = { [x] = 0, [y] = 0 }
        local B = { [x] = b[x] - a[x], [y] = b[y] - a[y] }
        local C = { [x] = c[x] - a[x], [y] = c[y] - a[y] }
        local D = { [x] = d[x] - a[x], [y] = d[y] - a[y] }

        local distAB = math.sqrt((B[x] * B[x]) + (B[y] * B[y]))
        assert(distAB > 0)

        -- Rotate so B is on the positive X axis.
        local cos = B[x] / distAB
        local sin = B[y] / distAB
        --B = { [x] = distAB, [y] = 0 }
        C = { [x] = (C[x] * cos) + (C[y] * sin), [y] = (C[y] * cos) - (C[x] * sin) }
        D = { [x] = (D[x] * cos) + (D[y] * sin), [y] = (D[y] * cos) - (D[x] * sin) }
        assert(C[y] ~= D[y])  -- parallel lines

        -- Get intersection on the AB x axis line.
        local ABx = D[x] + ((C[x] - D[x]) * D[y] / (D[y] - C[y]))

        -- Reverse rotation, translation.
        return { [x] = a[x] + (ABx * cos), [y] = a[y] + (ABx * sin) }
    end

    local function insetCorner(prev, cur, next)
        -- Get line segments (preserve winding direction) and distances.
        local d1 = { [x] = cur[x] - prev[x], [y] = cur[y] - prev[y] }
        local dist1 = math.sqrt((d1[x] * d1[x]) + (d1[y] * d1[y]))
        local d2 = { [x] = next[x] - cur[x], [y] = next[y] - cur[y] }
        local dist2 = math.sqrt((d2[x] * d2[x]) + (d2[y] * d2[y]))
        assert(dist1 > 0 and dist2 > 0)

        -- Inset line segments prev->cur and cur->next.
        local inset1 = { [x] = d1[y] * inset / dist1, [y] = -d1[x] * inset / dist1 }
        local prev1 = { [x] = prev[x] + inset1[x], [y] = prev[y] + inset1[y] }
        local prev2 = { [x] = cur[x] + inset1[x], [y] = cur[y] + inset1[y] }
        local inset2 = { [x] = d2[y] * inset / dist2, [y] = -d2[x] * inset / dist2 }
        local next1 = { [x] = cur[x] + inset2[x], [y] = cur[y] + inset2[y] }
        local next2 = { [x] = next[x] + inset2[x], [y] = next[y] + inset2[y] }

        -- If both inset line segments share an endpoint, lines are colinear.
        if prev2[x] == next1[x] and prev2[y] == next1[y] then
            return next1
        end

        -- Otherwise get intersection point.
        return lineIntersection(prev1, prev2, next1, next2)
    end

    local insetPolygon = {}
    local numVertices = #polygon
    for i = 1, #polygon do
        local prevPt = polygon[((i - 2) % numVertices) + 1]
        local curPt = polygon[i]
        local nextPt = polygon[(i % numVertices) + 1]
        table.insert(insetPolygon, insetCorner(prevPt, curPt, nextPt))
    end

    return insetPolygon
end

function _testInset()
    local polygon = { {0, 0}, {1, 1}, {2, 0} }
    local inset = CrLua.Polygon.inset(polygon, 0.1)
    assert(#inset == 3)
    local function almost(point, x, y)
        return math.abs(point[1] - x) < 0.01 and math.abs(point[2] - y) < 0.01
    end
    assert(almost(inset[1], 0.24, 0.1), '1: ' .. inset[1][1] .. ', ' .. inset[1][2])
    assert(almost(inset[2], 1, 0.85), '2: ' .. inset[2][1] .. ', ' .. inset[2][2])
    assert(almost(inset[3], 1.76, 0.1), '3: ' .. inset[3][1] .. ', ' .. inset[3][2])
end

function _maybeUpdateZones()
    if not _update.time or (Time.time - _update.time) > _update.periodicUpdateSeconds then
        _update.time = Time.time

        local colorToCommandSheet = {}
        local numCommandSheets = 0
        local guidToFactionSheet = {}
        for _, object in ipairs(getAllObjects()) do
            local name = object.getName()
            local color = string.match(name, '^Command Sheet %((%a+)%)$')
            if color then
                colorToCommandSheet[color] = object
                numCommandSheets = numCommandSheets + 1
            end
            local factionName = string.match(name, '^(.+) Sheet$')
            if factionName then
                local guid = object.getGUID()
                guidToFactionSheet[guid] = object
            end
        end

        local function hasFactionSheet(polygon)
            assert(type(polygon) == 'table')
            for _, factionSheet in pairs(guidToFactionSheet) do
                if _polygonContains(polygon, factionSheet.getPosition()) then
                    return true
                end
            end
        end
        local function getSeatColor(polygon)
            assert(type(polygon) == 'table')
            for color, commandSheet in pairs(colorToCommandSheet) do
                if _polygonContains(polygon, commandSheet.getPosition()) then
                    return color
                end
            end
            error('no seat color')
        end

        _zones.colorToZone = {}
        local function addZone(color, polygon)
            assert(type(color) == 'string' and type(polygon) == 'table')
            _zones.colorToZone[color] = {
                polygon = polygon,
                boundingBox = _boundingBox(polygon)
            }
        end

        local polygons = false
        if numCommandSheets == 8 then
            _zones.y = DEFAULT_ZONES[8].y
            _zones.table = {
                polygon = DEFAULT_ZONES[8].tableXZ,
                boundingBox = _boundingBox(DEFAULT_ZONES[8].tableXZ)
            }
            for i = 1, 8 do
                local polygon = DEFAULT_ZONES[8].zones[i]
                if hasFactionSheet(polygon) then
                    addZone(getSeatColor(polygon), polygon)
                end
            end
            polygons = DEFAULT_ZONES[8].zones
        else
            _zones.y = DEFAULT_ZONES[6].y
            _zones.table = {
                polygon = DEFAULT_ZONES[6].tableXZ,
                boundingBox = _boundingBox(DEFAULT_ZONES[6].tableXZ)
            }

            -- 6p tables use different zones depending on where faction sheets
            -- are placed.  If all 6 seats are full everything is easy.
            local seat = {}
            local seatColor = {}
            for i = 1, 6 do
                local polygon = DEFAULT_ZONES[6].zones[i]
                local isSeat = hasFactionSheet(polygon)
                seat[i] = isSeat and 1 or 0
                seatColor[i] = isSeat and getSeatColor(polygon)
            end

            if seat[1] + seat[2] + seat[3] == 1 then
                local color = seatColor[1] or seatColor[2] or seatColor[3]
                addZone(color, DEFAULT_ZONES[6].zones[123])
            elseif seat[1] + seat[2] + seat[3] == 2 then
                if seatColor[2] then
                    addZone(seatColor[2], DEFAULT_ZONES[6].zones[2])
                    if seatColor[1] then
                        addZone(seatColor[1], DEFAULT_ZONES[6].zones[1])
                    else
                        addZone(seatColor[3], DEFAULT_ZONES[6].zones[3])
                    end
                else
                    addZone(seatColor[1], DEFAULT_ZONES[6].zones[12])
                    addZone(seatColor[3], DEFAULT_ZONES[6].zones[23])
                end
            elseif seat[1] + seat[2] + seat[3] == 3 then
                addZone(seatColor[1], DEFAULT_ZONES[6].zones[1])
                addZone(seatColor[2], DEFAULT_ZONES[6].zones[2])
                addZone(seatColor[3], DEFAULT_ZONES[6].zones[3])
            end

            if seat[4] + seat[5] + seat[6] == 1 then
                local color = seatColor[4] or seatColor[5] or seatColor[6]
                addZone(color, DEFAULT_ZONES[6].zones[456])
            elseif seat[4] + seat[5] + seat[6] == 2 then
                if seatColor[5] then
                    addZone(seatColor[5], DEFAULT_ZONES[6].zones[5])
                    if seatColor[4] then
                        addZone(seatColor[4], DEFAULT_ZONES[6].zones[4])
                    else
                        addZone(seatColor[6], DEFAULT_ZONES[6].zones[6])
                    end
                else
                    addZone(seatColor[4], DEFAULT_ZONES[6].zones[45])
                    addZone(seatColor[6], DEFAULT_ZONES[6].zones[56])
                end
            elseif seat[4] + seat[5] + seat[6] == 3 then
                addZone(seatColor[4], DEFAULT_ZONES[6].zones[4])
                addZone(seatColor[5], DEFAULT_ZONES[6].zones[5])
                addZone(seatColor[6], DEFAULT_ZONES[6].zones[6])
            end
        end
    end
end

function onLoad(saveState)
    self.setColorTint({ r = 0.25, g = 0.25, b = 0.25 })
    self.setScale({ x = 2, y = 0.01, z = 2 })
    self.setName('TI4_ZONE_HELPER')
    self.setDescription('Shared helper functions used by other objects, PLEASE LEAVE ON TABLE! This object is only visible to the black (GM) player.')

    -- Only the GM/black player can see this object.  Others can still interact!
    local invisibleTo = {}
    for _, color in ipairs(Player.getColors()) do
        if color ~= 'Black' then
            table.insert(invisibleTo, color)
        end
    end
    self.setInvisibleTo(invisibleTo)
end
