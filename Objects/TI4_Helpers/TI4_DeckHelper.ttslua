--- Shared deck locations, etc.
-- @author Darrell

-- Users should copy this getHelperClient function, and use via:
--
-- local deckHelper = getHelperClient('TI4_DECK_HELPER')
--
-- Where one can call any main function in this file via the helper.
function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

-- Find decks based on placemats, that way can move mats and it just works.
local PLACEMAT_GUID = {
    SCORE = '',
    DECKS = '',
}

local DECKS = {
    {
        deckName = 'Public Objectives I',
        parentGuid = PLACEMAT_GUID.SCORE,
        deckTransform = {
            position = {},
            rotation = {},
        },
        discardTransform = false,
        cardNames = {
            'Corner the Market',
            'Develop Weaponry',
            'Diversify Research',
            'Erect a Monument',
            'Expand Borders',
            'Found Research Outposts',
            'Intimidate Council',
            'Lead From The Front',
            'Negotiate Trade Routes',
            'Sway the Council',
        },
    },
    {
        deckName = 'Public Objectives II',
        parentGuid = PLACEMAT_GUID.SCORE,
        deckTransform = {
            position = {},
            rotation = {},
        },
        discardTransform = false,
        cardNames = {
            'Centralize Galactic Trade',
            'Conquer the Weak',
            'Form Galactic Brain Trust',
            'Found a Golden Age',
            'Galvanize the People',
            'Manipulate Galactic Law',
            'Master the Sciences',
            'Revolutionize Warfare',
            'Subdue the Galaxy',
            'Unify the Colonies',
        },
    },
    {
        deckName = 'Secret Objectives',
        parentGuid = PLACEMAT_GUID.DECKS,
        deckTransform = {
            position = {},
            rotation = {},
        },
        discardTransform = false,
        shuffleOnDiscard = true,
        cardNames = {
            'Adapt New Strategies',
            'Become the Gatekeeper',
            'Control the Region',
            'Cut Supply Lines',
            'Destroy Their Greatest Ship',
            'Establish A Perimeter',
            'Forge An Alliance',
            'Form a Spy Network',
            'Fuel the War Machine',
            'Gather A Mighty Fleet',
            'Learn Secrets of the Cosmos',
            'Make an Example of Their World',
            'Master the Laws of Physics',
            'Mine Rare Metals',
            'Monopolize Production',
            'Occupy the Seat of the Empire',
            'Spark a Rebellion',
            'Threaten Enemies',
            'Turn Their Fleets to Dust',
            'Unveil Flagship',
        },
    },
    {
        deckName = 'Agenda',
        parentGuid = PLACEMAT_GUID.DECKS,
        deckTransform = {
            position = {},
            rotation = {},
        },
        discardTransform = {
            position = {},
            rotation = {},
        },
        cardNames = {
            'Anti-Intellectual Revolution',
            'Archived Secret',
            'Arms Reduction',
            'Classified Document Leaks',
            'Colonial Redistribution',
            'Committee Formation',
            'Compensated Disarmament',
            'Conventions of War',
            'Core Mining',
            'Demilitarized Zone',
            'Economic Equality',
            'Enforced Travel Ban',
            'Executive Sanctions',
            'Fleet Regulations',
            'Holy Planet of Ixth',
            'Homeland Defense Act',
            'Imperial Arbiter',
            'Incentive Program',
            'Ixthian Artifact',
            'Judicial Abolishment',
            'Minister of Commerce',
            'Minister of Exploration',
            'Minister of Industry',
            'Minister of Peace',
            'Minister of Policy',
            'Minister of Sciences',
            'Minister of War',
            'Miscount Disclosed',
            'Mutiny',
            'New Constitution',
            'Prophecy of Ixth',
            'Public Execution',
            'Publicize Weapon Schematics',
            'Regulated Conscription',
            'Representative Government',
            'Research Team - Biotic',
            'Research Team - Cybernetic',
            'Research Team - Propulsion',
            'Research Team - Warfare',
            'Seed of an Empire',
            'Senate Sanctuary',
            'Shard of the Throne',
            'Shared Research',
            'Swords to Plowshares',
            'Terraforming Initiative',
            'The Crown of Emphidia',
            'The Crown of Thanlos',
            'Unconventional Measures',
            'Wormhole Reconstruction',
            'Wormhole Research',
        },
    },
    {
        deckName = 'Actions',
        parentGuid = PLACEMAT_GUID.DECKS,
        deckTransform = {
            position = {},
            rotation = {},
        },
        discardTransform = {
            position = {},
            rotation = {},
        },
        cardNames = {
            'Ancient Burial Sites',
            'Assassinate Representative',
            'Bribery',
            'Bunker',
            'Confusing Legal Text',
            'Construction Rider',
            'Courageous to the End',
            'Cripple Defenses',
            'Diplomacy Rider',
            'Direct Hit (1)',
            'Direct Hit (2)',
            'Direct Hit (3)',
            'Direct Hit (4)',
            'Disable',
            'Distinguished Councilor',
            'Economic Initiative',
            'Emergency Repairs',
            'Experimental Battlestation',
            'Fighter Prototype',
            'Fire Team',
            'Flank Speed (1)',
            'Flank Speed (2)',
            'Flank Speed (3)',
            'Flank Speed (4)',
            'Focused Research',
            'Frontline Deployment',
            'Ghost Ship',
            'Imperial Rider',
            'In the Silence of Space',
            'Industrial Initiative',
            'Infiltrate',
            'Insubordination',
            'Intercept',
            'Leadership Rider',
            'Lost Star Chart',
            'Lucky Shot',
            'Maneuvering Jets (1)',
            'Maneuvering Jets (2)',
            'Maneuvering Jets (3)',
            'Maneuvering Jets (4)',
            'Mining Initiative',
            'Morale Boost (1)',
            'Morale Boost (2)',
            'Morale Boost (3)',
            'Morale Boost (4)',
            'Parley',
            'Plague',
            'Political Stability',
            'Politics Rider',
            'Public Disgrace',
            'Reactor Meltdown',
            'Reparations',
            'Repeal Law',
            'Rise of a Messiah',
            'Sabotage (1)',
            'Sabotage (2)',
            'Sabotage (3)',
            'Sabotage (4)',
            'Salvage',
            'Shields Holding (1)',
            'Shields Holding (2)',
            'Shields Holding (3)',
            'Shields Holding (4)',
            'Signal Jamming',
            'Skilled Retreat (1)',
            'Skilled Retreat (2)',
            'Skilled Retreat (3)',
            'Skilled Retreat (4)',
            'Spy',
            'Summit',
            'Tactical Bombardment',
            'Technology Rider',
            'Trade Rider',
            'Unexpected Action',
            'Unstable Planet',
            'Upgrade',
            'Uprising',
            'Veto',
            'War Effort',
            'Warfare Rider',
            -- Codex action cards
            'Hack Election',
            'Harness Energy',
            'Blitz',
            'Fighter Conscription',
            'Forward Supply Base',
            'Rally',
            'War Machine (1)',
            'War Machine (2)',
            'War Machine (3)',
            'War Machine (4)',
            'Master Plan',
            'Insider Information',
            'Plagiarize',
            'Scramble Frequency',
            'Solar Flare',
            'Reflective Shielding',
            'Impersonation',
            'Sanction',
            'Counterstroke',
            'Ghost Squad',
        },
    },
}

local _lowerCardNameToDeckAttributes = false

local function _getDeck(cardName)
    assert(type(cardName) == 'string')
    if not _lowerCardNameToDeckAttributes then
        _lowerCardNameToDeckAttributes = {}
        for _, attributes in ipairs(DECKS) do
            for _, cardName in ipairs(attributes.cardNames) do
                _lowerCardNameToDeckAttributes[string.lower(cardName)] = attributes
            end
        end
    end
    return _lowerCardNameToDeckAttributes[string.lower(cardName)]
end

--- Discard this card, keeping its Y but moving XZ above discard pile.
-- (keep Y to prevent grouping when discarding many.)
function discard(cardGuid)
    assert(type(cardGuid) == 'string')
    local cardObject = assert(getObjectFromGUID(cardGuid))
    local deckAttributes = _getDeck(cardObject.getName())

    if not deckAttributes then
        return false
    end

    local transform = deckAttributes.discardTransform or deckAttributes.deckTransform
    local parent = getObjectFromGUID(deckAttributes.parentGuid)
    local pos = parent.positionToWorld(transform.position)
    local rot = {
        x = parent.getRotation().x + transform.rotation.x,
        y = parent.getRotation().y + transform.rotation.y,
        z = parent.getRotation().z + transform.rotation.z
    }

    pos.y = cardObject.y
    local collide = false
    local fast = true
    cardObject.setPositionSmooth(pos, collide, fast)
    cardObject.setRotationSmooth(rot, collide, fast)

    return true
end

function draw(parameters)
    assert(type(parameters) == 'table')
    assert(type(parameters.color) == 'string')
    assert(type(parameters.count) == 'number')
end

-- TODO XXX AGENDA TOP/BOTTOM BELONGS HERE
