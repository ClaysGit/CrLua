--- Table setup.
-- @author the_mantis (original TI4 tokensweeper unpack)
-- @author Milty (per-color unpack, player-count zones)
-- @author Darrell (gathered code into this shared helper)

-- Users should copy this getHelperClient function, and use via:
--
-- local setupHelper = getHelperClient('TI4_SETUP_HELPER')
--
-- Where one can call any main function in this file via the helper.
function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

-------------------------------------------------------------------------------

local _debug = true
local function debugLog(message)
    if _debug then
        print(message)
    end
end

local function getEntryGuid(container, namePattern)
    for _, entry in ipairs(container.getObjects()) do
        if string.match(entry.name, namePattern) then
            return entry.guid
        end
    end
end

local function offsetPosition(position, offset)
    return {
        x = position.x + (offset.x or 0),
        y = position.y + (offset.y or 0),
        z = position.z + (offset.z or 0) * (position.z > 0 and 1 or -1)
    }
end

local function offsetRotation(position, offset)
    local result = { x = 0, y = 0, z = 0 }

    local z = offsetPosition(position, offset).z
    if z == 0 then
        result.y = 270
    else
        result.y = z > 0 and 0 or 180
    end
    result.y = result.y + (offset.yRot or 0)
    return result
end

local function agendaCenter(playerCount)
    assert(type(playerCount) == 'number')
    return {
        x = playerCount <= 6 and -42.75 or -44.75,
        y = 0,
        z = 0
    }
end

local function agendaCenterPlayer(playerCount, playerZoneCenter)
    assert(type(playerCount) == 'number' and type(playerZoneCenter) == 'table')
    local center = agendaCenter(playerCount)
    return {
        x = center.x + playerZoneCenter.x / 10,
        y = center.y,
        z = center.z + 3.75 * (playerZoneCenter.z > 0 and 1 or -1)
    }
end

--- Setup tables have "NAME_TO_" sub-tables from name pattern to attributes.
-- This function gathers the combined list of all name patterns.
local function allNamePatterns(t)
    local result = {}
    for k, v in pairs(t) do
        if type(k) == 'string' and type(v) == 'table' and string.match(k, '^NAME_TO_') then
            for namePattern, _ in pairs(v) do
                table.insert(result, namePattern)
            end
        end
    end
    return result
end

-------------------------------------------------------------------------------

local SetupGeneric = {
    NAME_TO_PLAYER_ZONE_OFFSET = {
        ['^TI4 Unpacker$'] = { x = 0, z = 1.5 },
        ['^TI4 MultiRoller'] = { x = 0, z = 54, lock = true },
        ['^Technology Cards$'] = { x = -10, z = 1.5 },
    },
    NAME_TO_PLAYER_AGENDA_ZONE_OFFSET = {
        ['^Any Whens%?$'] = { x = -0.6, z = 3 },
        ['^Any Afters%?$'] = { x = 0.6, z = 3 },
    },
    NAME_TO_AGENDA_ZONE_OFFSET = {
        ['^For:$'] = { x = -4.25, lock = true },
        ['^Against:$'] = { x = 4.25, lock = true },
        ['^Votes$'] = { x = -9.25 },
        ['^Speaker Token %- Agenda$'] = { x = 0 },
    }
}

function SetupGeneric.getSetupBag()
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == 'Setup Bag' then
            return object
        end
    end
end

function SetupGeneric.pack(setupBag)
    debugLog('SetupGeneric.pack')
    assert(setupBag.tag == 'Bag')

    local nameToObjects = {}
    for _, namePattern in ipairs(allNamePatterns(SetupGeneric)) do
        nameToObjects[namePattern] = {}
    end

    local deletedItems = false
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if name == 'TI4 Deleted Items' then
            deletedItems = object
        end
        for namePattern, objects in pairs(nameToObjects) do
            if string.match(name, namePattern) then
                table.insert(objects, object)
            end
        end
    end

    -- Pack only one copy of each object.
    for namePattern, objects in pairs(nameToObjects) do
        for i, object in ipairs(objects) do
            if i == 1 and not getEntryGuid(setupBag, namePattern) then
                setupBag.putObject(object)
            else
                if deletedItems then
                    deletedItems.call('ignoreGuid', object.getGUID())
                end
                destroyObject(object)
            end
        end
    end
end

function SetupGeneric.unpack(setupBag, playerCount)
    debugLog('SetupGeneric.unpack')
    assert(setupBag.tag == 'Bag' and type(playerCount) == 'number' and playerCount > 0)

    -- Get per-object json.  Leave the "master" copies of the objects in the
    -- setup bag, spawn new copies from the json.
    local pos = setupBag.getPosition()
    local nameToJson = {}
    for i, namePattern in ipairs(allNamePatterns(SetupGeneric)) do
        local guid = assert(getEntryGuid(setupBag, namePattern), 'setup bag missing ' .. namePattern)
        local object = setupBag.takeObject({
            guid = guid,
            position = { x = pos.x, y = pos.y + (5 * i), z = pos.z }
        })
        nameToJson[namePattern] = object.getJSON()
        setupBag.putObject(object)
    end

    local zoneCenters = _zoneHelper.getPlayerCountZoneCenters(playerCount)
    local agendaPos = agendaCenter(playerCount)

    -- Per player objects.
    for _, zoneCenter in ipairs(zoneCenters) do
        for namePattern, offset in pairs(SetupGeneric.NAME_TO_PLAYER_ZONE_OFFSET) do
            local json = assert(nameToJson[namePattern], 'no json for ' .. namePattern)
            spawnObjectJSON({
                json              = json,
                position          = offsetPosition(zoneCenter, offset),
                rotation          = offsetRotation(zoneCenter, offset),
                callback_function = function(object) object.setLock(offset.lock or false) end,
                sound             = false,
            })
        end
        local agendaPosPlayer = agendaCenterPlayer(playerCount, zoneCenter)
        for namePattern, offset in pairs(SetupGeneric.NAME_TO_PLAYER_AGENDA_ZONE_OFFSET) do
            local json = assert(nameToJson[namePattern], 'no json for ' .. namePattern)
            spawnObjectJSON({
                json              = json,
                position          = offsetPosition(agendaPosPlayer, offset),
                rotation          = offsetRotation(agendaPosPlayer, offset),
                callback_function = function(object) object.setLock(offset.lock or false) end,
                sound             = false,
            })
        end
    end

    -- Singleton agenda zone objects.
    for namePattern, offset in pairs(SetupGeneric.NAME_TO_AGENDA_ZONE_OFFSET) do
        local json = assert(nameToJson[namePattern], 'no json for ' .. namePattern)
        spawnObjectJSON({
            json              = json,
            position          = offsetPosition(agendaPos, offset),
            rotation          = offsetRotation(agendaPos, offset),
            callback_function = function(object) object.setLock(offset.lock or false) end,
            sound             = false,
        })
    end
end

-------------------------------------------------------------------------------

local SetupColor = {
    DEFAULT_COLOR_LIST = { 'White', 'Blue', 'Purple', 'Yellow', 'Red', 'Green', 'Orange', 'Pink', 'Brown' },
    NAME_TO_PLAYER_ZONE_OFFSET = {
        ['Command Sheet %($COLOR%)'] = { x = -9, z = 16, lock = true },
        ['Notes %($COLOR%)'] = { x = -5, z = 1.5 },
        ['Directionaliser %($COLOR%)'] = { x = 0, y = 0.46, z = -5, yRot = 270, lock = true },
        ['Active/Passed %($COLOR%)'] = { x = 5, y = 1, z = 1.5 }
    },
    NAME_TO_PLAYER_AGENDA_ZONE_OFFSET = {
        ['$COLOR Player Votes'] = { x = 0, y = 1, z = 1, yRot = 180 },
    },
    NAME_TO_DIRECTIONALISER_OFFSET = {
        -- These are in Directionaliser local coordinate space.
        ['$COLOR Infantry'] = { x = 0, y = 1, z = -12.2 },
        ['$COLOR Fighter'] = { x = 0, y = 1, z = -10.6 },
        ['$COLOR Space Dock'] = { x = 0, y = 1, z = -8.4 },
        ['$COLOR PDS'] = { x = 0, y = 1, z = -6.1 },
        ['$COLOR Carrier'] = { x = 0, y = 1, z = -2.6 },
        ['$COLOR Destroyer'] = { x = 0, y = 1, z = -0.1 },
        ['$COLOR Cruiser'] = { x = 0, y = 1, z = 3.0 },
        ['$COLOR Dreadnought'] = { x = 0, y = 1, z = 6.2 },
        ['$COLOR Flagship'] = { x = 0, y = 1, z = 9.6 },
        ['$COLOR War Sun'] = { x = 0, y = 1, z = 12.1 },
    }
}

--- Get the player (default) colors list, and a reverse map from color to player index.
function SetupColor.defaultPlayerColors(playerCount)
    debugLog('SetupColor.defaultPlayerColors')
    assert(type(playerCount) == 'number')

    local playerColors = {}
    local colorToPlayerIndex = {}
    for i = 1, playerCount do
        local color = SetupColor.DEFAULT_COLOR_LIST[i]
        playerColors[i] = color
        colorToPlayerIndex[color] = i
    end
    return playerColors, colorToPlayerIndex
end

function SetupColor.transformHands(playerCount)
    debugLog('SetupColor.transformHands')
    assert(type(playerCount) == 'number')

    local playerColors, colorToPlayerIndex = SetupColor.defaultPlayerColors(playerCount)
    local zoneCenters = _zoneHelper.getPlayerCountZoneCenters(playerCount)

    local allPlayerColors = Player.getAvailableColors()
    local nonPlayerIndex = 0
    for i, color in pairs(allPlayerColors) do
        local playerIndex = colorToPlayerIndex[color]
        if playerIndex then
            local zoneCenter = zoneCenters[playerIndex]
            Player[color].setHandTransform({
                position = {
                    x = zoneCenter.x,
                    y = 4,
                    z = 61.5 * (zoneCenter.z > 0 and 1 or -1)
                },
                rotation = {
                    x = 0,
                    y = zoneCenter.z > 0 and 180 or 0,
                    z = 0
                },
                scale = { 12, 8, 5 }
            })
        else
            Player[color].setHandTransform({
                position = {
                    x = 148 - 3 * nonPlayerIndex,
                    y = 5,
                    z = 80
                },
                rotation = { 0, 0, 0 },
                scale = { 1, 4, 1 }
            })
            nonPlayerIndex = nonPlayerIndex + 1
        end
    end
end

function SetupColor.getColorToBox()
    debugLog('SetupColor.getColorToColorBox')
    local colorSet = {}
    for _, color in ipairs(SetupColor.DEFAULT_COLOR_LIST) do
        colorSet[color] = true
    end
    local result = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        local color = string.match(name, '^(.*) Box')
        if object.tag == 'Bag' and colorSet[color] then
            result[color] = object
        end
    end
    return result
end

function SetupColor.pack(colorToColorBox)
    debugLog('SetupColor.pack')
    assert(type(colorToColorBox) == 'table')

    local namePatterns = {}
    for _, namePattern in ipairs(allNamePatterns(SetupColor)) do
        namePattern = string.gsub(namePattern, '$COLOR', '(.*)')
        table.insert(namePatterns, namePattern)
    end

    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        for _, namePattern in ipairs(namePatterns) do
            local color = string.match(name, namePattern)
            if color and colorToColorBox[color] then
                colorToColorBox[color].putObject(object)
            end
        end
    end
end

function SetupColor.unpack(colorToColorBox, playerCount)
    debugLog('SetupColor.unpack')
    assert(type(colorToColorBox) == 'table' and type(playerCount) == 'number')

    local playerColors, colorToPlayerIndex = SetupColor.defaultPlayerColors(playerCount)
    local zoneCenters = _zoneHelper.getPlayerCountZoneCenters(playerCount)
    local agendaPos = agendaCenter(playerCount)

    local nameToObject = {}

    -- Per player objects.
    for i, color in ipairs(playerColors) do
        local colorBox = assert(colorToColorBox[color], 'missing box for ' .. color)
        local zoneCenter = zoneCenters[i]

        for namePattern, offset in pairs(SetupColor.NAME_TO_PLAYER_ZONE_OFFSET) do
            namePattern = string.gsub(namePattern, '$COLOR', color)
            local guid = assert(getEntryGuid(colorBox, namePattern), 'missing ' .. namePattern)
            local object = colorBox.takeObject({
                guid              = guid,
                position          = offsetPosition(zoneCenter, offset),
                rotation          = offsetRotation(zoneCenter, offset),
                callback_function = function(object) object.setLock(offset.lock or false) end,
            })
            nameToObject[object.getName()] = object
        end
        local agendaPosPlayer = agendaCenterPlayer(playerCount, zoneCenter)
        for namePattern, offset in pairs(SetupColor.NAME_TO_PLAYER_AGENDA_ZONE_OFFSET) do
            namePattern = string.gsub(namePattern, '$COLOR', color)
            local guid = assert(getEntryGuid(colorBox, namePattern), 'missing ' .. namePattern)
            local object = colorBox.takeObject({
                guid              = guid,
                position          = offsetPosition(agendaPosPlayer, offset),
                rotation          = offsetRotation(agendaPosPlayer, offset),
                callback_function = function(object) object.setLock(offset.lock or false) end,
            })
            nameToObject[object.getName()] = object
        end
    end
    return nameToObject
end

function SetupColor.unpackUnits(color, colorBox, directionaliser)
    debugLog('SetupColor.unpackUnits')
    assert(type(color) == 'string' and colorBox.tag == 'Bag' and type(directionaliser) == 'userdata')

    for namePattern, offset in pairs(SetupColor.NAME_TO_DIRECTIONALISER_OFFSET) do
        namePattern = string.gsub(namePattern, '$COLOR', color)
        local guid = assert(getEntryGuid(colorBox, namePattern), 'missing ' .. namePattern)
        colorBox.takeObject({
            guid              = guid,
            position          = directionaliser.positionToWorld(offset),
            rotation          = directionaliser.getRotation(),
            callback_function = function(object) object.setLock(offset.lock or false) end,
        })
    end
end

-------------------------------------------------------------------------------

function setupGame(playerColor, playerCount)
    debugLog('setupGame')
    assert(type(playerColor) == 'string' and type(playerCount) == 'number')

    local LineDrawFunctions = {
        [3] = function() draw3Pcircle() end,
        [4] = function() draw4Pcircle() end,
        [5] = function() draw5Pcircle() end,
        [6] = function() draw6Pcircle() end,
        [7] = function() draw7Pcircle() end,
        [8] = function() draw8Pcircle() end
    }
    setupAgendaZone(playerCount)
    setZoneList(playerCount)
    setPlayerColors(playerCount)
    moveUnpackersandMultirollers(playerCount)
    moveCommandSheets(playerCount)
    transformHands(playerCount)
    local lineDraw = LineDrawFunctions[playerCount]
    --lineDraw()
    UI.setAttribute('startup', 'active', false)
end

--- This is the primary entry point for using the helper object.
function setup(params)
    assert(type(params) == 'table')
    assert(type(params.playerColor) == 'string')
    assert(type(params.playerCount) == 'number')
    setupGame(params.playerColor, params.playerCount)
end

function draw3Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({15.75, -2, -9.09},1.75, 32, 1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,}, -- purple circle
        {points={{0.2,-1.0,-12.1},{0.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- purple horizontal
        {points={{18.4,-1.0,-12.1},{64,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- purple vertical
        -- player2 spot
        {points = getCircleVectorPoints({-15.75, -2, -9.09},1.75, 32, 1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,}, -- white circle
        {points={{-0.2,-1.0,-12.1},{-0.2,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- white vertical
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- white horizontal
        -- player3 spot
        {points = getCircleVectorPoints({0, -2, 18.2},1.75, 32, 1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,}, -- red circle
        {points={{18.4,-1.0,12.1},{64.0,-1.0,12.1},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- red horizontal
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,}, -- red horizontal
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false}, -- grey ring hexagons
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-40,-1.0,-1.6},{-45.5,-1.0,-1.6},{-45.5,-1.0,1.6},{-40,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,}, -- grey agenda box
    })
    return true
end

function draw4Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({5.25,-2,-15.15},1.75,32,1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,-12.1},{64.0,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{0.2,-1.0,-12.1},{0.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player2 spot
        {points=getCircleVectorPoints({-15.75,-2,-3.03}, 1.75, 32, 1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-0.2,-1.0,-12.1},{-0.2,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player3 spot
        {points = getCircleVectorPoints({-5.25,-2,15.15},1.75,32,1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-0.2,-1.0,12.1},{-0.2,-1.0,71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player4 spot
        {points= getCircleVectorPoints({15.75,-2,3.03},1.75,32,1),color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{0.2,-1.0,12.1},{0.2,-1.0,71.6},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{18.4,-1.0,12.1},{64,-1.0,12.1},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        --grey ring hexagons and agenda box
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-40,-1.0,-1.6},{-45.5,-1.0,-1.6},{-45.5,-1.0,1.6},{-40,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
    })
    return true
end

function draw5Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({15.75, -2, -9.09},1.75, 32, 1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{22.2,-1.0,-12.1},{22.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{18.4,-1.0,-12.1},{64,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player2 spot
        {points = getCircleVectorPoints({0,-2,-18.25},1.75,32,1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{21.8,-1.0,-12.1},{21.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-21.8,-1.0,-12.1},{-21.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player3 spot
        {points=getCircleVectorPoints({-15.75,-2,-9.09}, 1.75, 32, 1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-22.2,-1.0,-12.1},{-22.2,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player4 spot
        {points = getCircleVectorPoints({-15.75, -2, 9.09},1.75, 32, 1),color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-0.2,-1.0,12.1},{-0.2,-1.0,71.6},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        -- player5spot
        {points = getCircleVectorPoints({15.75, -2, 9.09},1.75, 32, 1),color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{0.2,-1.0,12.1},{0.2,-1.0,71.6},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{18.4,-1.0,12.1},{64,-1.0,12.1},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        --grey ring hexagons and agenda box
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-40,-1.0,-1.6},{-45.5,-1.0,-1.6},{-45.5,-1.0,1.6},{-40,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        -- grey warp zone template
        {points = getCircleVectorPoints({0, -2, 12},1.25, 32, 1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points = getHexagonVectorPoints({0,-2,6},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({5.25,-2,9},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({-5.25,-2,9},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({5.25,-2,15},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({-5.25,-2,15},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,18},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
    })
    return true
end

function draw6Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({15.75, -2, -9.09},1.75, 32, 1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{22.2,-1.0,-12.1},{22.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{18.4,-1.0,-12.1},{64,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player2 spot
        {points = getCircleVectorPoints({0,-2,-18.25},1.75,32,1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{21.8,-1.0,-12.1},{21.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-21.8,-1.0,-12.1},{-21.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player3 spot
        {points=getCircleVectorPoints({-15.75,-2,-9.09}, 1.75, 32, 1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-22.2,-1.0,-12.1},{-22.2,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player4 spot
        {points = getCircleVectorPoints({-15.75, -2, 9.09},1.75, 32, 1),color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-22.2,-1.0,12.1},{-22.2,-1.0,71.6},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player5 spot
        {points = getCircleVectorPoints({0,-2,18.25},1.75,32,1),color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{21.8,-1.0,12.1},{21.8,-1.0,71.6},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-21.8,-1.0,12.1},{-21.8,-1.0,71.6},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player6 spot
        {points = getCircleVectorPoints({15.75, -2, 9.09},1.75, 32, 1),color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,12.1},{64,-1.0,12.1},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{22.2,-1.0,12.1},{22.2,-1.0,71.6},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        --grey ring hexagons and agenda box
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-40,-1.0,-1.6},{-45.5,-1.0,-1.6},{-45.5,-1.0,1.6},{-40,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
    })
    return true
end

function draw7Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({15.75, -2, -15},1.75, 32, 1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,-12.1},{64,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{32.2,-1.0,-12.1},{32.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player2 spot
        {points = getCircleVectorPoints({0,-2,-24.25},1.75,32,1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{31.8,-1.0,-12.1},{31.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{0.2,-1.0,-12.1},{0.2,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player3 spot
        {points = getCircleVectorPoints({-15.75, -2, -15},1.75, 32, 1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-0.2,-1.0,-12.1},{-0.2,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-31.8,-1.0,-12.1},{-31.8,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player4 spot
        {points=getCircleVectorPoints({-21,-2,0}, 1.75, 32, 1),color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-32.2,-1.0,-12.1},{-32.2,-1.0,-71.6},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player5 spot
        {points = getCircleVectorPoints({-15.75, -2, 15},1.75, 32, 1),color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-22.2,-1.0,12.1},{-22.2,-1.0,71.6},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player6 spot
        {points = getCircleVectorPoints({15.75, -2, 15},1.75, 32, 1),color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{21.8,-1.0,12.1},{21.8,-1.0,71.6},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-21.8,-1.0,12.1},{-21.8,-1.0,71.6},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        --purple circle, vertical, horizontals
        {points = getCircleVectorPoints({21, -2, 0},1.75, 32, 1),color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,12.1},{64,-1.0,12.1},},color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{22.2,-1.0,12.1},{22.2,-1.0,71.6},},color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=false,square=false,},

        --grey ring hexagons and agenda box
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},24,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-42,-1.0,-1.6},{-47.5,-1.0,-1.6},{-47.5,-1.0,1.6},{-42,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        -- grey warp zone template
        {points = getCircleVectorPoints({0,-2,18.25},1.25,32,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points = getHexagonVectorPoints({0,-2,12},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({5.25,-2,15},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({-5.25,-2,15},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({5.25,-2,21},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({-5.25,-2,21},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,24},3,0,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
    })
    return true
end

function draw8Pcircle()
    Global.setVectorLines({
        -- player1 spot
        {points = getCircleVectorPoints({15.75, -2, -15},1.75, 32, 1),color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,-12.1},{64,-1.0,-12.1},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{32.2,-1.0,-12.1},{32.2,-1.0,-71.6},},color=_playerList[1],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player2 spot
        {points = getCircleVectorPoints({0,-2,-24.25},1.75,32,1),color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{31.8,-1.0,-12.1},{31.8,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{0.2,-1.0,-12.1},{0.2,-1.0,-71.6},},color=_playerList[2],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player3 spot
        {points = getCircleVectorPoints({-15.75, -2, -15},1.75, 32, 1),color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-0.2,-1.0,-12.1},{-0.2,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-31.8,-1.0,-12.1},{-31.8,-1.0,-71.6},},color=_playerList[3],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player4 spot
        {points=getCircleVectorPoints({-21,-2,0}, 1.75, 32, 1),color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,-12.1},{-64,-1.0,-12.1},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-32.2,-1.0,-12.1},{-32.2,-1.0,-71.6},},color=_playerList[4],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player5 spot
        {points = getCircleVectorPoints({-15.75, -2, 15},1.75, 32, 1),color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-18.4,-1.0,12.1},{-64,-1.0,12.1},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-32.2,-1.0,12.1},{-32.2,-1.0,71.6},},color=_playerList[5],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player6 spot
        {points = getCircleVectorPoints({0,-2,24.25},1.75,32,1),color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{-0.2,-1.0,12.1},{-0.2,-1.0,71.6},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{-31.8,-1.0,12.1},{-31.8,-1.0,71.6},},color=_playerList[6],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player7 spot
        {points = getCircleVectorPoints({15.75, -2, 15},1.75, 32, 1),color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{31.8,-1.0,12.1},{31.8,-1.0,71.6},},color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{0.2,-1.0,12.1},{0.2,-1.0,71.6},},color=_playerList[7],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        -- player8 spot
        {points = getCircleVectorPoints({21, -2, 0},1.75, 32, 1),color=_playerList[8],thickness=0.1,rotation={0,0,0},loop=true,square=false,},
        {points={{18.4,-1.0,12.1},{64,-1.0,12.1},},color=_playerList[8],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        {points={{32.3,-1.0,12.1},{32.2,-1.0,71.6},},color=_playerList[8],thickness=0.1,rotation={0,0,0},loop=false,square=false,},
        --grey ring hexagons and agenda box
        {points = getHexagonVectorPoints({0,-2,0},6,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},18,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},12,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points = getHexagonVectorPoints({0,-2,0},24,30,1),color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false},
        {points={{-42,-1.0,-1.6},{-47.5,-1.0,-1.6},{-47.5,-1.0,1.6},{-42,-1.0,1.6},},color='Grey',thickness=0.1,rotation={0,0,0},loop=true,square=false,},
    })
    return true
end

function getCircleVectorPoints(origin, radius, steps, y)
    local t = {}
    local d,s,c,r = 360/steps, math.sin, math.cos, math.rad
    for i = 0,steps do
        table.insert(t, {
            origin[1] + c(r(d*i))*radius,
            origin[2] + y,
            origin[3] + s(r(d*i))*radius
        })
    end
    return t
end

function getHexagonVectorPoints(origin, radius, rot, y)
    local t = {}
    local d,s,c,r = 60, math.sin, math.cos, math.rad
    for i = 0,6 do
        table.insert(t, {
            origin[1] + c(r(d*i+rot))*radius,
            origin[2] + y,
            origin[3] + s(r(d*i+rot))*radius
        })
    end
    return t
end

-------------------------------------------------------------------------------

function onLoad(saveState)
    self.setColorTint({ r = 0.25, g = 0.25, b = 0.25 })
    self.setScale({ x = 2, y = 0.01, z = 2 })
    self.setName('TI4_SETUP_HELPER')
    self.setDescription('Shared helper functions used by other objects, PLEASE LEAVE ON TABLE! This object is only visible to the black (GM) player.')

    -- Only the GM/black player can see this object.  Others can still interact!
    local invisibleTo = {}
    for _, color in ipairs(Player.getColors()) do
        if color ~= 'Black' then
            table.insert(invisibleTo, color)
        end
    end
    self.setInvisibleTo(invisibleTo)

    self.addContextMenuItem('pack', contextMenuPack, true)
    self.addContextMenuItem('unpack', contextMenuUnpack, true)
    self.addContextMenuItem('hands', contextMenuHands, true)
    self.addContextMenuItem('packColors', contextMenuPackColors, true)
    self.addContextMenuItem('unpackColors', contextMenuUnpackColors, true)
end

function contextMenuPack()
    local setupBag = assert(SetupGeneric.getSetupBag())
    SetupGeneric.pack(setupBag)
end
function contextMenuUnpack()
    local setupBag = assert(SetupGeneric.getSetupBag())
    SetupGeneric.unpack(setupBag, 4)
end
function contextMenuHands()
    SetupColor.transformHands(4)
end
function contextMenuPackColors()
    local colorToBox = assert(SetupColor.getColorToBox())
    SetupColor.pack(colorToBox)
end
function contextMenuUnpackColors()
    local colorToBox = assert(SetupColor.getColorToBox())
    local nameToObject = SetupColor.unpack(colorToBox, 4)

    local d = nameToObject['Directionaliser (White)']
    if d then
        for _, p in ipairs(d.getSnapPoints()) do
            local t = { p.position.x, p.position.y, p.position.z }
            for i, v in ipairs(t) do
                t[i] = math.floor(v * 1000) / 1000
            end
            print('xxx pos ' .. table.concat(t, ', '))
        end

        local function delayedUnpack()
            SetupColor.unpackUnits('White', colorToBox['White'], d)
        end
        Wait.time(delayedUnpack, 4)
    end
end

-------------------------------------------------------------------------------
--- Partially lock the _G global variable table.
-- Include this AFTER creating any necessary globals to prevent new ones.
--
-- - Existing globals can still be read AND WRITTEN.
-- - Cannot read non-existent globals.
-- - Cannot write new globals.
--
-- This helps catch typos where what was meant to access a local instead
-- references a (hopefully non-existent) global, as well as forgetting to use
-- "local" when creating objects.
--
-- @author Darrell
-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
