--- Faction attributes.
-- @author Darrell
--
-- Get faction tables with:
-- - factionName string, matches a key in the faction attributes table.
-- - tokenName string, "TOKEN_NAME Command Token" or "TOKEN_NAME Owner Token".
-- - color string (from command sheet in case no seated player).
-- - actionCards number.
-- - commandTokens number.

-- Users should copy this getHelperClient function, and use via:
--
-- local factionHelper = getHelperClient('TI4_FACTION_HELPER')
-- local faction = factionHelper.fromColor('Red')
-- print(faction.name)
--
-- Where one can call any main function in this file via the helper.
function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _factionAttributes = {

    ['The Arborec'] = {
        tokenName = 'Arborec',
        startingUnits = { Infantry = 4, Fighter = 2, Cruiser = 1, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Magen Defense Grid' },
        flagship = 'Duha Menaimon',
        flagshipDescription = 'After you activate this system, you may produce up to 5 units in this system.',
    },

    ['The Barony Of Letnev'] = {
        tokenName = 'Barony of Letnev',
        startingUnits = { Infantry = 3, Fighter = 1, Destroyer = 1, Carrier = 1, Dreadnought = 1, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors', 'Plasma Scoring' },
        flagship = 'Arc Secundus',
        flagshipDescription = "Other players’ units in this system lose PLANETARY SHIELD.  At the start of each space combat round, repair this ship.  BOMBARDMENT 5 (X3)",
    },

    ['The Clan Of Saar'] = {
        tokenName = 'Clan of Saar',
        startingUnits = { Infantry = 4, Fighter = 2, Cruiser = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors' },
        flagship = 'Son of Ragh',
        flagshipDescription = 'ANTI-FIGHTER BARRAGE 6 (X4)'
    },

    ['The Embers Of Muaat'] = {
        tokenName = 'Embers of Muaat',
        startingUnits = { Infantry = 4, Fighter = 2, War_Sun = 1, Space_Dock = 1 },
        startingTech = { 'Plasma Scoring' },
        flagship = 'The Inferno',
        flagshipDescription = "ACTION: Spend 1 token from your strategy pool to place 1 cruiser in this unit’s system.",
    },

    ['The Emirates Of Hacan'] = {
        tokenName = 'Emirates of Hacan',
        startingUnits = { Infantry = 4, Fighter = 2, Cruiser = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors', 'Sarween Tools' },
        flagship = 'Wrath of Kenara',
        flagshipDescription = 'After you roll a die during a space combat in this system, you may spend 1 trade good to apply +1 to the result.',
    },

    ['The Federation Of Sol'] = {
        tokenName = 'Federation of Sol',
        startingUnits = { Infantry = 5, Fighter = 3, Destroyer = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors', 'Neural Motivator' },
        flagship = 'Genesis',
        flagshipDescription = "At the end of the status phase, place 1 infantry from your reinforcements in this system’s space area.",
        extraCommandTokens = 1,
    },

    ['The Ghosts Of Creuss'] = {
        tokenName = 'Ghosts of Creuss',
        startingUnits = { Infantry = 4, Fighter = 2, Destroyer = 2, Carrier = 1, Space_Dock = 1 },
        startingTech = { 'Gravity Drive' },
        flagship = 'Hil Colish',
        flagshipDescription = "This ship’s system contains a delta wormhole.  During movement, this ship may move before or after your other ships.",
    },

    ['The L1Z1X Mindnet'] = {
        tokenName = 'L1Z1X Mindnet',
        startingUnits = { Infantry = 5, Fighter = 3, Carrier = 1, Dreadnought = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Neural Motivator', 'Plasma Scoring' },
        flagship = '[0.0.1]',
        flagshipDescription = 'During a space combat, hits produced by this ship and by your dreadnoughts in this system must be assigned to non-fighter ships if able.',
    },

    ['The Mentak Coalition'] = {
        tokenName = 'Mentak Coalition',
        startingUnits = { Infantry = 4 ,Fighter = 3, Cruiser = 2, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Sarween Tools', 'Plasma Scoring' },
        flagship = 'Fourth Moon',
        flagshipDescription = "Other players’ ships in this system cannot use SUSTAIN DAMAGE.",
    },

    ['The Naalu Collective'] = {
        tokenName = 'Naalu Collective',
        startingUnits = { Infantry = 4, Fighter = 3, Destroyer = 1, Cruiser = 1, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Neural Motivator', 'Sarween Tools' },
        flagship = 'Matriarch',
        flagshipDescription = 'During an invasion in this system, you may commit fighters to planets as if they were ground forces.  When combat ends, return those units to the space area.',
    },

    ['The Nekro Virus'] = {
        tokenName = 'Nekro Virus',
        startingUnits = { Infantry = 2, Fighter = 2, Cruiser = 1, Carrier = 1, Dreadnought = 1, Space_Dock = 1 },
        startingTech = { 'Dacxive Animators', 'Valefar Assimilator X', 'Valefar Assimilator Y' },
        flagship = 'The Alastor',
        flagshipDescription = 'At the start of space combat, choose any number of your ground forces in this system to participate in that combat as is they were ships.  These ground forces do not count against fleet supply.',
    },

    ["The Sardakk N'orr"] = {
        tokenName = "Sardakk N'orr",
        startingUnits = { Infantry = 5, Cruiser = 1, Carrier = 2, Space_Dock = 1, PDS = 1 },
        startingTech = {},
        flagship = "C'morran N'orr",
        flagshipDescription = "Apply +1 to the result of each of your other ship’s combat rolls in this system.",
    },

    ['The Universities of Jol-Nar'] = {
        tokenName = 'Universities of Jol-Nar',
        startingUnits = { Infantry = 2, Fighter = 1, Carrier = 2, Dreadnought = 1, Space_Dock = 1, PDS = 2 },
        startingTech = { 'Antimass Deflectors', 'Neural Motivator', 'Sarween Tools', 'Plasma Scoring' },
        flagship = 'J.N.S. Hylarim',
        flagshipDescription = 'When making a combat roll for this ship, each result of 9 or 10, before applying modifiers, produces 2 extra hits.',
    },

    ['The Winnu'] = {
        tokenName = 'Winnu',
        startingUnits = { Infantry = 2, Fighter = 2, Cruiser = 1, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Antimass Deflectors', 'Neural Motivator', 'Sarween Tools', 'Plasma Scoring' },
        flagship = 'Salai Sai Corian',
        flagshipDescription = "When this unit makes a combat roll, it rolls a number of dice equal to the number of your opponent’s non-fighter ships in this system.",
    },

    ['The Xxcha Kingdom'] = {
        tokenName = 'Xxcha Kingdom',
        startingUnits = { Infantry = 4, Fighter = 3, Cruiser = 2, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Graviton Laser System' },
        flagship = 'Loncara Ssodu',
        flagshipDescription = "You may use this unit’s SPACE CANNON against ships that are in adjacent systems.  SPACE CANNON 5 (X3)",
    },

    ['The Yin Brotherhood'] = {
        tokenName = 'Yin Brotherhood',
        startingUnits = { Infantry = 4, Fighter = 4, Destroyer = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Sarween Tools' },
        flagship = 'Van Hauge',
        flagshipDescription = 'When this ship is destroyed, destroy all ships in this system.',
    },

    ['The Yssaril Tribes'] = {
        tokenName = 'Yssaril Tribes',
        startingUnits = { Infantry = 5, Fighter = 2, Cruiser = 1, Carrier = 2, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Neural Motivator' },
        flagship = "Y'sia Y'ssrila",
        flagshipDescription = "This ship can move through systems that contain another players’ ships.",
        extraActionCards = 1,
    },

    -- Tactic Blue's homebrew
    ['The Advent'] = {
        tokenName = 'Advent',
        startingUnits = { Infantry = 2, Fighter = 6, Destroyer = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Neural Motivator', 'Sarween Tools' },
        flagship = 'Advent Flagship',
        flagshipDescription = '',
    },

    ['The Drahn Consortium'] = {
        tokenName = 'Drahn Consortium',
        startingUnits = { Infantry = 4, Fighter = 3, Destroyer = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Neural Motivator', 'Plasma Scoring' },
        flagship = 'Nightingale II',
        flagshipDescription = 'Other players cannot play action cards during a space combat in this system.',
    },

    ['The Free Systems Alliance'] = {
        tokenName = 'Free Systems Alliance',
        startingUnits = { Infantry = 4, Fighter = 2, Cruiser = 2, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Neural Motivator' },
        flagship = 'Vox',
        flagshipDescription = 'When this unit makes a combat roll, it rolls 1 additional die for each planet in this system of any single trait.',
    },

    ['The Fremen'] = {
        tokenName = 'Fremen',
        startingUnits = { Infantry = 7, Fighter = 2, Cruiser = 2, Carrier = 1, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors' },
        flagship = 'Shai-Hulud',
        flagshipDescription = 'During a round of combat in the system, 1 unit you control may roll 1 additional combat die.',
    },

    ['The Gheldor Authority'] = {
        tokenName = 'Gheldor Authority',
        startingUnits = { Infantry = 4, Fighter = 2, Destroyer = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Magen Defense Grid' },
        flagship = "Gheld'Atar",
        flagshipDescription = 'Units you control that are on planets adjacent to this system cannot lose PLANETARY SHIELD.',
    },

    ['The HCEN Defense System'] = {
        tokenName = 'HCEN Defense System',
        startingUnits = { Infantry = 3, Cruiser = 1, Carrier = 1, PDS = 2, Space_Dock = 1 },
        startingTech = { 'Graviton Laser System' },
        flagship = 'Locus',
        flagshipDescription = 'At the start of your turn, you may move 1 of your PDS to a planet you control in this system.',
    },

    ['The Khet Drakkol Union'] = {
        tokenName = 'Khet Drakkol Union',
        startingUnits = { Infantry = 4, Fighter = 3, Destroyer = 1, Dreadnought = 2, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Sarween Tools' },
        flagship = 'Khage',
        flagshipDescription = '',
    },

    ['The Kortali Horde'] = {
        tokenName = 'Kortali Horde',
        startingUnits = { Infantry = 5, Fighter = 3, Cruiser = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Dacxive Animators' },
        flagship = "For'xdar",
        flagshipDescription = 'Planets controlled by other players in this system cannot be readied.',
    },

    ['The Lazax'] = {
        tokenName = 'Lazax',
        startingUnits = { Infantry = 3, Fighter = 2, Cruiser = 1, Carrier = 1, Dreadnought = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Antimass Deflectors', 'Neural Motivator', 'Sarween Tools', 'Plasma Scoring' },
        flagship = 'Regulus',
        flagshipDescription = 'When this unit makes a combat roll, it rolls 1 additional die for each victory point you have.',
    },

    ['The Mahact Sorcerer Kings'] = {
        tokenName = '',
        startingUnits = { Infantry = 4, Fighter = 2, Cruiser = 1, Carrier = 2, Space_Dock = 1, PDS = 2 },
        startingTech = { },
        flagship = "Noctul H'rgan",
        flagshipDescription = "Other units you control in this system may instead have the abilities and attributes of another player’s units of the same type in this system.",
    },

    ['The Mandalorian Clans'] = {
        tokenName = 'Mandalorian Clans',
        startingUnits = { Infantry = 5, Fighter = 2, Cruiser = 2, Carrier = 1, Space_Dock = 1 },
        startingTech = { 'Neural Motivator', 'Antimass Deflectors' },
        flagship = "Kyr'tsad",
        flagshipDescription = 'This ship cannot be destroyed by Direct Hit action cards.',
    },

    ["The Navigators' Guild"] = {
        tokenName = "Navigators' Guild",
        startingUnits = { Infantry = 4, Fighter = 1, Cruiser = 1, Carrier = 2, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors', 'Sarween Tools' },
        flagship = 'Chogra Tuhn',
        flagshipDescription = "Other players' ships cannot move through this unit’s system.",
    },

    ['The Rhodyn Migrant Fleet'] = {
        tokenName = 'Rhodyn Migrant Fleet',
        startingUnits = { Infantry = 4, Fighter = 2, Destroyer = 1, Space_Dock = 1, Flagship = 1 },
        startingTech = { 'Gravity Drive' },
        flagship = 'Mho Rhodyn',
        flagshipDescription = "At the end of the status phase, place 1 fighter from your reinforcements into this system’s space area."
    },

    ['The Trader Emergency Coalition'] = {
        tokenName = 'Trader Emergency Coalition',
        startingUnits = { Infantry = 2, Fighter = 2, Cruiser = 1, Destroyer = 1, Carrier = 1, Space_Dock = 2 },
        startingTech = { 'Sarween Tools', 'Plasma Scoring' },
        flagship = 'Trader Flagship',
        flagshipDescription = '',
    },

    ['The Vasari Empire'] = {
        tokenName = 'Vasari Empire',
        startingUnits = { Infantry = 3, Fighter = 2, Destroyer = 1, Carrier = 1, Dreadnought = 1, Space_Dock = 1 },
        startingTech = { 'Antimass Deflectors', 'Plasma Scoring' },
        flagship = 'Vasari Flagship',
        flagshipDescription = '',
    },

    ['The Veldyr Sovereignty'] = {
        tokenName = 'Veldyr Sovereignty',
        startingUnits = { Infantry = 3, Fighter = 2, Destroyer = 1 ,Dreadnought = 1, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Plasma Scoring' },
        flagship = 'Richtyrian',
        flagshipDescription = 'When this ship makes a combat roll, it rolls 1 additional die for each round of space combat that has been resolved this combat.',
    },

    ['The Zeth Contingency'] = {
        tokenName = 'Zeth Contingency',
        startingUnits = { Infantry = 3, Fighter = 2, Destroyer = 2, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Antimass Deflectors', 'Neural Motivator', 'Sarween Tools', 'Plasma Scoring' },
        flagship = "Eru'Ishon",
        flagshipDescription = 'When this unit makes a combat roll, it rolls a number of dice equal to the greatest number of technologies you control in any color.',
    },

    ['The Savages of Cymiae'] = {
        tokenName = 'Savages of Cymiae',
        startingUnits = { Infantry = 2, Fighter = 2, Cruiser = 1, Carrier = 1, Space_Dock = 1, PDS = 1 },
        startingTech = { 'Plasma Scoring', 'Magen Defense Grid' },
        flagship = 'Robotic Reprocessing Center',
        flagshipDescription = 'Your infantry in this system gain SUSTAIN DAMAGE during ground combat.',
    },
}


local _colorToFaction = {}

local _update = {
    time = false,
    periodicUpdateSeconds = 10,
}

function allFactions(includeFactionsNotAtTable)
    assert(not includeFactionsNotAtTable or type(includeFactionsNotAtTable) == 'boolean')
    if includeFactionsNotAtTable then
        return _factionAttributes
    else
        _maybeUpdate()
        return _colorToFaction
    end
end

function fromColor(color)
    assert(type(color) == 'string')
    _maybeUpdate()
    return _colorToFaction[color]
end

function _maybeUpdate()
    if not _update.time or (Time.time - _update.time) > _update.periodicUpdateSeconds then
        _update.time = Time.time

        local factionLowerToFactionName = {}
        for factionName, _ in pairs(_factionAttributes) do
            factionLowerToFactionName[string.lower(factionName)] = factionName
        end

        -- Find command sheets (indexed by color), faction sheets (indexed by
        -- faction name), and command token bags (indexed by "token faction" name,
        -- which may differ slightly from the faction sheet faction name).
        local colorToCommandSheet = {}
        local factionSheetGuidToFactionSheet = {}
        local factionSheetGuidToFactionName = {}
        for _, object in ipairs(getAllObjects()) do
            local name = object.getName()
            local guid = object.getGUID()

            -- "Command Sheet (COLOR)"
            local color = string.match(name, '^Command Sheet %((%a+)%)$')
            if color then
                colorToCommandSheet[color] = object
            end

            -- "FACTION Sheet" (only accept if FACTION in whitelist!)
            -- Replace name with "expected" case, sometimes "of" vs "Of" depending on object.
            local factionName = string.match(name, '^(.+) Sheet$')
            factionName = factionName and factionLowerToFactionName[string.lower(factionName)]
            if factionName then
                factionSheetGuidToFactionSheet[guid] = object
                factionSheetGuidToFactionName[guid] = factionName
            end
        end

        -- Given a key/object-value table, return a map from command sheet color
        -- to the key whose object is closest to the command sheet AND VICE VERSA.
        -- For example, consider a table with an empty seat that has a command sheet
        -- but no faction sheet.  In that case, that orphaned command sheet does
        -- have a closest faction sheet, but that faction sheet is closer to another.
        -- Likewise consider an extra faction sheet placed on the table for some
        -- reason.  That faction sheet has a closest command sheet, but that
        -- command sheet is closer to another.
        local function distanceSq(p1, p2)
            return (p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2
        end
        local function minKV(map, f)
            local bestF = false
            local bestK = false
            for k, v in pairs(map) do
                local thisF = f(v)
                if not bestF or thisF < bestF then
                    bestF = thisF
                    bestK = k
                end
            end
            return bestK, map[bestK]
        end
        local function colorToClosestKey(keyToObjectTable)
            local result = {}
            -- Assign each object to its closest command sheet.
            local colorToKeys = {}
            for key, object in pairs(keyToObjectTable) do
                local objectPosition = object.getPosition()
                local function distance(commandSheet)
                    local commandSheetPosition = commandSheet.getPosition()
                    return distanceSq(objectPosition, commandSheetPosition)
                end
                local color, _ = minKV(colorToCommandSheet, distance)
                if color then
                    local entry = colorToKeys[color]
                    if not entry then
                        entry = {}
                        colorToKeys[color] = entry
                    end
                    table.insert(entry, key)
                end
            end
            -- For each color, get the closest candidate object.
            for color, keys in pairs(colorToKeys) do
                local colorPosition = colorToCommandSheet[color].getPosition()
                local function distance(key)
                    local objectPosition = keyToObjectTable[key].getPosition()
                    return distanceSq(objectPosition, colorPosition)
                end
                local _, key = minKV(keys, distance)
                result[color] = key
            end
            return result
        end

        -- Map command sheet color to nearest faction, tokenFaction, and seated player.
        local colorToFactionSheetGuid = colorToClosestKey(factionSheetGuidToFactionSheet)

        _colorToFaction = {}
        for color, _ in pairs(colorToFactionSheetGuid) do
            local attributes = {
                color = color,
                commandSheetGuid = colorToCommandSheet[color].getGUID(),
                factionSheetGuid = colorToFactionSheetGuid[color],
            }
            for k, v in pairs(_factionAttributes[factionName]) do
                attributes[k] = v
            end
            _colorToFaction[color] = attributes
        end
    end
end

function onLoad(saveState)
    self.setColorTint({ r = 0.25, g = 0.25, b = 0.25 })
    self.setScale({ x = 2, y = 0.01, z = 2 })
    self.setName('TI4_FACTION_HELPER')
    self.setDescription('Shared helper functions used by other objects, PLEASE LEAVE ON TABLE! This object is only visible to the black (GM) player.')

    -- Only the GM/black player can see this object.  Others can still interact!
    local invisibleTo = {}
    for _, color in ipairs(Player.getColors()) do
        if color ~= 'Black' then
            table.insert(invisibleTo, color)
        end
    end
    self.setInvisibleTo(invisibleTo)

    -- Add faction names to attributes.
    for factionName, attributes in pairs(_factionAttributes) do
        attributes.name = factionName
    end
end
