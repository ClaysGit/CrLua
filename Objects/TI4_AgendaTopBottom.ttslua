--- Add context menu to agenda cards to "top" and "bottom" during politics.
-- @author Darrell

local AGENDA_DECK = {
    transforms = {
        [6] = {
            position = { x = -70.68, y = 1.7, z = 15.42 },
            rotation = { x = 0, y = 90, z = 180 },
        },
        [8] = {
            position = { x = 83.29, y = 5.65, z = -16.34 },
            rotation = { x = 0, y = 90, z = 180 },
        }
    },
    cards = {
        'Anti-Intellectual Revolution',
        'Archived Secret',
        'Arms Reduction',
        'Classified Document Leaks',
        'Colonial Redistribution',
        'Committee Formation',
        'Compensated Disarmament',
        'Conventions of War',
        'Core Mining',
        'Demilitarized Zone',
        'Economic Equality',
        'Enforced Travel Ban',
        'Executive Sanctions',
        'Fleet Regulations',
        'Holy Planet of Ixth',
        'Homeland Defense Act',
        'Imperial Arbiter',
        'Incentive Program',
        'Ixthian Artifact',
        'Judicial Abolishment',
        'Minister of Commerce',
        'Minister of Exploration',
        'Minister of Industry',
        'Minister of Peace',
        'Minister of Policy',
        'Minister of Sciences',
        'Minister of War',
        'Miscount Disclosed',
        'Mutiny',
        'New Constitution',
        'Prophecy of Ixth',
        'Public Execution',
        'Publicize Weapon Schematics',
        'Regulated Conscription',
        'Representative Government',
        'Research Team - Biotic',
        'Research Team - Cybernetic',
        'Research Team - Propulsion',
        'Research Team - Warfare',
        'Seed of an Empire',
        'Senate Sanctuary',
        'Shard of the Throne',
        'Shared Research',
        'Swords to Plowshares',
        'Terraforming Initiative',
        'The Crown of Emphidia',
        'The Crown of Thanlos',
        'Unconventional Measures',
        'Wormhole Reconstruction',
        'Wormhole Research',
    }
}

local data = {
    agendaCardNameSet = false,
    numCommandSheets = false,
    cardObjectToFunctionName = {},
}

-------------------------------------------------------------------------------

function onObjectLeaveContainer(container, leaveObject)
    if isAgendaCard(leaveObject) then
        local function putTop(playerColor)
            printToAll('Put agenda top', playerColor)
            put(leaveObject, true)
        end
        local function putBottom(playerColor)
            printToAll('Put agenda bottom', playerColor)
            put(leaveObject, false)
        end
        local function clearMenu(playerColor)
            leaveObject.clearContextMenu()
        end
        leaveObject.addContextMenuItem('Place Agenda Top', putTop, false)
        leaveObject.addContextMenuItem('Place Agenda Bottom', putBottom, false)
        leaveObject.addContextMenuItem('Clear Place Options', clearMenu, false)
    end
end

function onObjectEnterContainer(container, enterObject)
    if isAgendaCard(enterObject) then
        enterObject.clearContextMenu()
    end
end

-------------------------------------------------------------------------------

function put(cardObject, onTop)
    assert(type(cardObject) == 'userdata' and cardObject.tag == 'Card' and type(onTop) == 'boolean')
    local transform = getAgendaDeckTransform()

    -- Teleport to near (jump out of hand, if in hand).
    local nearby = { x = transform.position.x * 0.8, y = transform.position.y + 5, z = transform.position.z * 0.8 }
    cardObject.setPosition(nearby)
    cardObject.setRotation(transform.rotation)

    local function finishPut()
        -- Smooth to final position.
        transform.position.y = transform.position.y + (onTop and 3 or 0)
        local isCollide = false
        local isFast = false
        cardObject.setPositionSmooth(transform.position, isCollide, isFast)
    end
    Wait.frames(finishPut, 2)
end

-------------------------------------------------------------------------------

function isAgendaCard(object)
    if not data.agendaCardNameSet then
        data.agendaCardNameSet = {}
        for _, name in ipairs(AGENDA_DECK.cards) do
            data.agendaCardNameSet[name] = true
        end
    end
    return object.tag == 'Card' and data.agendaCardNameSet[object.getName()] or false
end

function getAgendaDeckTransform()
    if not data.numCommandSheets then
        data.numCommandSheets = 0
        for _, object in ipairs(getAllObjects()) do
            local name = object.getName()
            if string.match(name, '^Command Sheet %((%a+)%)$') then
                data.numCommandSheets = data.numCommandSheets + 1
            end
        end
        data.numCommandSheets = data.numCommandSheets == 8 and 8 or 6
    end
    local t = AGENDA_DECK.transforms[data.numCommandSheets]
    return {
        position = { x = t.position.x, y = t.position.y, z = t.position.z },
        rotation = { x = t.rotation.x, y = t.rotation.y, z = t.rotation.z },
    }
end
