-------------------------------------------------------------------------------
--- Auto-fill the TTS/TI4 MultiRoller
-- TTS/TI4 by Darth Batman and Raptor1210.
-- TI4 MultiRoller by the_Mantis and GarnetBear
-- @author Darrell
--
-- This script keeps track of the last activated system (command token dropped
-- by the active player this turn), and fills the MultiRoller.
--
-- The active fleet takes into account if the MultiRoller belongs to attacker,
-- defender, or third party who happens to have range with an adjacent PDS2.
-- Per-planet combats assign units to the closest planet.
--
-- It scans for Antimass Deflector on the other party, and selects the best unit
-- for Plasma Scoring.
--
-- PDS2 targets adjacent and through-wormhole, including the Creuss flagship's
-- mobile delta wormhole.  The Winnu flagship sets its count to the number of
-- non-fighter opponents.  The Xxcha flagship has an adjacent-reaching PDS.
--
-- Creuss players might want to enable "grid" on their homeworld so it aligns well
-- with the table grid, making sure units on the planet are counted.
--
-- This requires Turns be enabed to ignore when a non-active player touches a
-- command token.  (Turns are automatically enabled via the "place trade goods
-- and set turns" button.)  For a hot-seat like environment, a player must
-- change color to current active turn in order to recognize system activation.
-------------------------------------------------------------------------------

local TAG = 'AutoFillMultiRoller'

local data = {
    visualizeHexes = false,
    colorToMultiRoller = false,
    lastActivatedPosition = false,
    perPlanetButtons = {}  -- map from function name to button index
}

local AUTOFILL_TYPE = {
    SPACE_CANNON_OFFENSE = { name = 'Space Cannon Offense', clickButtonLabel = 'SPC' },
    ANTI_FIGHTER_BARRAGE = { name = 'Anti-Fighter Barrage', clickButtonLabel = 'AFB' },
    SPACE_COMBAT = { name = 'Space Combat', clickButtonLabel = 'CMBT' },
    BOMBARDMENT = { name = 'Bombardment', perPlanet = true, clickButtonLabel = 'BOMB' },
    SPACE_CANNON_DEFENSE = { name = 'Space Cannon Defense', perPlanet = true, clickButtonLabel = 'SPC' },
    GROUND_COMBAT = { name = 'Ground Combat', perPlanet = true, clickButtonLabel = 'CMBT' }
}

local PLASMA_SCORING_BUTTON = {
    ['Flagship'] = 'PS1',
    ['War Sun'] = 'PS2',
    ['Dreadnought'] = 'PS4',
    ['PDS'] = 'PS9',
    ['Space Dock'] = 'PS10'
}

local CARDS = {
    ['PDS II'] = { owner = 'us' },
    ['Antimass Deflectors'] = { owner = 'them' },
    ['Plasma Scoring'] = { owner = 'us' },
    ['Experimental Battlestation'] = { owner = 'us' }
}

-------------------------------------------------------------------------------

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

-------------------------------------------------------------------------------

function onLoad(save_state)
    CrLua.Log.d(TAG, 'onLoad')
    Wait.frames(updateUi, 2)
end

function onPlayerTurnStart(playerColorStart, playerColorPrevious)
    CrLua.Log.d(TAG, 'onPlayerTurnStart: clearing last activated position')
    data.lastActivatedPosition = false
    updateUi()
end

function onObjectDrop(playerColor, droppedObject)
    local isPlayerCurrentTurn = playerColor == Turns.turn_color
    if not isPlayerCurrentTurn then
        return
    end
    local isCommandToken = string.find(droppedObject.getName(), ' Command Token')
    if not isCommandToken then
        return
    end
    local system = _systemHelper.systemFromPosition(droppedObject.getPosition())
    if not system then
        return  -- ignore tokens not dropped on a system
    end

    CrLua.Log.d(TAG, 'onObjectDrop: activated by ' .. playerColor)
    data.lastActivatedPosition = droppedObject.getPosition()
    updateUi()
end

-------------------------------------------------------------------------------

function updateColorToMultiRoller()
    local multiRollers = {}
    local colorToPosition = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if string.match(name, '^TI4 MultiRoller') then
            object = CrLua.TTS.ClickButtonHack.inject(object)
            table.insert(multiRollers, object)
        end
        local color = string.match(name, '^Command Sheet %((%a+)%)$')
        if color then
            colorToPosition[color] = object.getPosition()
        end
    end

    data.colorToMultiRoller = {}
    for color, position in pairs(colorToPosition) do
        local function distance(multiRoller)
            return CrLua.Util.distanceSq(multiRoller.getPosition(), position)
        end
        local _, multiRoller = CrLua.Util.min(multiRollers, distance)
        data.colorToMultiRoller[color] = multiRoller
    end
end

-------------------------------------------------------------------------------

function getButtonId(autoFillType, planetIndex)
    assert(AUTOFILL_TYPE[autoFillType])
    assert(not planetIndex or type(planetIndex) == 'number')
    return autoFillType .. '@' .. (planetIndex or 0)
end

function onButtonClick(player, option, id)
    CrLua.Log.d(TAG, 'onButtonClick: id=' .. id)
    local clickerColor = assert(player and player.color)
    local altClick = tonumber(option) == -2 and true or false
    local autoFillType, planetIndex = string.match(id, '^([%a_]+)@(%d)$')
    planetIndex = tonumber(planetIndex)
    CrLua.Log.d(TAG, 'onButtonClick: ' .. table.concat({
        'color=' .. clickerColor,
        'altClick=' .. tostring(altClick),
        'type=' .. (autoFillType or 'nil'),
        'planetIndex=' .. (planetIndex or 'nil'),
    }, ' '))

    autoFill({
        clickerColor = clickerColor,
        altClick = altClick and true or false,
        autoFillType = autoFillType,
        planetIndex = planetIndex > 0 and planetIndex or false,
    })
end

-------------------------------------------------------------------------------

function updateUi()
    local system = data.lastActivatedPosition and _systemHelper.systemFromPosition(data.lastActivatedPosition)
    local planets = system and system.planets or {}

    local result = {}

    local function getAutoFillButton(autoFillType, planetIndex)
        assert(AUTOFILL_TYPE[autoFillType])
        assert(not planetIndex or type(planetIndex) == 'number')

        local tooltip = AUTOFILL_TYPE[autoFillType].name

        local buttonLabel = AUTOFILL_TYPE[autoFillType].name
        if planetIndex == 0 then
            buttonLabel = '---'
        elseif planetIndex then
            buttonLabel = planets[planetIndex].name
        end

        return {
            tag = 'Button',
            attributes = {
                id = getButtonId(autoFillType, planetIndex),
                --tooltip = tooltip,
                --tooltipPosition = 'Above'
            },
            value = buttonLabel
        }
    end

    local function getLabel(autoFillType)
        return {
            tag = 'Text',
            value = AUTOFILL_TYPE[autoFillType].name
        }
    end

    local function getAutoFillButtonRow(autoFillType)
        local row = {}
        for i = 1, math.max(1, #planets) do
            table.insert(row, getAutoFillButton(autoFillType, i <= #planets and i or 0))
        end
        return {
            tag = 'HorizontalLayout',
            children = row
        }
    end

    local function getAutoFillElements()
        return {
            {
                tag = 'HorizontalLayout',
                children = {
                    getAutoFillButton('SPACE_CANNON_OFFENSE', false),
                    getAutoFillButton('ANTI_FIGHTER_BARRAGE', false),
                }
            },
            {
                tag = 'HorizontalLayout',
                children = {
                    getAutoFillButton('SPACE_COMBAT', false),
                }
            },
            getLabel('BOMBARDMENT'),
            getAutoFillButtonRow('BOMBARDMENT'),
            getLabel('SPACE_CANNON_DEFENSE'),
            getAutoFillButtonRow('SPACE_CANNON_DEFENSE'),
            getLabel('GROUND_COMBAT'),
            getAutoFillButtonRow('GROUND_COMBAT'),
        }
    end

    self.UI.setXmlTable({
        {
            tag = 'Defaults',
            children = {
                {
                    tag = 'Button',
                    attributes = {
                        onClick = 'onButtonClick',
                        fontSize = 12,
                        fontStyle = 'Bold',
                    }
                },
                {
                    tag = 'Text',
                    attributes = {
                        fontSize = 10,
                        fontStyle = 'Bold',
                        alignment = 'MiddleCenter',
                        horizontalOverflow = 'Overflow',
                        verticalOverflow = 'Overflow',
                        preferredHeight = 12,
                    }
                },
                {
                    tag = 'VerticalLayout',
                    attributes = {
                        padding = '10 10 10 10',
                        spacing = 5,
                    }
                },
                {
                    tag = 'HorizontalLayout',
                    attributes = {
                        spacing = 5,
                    }
                },
            }
        },
        {
            tag = 'Panel',
            attributes = {
                position = '0 0 2',  -- 0.05
                rotation = '0 180 90',
                width = 200,
                height = 280,
            },
            children = {
                {
                    tag = 'VerticalLayout',
                    attributes = {
                        childForceExpandHeight = false,
                    },
                    children = getAutoFillElements()
                },
            }
        }
    })
end

-------------------------------------------------------------------------------

--- Get the hex and adjacent hexes from a position.
function getHexes(position)
    assert(type(position) == 'table' and type(position.x) == 'number')

    -- Get this hex, and adjacent hexes.
    local hex = CrLua.TI4.Hex.fromPosition(position)
    local adjacentHexes = CrLua.TI4.Hex.neighbors(hex)

    -- Get the wormholes in this hex, plus other wormhole-adjacent hexes.
    -- As a side-effect, the filter function adds 'hex' to each wormhole.
    local function isWormholeInSelfHex(wormhole)
        local position = wormhole.object.getPosition()
        wormhole.hex = CrLua.TI4.Hex.fromPosition(position)
        return wormhole.hex == hex
    end
    local wormholes, adjacentWormholes = CrLua.TI4.Wormhole.getAllWormholes(isWormholeInSelfHex)
    for _, wormhole in ipairs(adjacentWormholes) do
        table.insert(adjacentHexes, wormhole.hex)
    end

    -- Remove any duplicates.
    adjacentHexes = CrLua.List.unique(adjacentHexes)

    if data.visualizeHexes then
        local lines = {}
        table.insert(lines, CrLua.TI4.Hex.vectorLine(hex, { color = {1,0,0} }))
        for _, adjacentHex in ipairs(adjacentHexes) do
            table.insert(lines, CrLua.TI4.Hex.vectorLine(adjacentHex, { color = {0,1,0} }))
        end
        Global.setVectorLines(lines)
    end

    return hex, adjacentHexes
end

--- Get units in the position's hex, as well as units in adjacent hexes.
function getUnits(hex, adjacentHexes)
    assert(type(hex) == 'string' and not adjacentHexes or type(adjacentHexes) == 'table')

    -- Get units in this hex and adjacent hexes.
    -- As a side-effect, filter adds 'hex' to each unit.
    local adjacentHexesSet = CrLua.List.toSet(adjacentHexes or {})
    local function isInSelfOrAdjacentHex(unit)
        local position = unit.object.getPosition()
        unit.hex = CrLua.TI4.Hex.fromPosition(position)
        return unit.hex == hex or adjacentHexesSet[unit.hex]
    end
    local units = CrLua.TI4.Unit.getAllUnits(isInSelfOrAdjacentHex)

    -- Split into in-hex and in-adjacent hex lists.
    local unitsInHex = {}
    local unitsInAdjacent = {}
    for _, unit in ipairs(units) do
        if unit.hex == hex then
            table.insert(unitsInHex, unit)
        else
            table.insert(unitsInAdjacent, unit)
        end
    end

    -- Fill in any missing colors (anonymous 'x3 Infantry' tokens, etc).
    -- Only do this for the hex in question.
    CrLua.TI4.Unit.assignUnitTokenColors(unitsInHex)

    return unitsInHex, unitsInAdjacent
end

--- Get cards if held by appropriate player.
function getCards(selfColor, enemyColor)
    local objectNames = CrLua.List.fromKeys(CARDS)
    local objectsByName = CrLua.TTS.Object.getByName(objectNames)

    local result = {}
    for cardName, cardObjects in pairs(objectsByName) do
        for _, cardObject in ipairs(cardObjects) do
            if not cardObject.is_face_down then
                local owner = CARDS[cardName].owner
                local zone = owner == 'us' and selfColor or enemyColor
                if zone and _zoneHelper.zoneFromPosition(cardObject.getPosition()) == zone then
                    table.insert(result, cardName)
                    break
                end
            end
        end
    end
    return result
end

-------------------------------------------------------------------------------

function autoFill(params)
    assert(type(params.clickerColor) == 'string', 'clickerColor')
    assert(type(params.altClick) == 'boolean', 'altClick')
    assert(AUTOFILL_TYPE[params.autoFillType], 'autoFillType')
    assert(not params.planetIndex or type(params.planetIndex) == 'number', 'planetIndex')

    local autofillTypeAttributes = assert(AUTOFILL_TYPE[params.autoFillType])

    updateColorToMultiRoller()
    CrLua.TI4.Faction.update()

    local multiRoller = data.colorToMultiRoller[params.clickerColor]
    if not multiRoller then
        printToAll(TAG .. ': no MultiRoller for ' .. params.clickerColor, {1,0,0})
        return
    end

    if not data.lastActivatedPosition then
        printToAll(TAG .. ': no activated system', {1,0,0})
        return
    end

    local activatingColor = Turns.turn_color
    if not activatingColor then
        printToAll(TAG .. ': no activating player', {1,0,0})
        return
    end

    -- Get units in hex and adjacent (including wormholes) systems.
    local hex, adjacent = getHexes(data.lastActivatedPosition)
    local unitsInHex, unitsInAdjacent = getUnits(hex, adjacent)

    -- If per-planet, restrict to units in hex to those on the given planet.
    local planet = false
    if params.planetIndex then
        local system = _systemHelper.systemFromPosition(data.lastActivatedPosition)
        if system and system.planets and #system.planets >= params.planetIndex then
            planet = system.planets[params.planetIndex].name
            local onPlanet = {}
            for _, unit in ipairs(unitsInHex) do
                local p = _systemHelper.planetFromPosition({
                    systemGuid = system.guid,
                    position = unit.object.getPosition(),
                    exact = false
                })
                if p and p.name == planet then
                    table.insert(onPlanet, unit)
                elseif unit.unitName == 'Fighter' or unit.unitName == 'Flagship' then
                    -- Also include fighters and flagship in order to include
                    -- them in ground combat if the Naalu flagship.  This will
                    -- get filtered out later if not Naalu.
                    table.insert(onPlanet, unit)
                end
            end
            unitsInHex = onPlanet
            unitsInAdjacent = {}
        end
    end

    -- Deduce enemy color as the only non-self in the system.
    local enemyColors = CrLua.TI4.Unit.getEnemyColors(params.clickerColor, activatingColor, unitsInHex)
    if enemyColors and #enemyColors > 1 then
        error(TAG .. ': multiple enemies? (' .. table.concat(enemyColors, ', ') .. ')')
    end
    local enemyColor = enemyColors and enemyColors[1]

    -- Split into self and enemy units.
    local selfUnitsInHex = CrLua.TI4.Unit.filterToColor(unitsInHex, params.clickerColor)
    local selfUnitsAdacent = CrLua.TI4.Unit.filterToColor(unitsInAdjacent, params.clickerColor)
    local enemyUnitsInHex = enemyColor and CrLua.TI4.Unit.filterToColor(unitsInHex, enemyColor) or {}
    unitsInHex = nil
    unitsInAdjacent = nil

    -- Get cards.
    local cards = getCards(params.clickerColor, enemyColor)
    local cardSet = CrLua.List.toSet(cards)

    -- Is bombardment allowed?
    local planetaryShield = false
    if enemyColor then
        local units = CrLua.TI4.Unit.filterToPlanetaryShield(enemyUnitsInHex)
        planetaryShield = planetaryShield or #units > 0
    end
    if params.clickerColor then
        local units = CrLua.TI4.Unit.filterToIgnorePlanetaryShield(selfUnitsInHex)
        planetaryShield = planetaryShield and #units == 0
    end

    -- Now get just the units that matter for the combat type.
    local fillUnits = {}
    local psUnit = false
    if autofillTypeAttributes == AUTOFILL_TYPE.SPACE_CANNON_OFFENSE then
        fillUnits = CrLua.TI4.Unit.filterToSpaceCannon(selfUnitsInHex)
        local adjacentSpaceCannons = CrLua.TI4.Unit.filterToSpaceCannon(selfUnitsAdacent)
        for _, unit in ipairs(adjacentSpaceCannons) do
            if unit.unitName == 'Flagship' or cardSet['PDS II'] then
                table.insert(fillUnits, unit)
            end
        end
        fillUnits, psUnit = CrLua.TI4.Unit.filterToSpaceCannon(fillUnits)
    elseif autofillTypeAttributes == AUTOFILL_TYPE.ANTI_FIGHTER_BARRAGE then
        fillUnits = CrLua.TI4.Unit.filterToAntiFighterBarrage(selfUnitsInHex)
    elseif autofillTypeAttributes == AUTOFILL_TYPE.SPACE_COMBAT then
        fillUnits = CrLua.TI4.Unit.filterToShips(selfUnitsInHex)
    elseif autofillTypeAttributes == AUTOFILL_TYPE.BOMBARDMENT then
        fillUnits, psUnit = CrLua.TI4.Unit.filterToBombardment(selfUnitsInHex)
        if planetaryShield then
            fillUnits = {}
        end
    elseif autofillTypeAttributes == AUTOFILL_TYPE.SPACE_CANNON_DEFENSE then
        fillUnits, psUnit = CrLua.TI4.Unit.filterToSpaceCannon(selfUnitsInHex)
    elseif autofillTypeAttributes == AUTOFILL_TYPE.GROUND_COMBAT then
        fillUnits = CrLua.TI4.Unit.filterToGround(selfUnitsInHex)
    else
        error(TAG .. ' unknown type "' .. typeAttributes.name .. "'")
    end

    -- Employ experimental battlestation?
    if autofillTypeAttributes == AUTOFILL_TYPE.SPACE_CANNON_OFFENSE and cardSet['Experimental Battlestation'] then
        -- Look for at least one local or adjacent.
        for _, unit in ipairs(CrLua.List.join(selfUnitsInHex, selfUnitsAdacent)) do
            if unit.unitName == 'Space Dock' then
                unit.special = 'Experimental Battlestation'
                table.insert(fillUnits, unit)
                psUnit = unit
                break
            end
        end
    end

    -- Clear psUnit if no plasma scoring.
    if not cardSet['Plasma Scoring'] then
        psUnit = false
    end

    -- Consolidate units to a single entry per type.
    local unitCount = {}
    local adjacentUnitCount = {}
    local special = {}
    for _, unit in ipairs(fillUnits or {}) do
        local unitName = assert(unit.unitName)
        local count = assert(unit.count)

        -- Respect non-fighter-dice ability.
        if unitName == 'Flagship' then
            local attrs = CrLua.TI4.Unit.attributes(unit)
            if attrs.nonFighterDice then
                count = #CrLua.TI4.Unit.filterToNonFighterShips(enemyUnitsInHex) or 0
            end
        end
        unitCount[unitName] = (unitCount[unitName] or 0) + count
        if unit.hex ~= hex then
            adjacentUnitCount[unitName] = (adjacentUnitCount[unitName] or 0) + count
        end
        special[unitName] = special[unitName] or unit.special
    end

    local prefix = { 'AutoFill ' .. autofillTypeAttributes.name }
    if planet then
        table.insert(prefix, '(' .. planet .. ')')
    end
    table.insert(prefix, params.clickerColor .. ' vs ' .. (enemyColor or '<unknown>'))
    local message = table.concat(prefix, ' ') .. ': '

    local messages = {}
    for unitName, count in pairs(unitCount) do
        local name = unitName
        if count > 1 and unitName ~= 'Infantry' and unitName ~= 'PDS' then
            name = name .. 's'
        end
        local message = count .. ' ' .. name
        if adjacentUnitCount[unitName] then
            message = message .. ' (' .. adjacentUnitCount[unitName] .. ' adjacent)'
        end
        if special[unitName] then
            message = message .. ' (' .. special[unitName] .. ')'
        end
        if psUnit and psUnit.unitName == unitName then
            message = message .. ' (Plasma Scoring)'
        end
        table.insert(messages, message)
    end
    if #messages == 0 then
        if autofillTypeAttributes == AUTOFILL_TYPE.BOMBARDMENT and planetaryShield then
            table.insert(messages, 'no units (Planetary Shield)')
        else
            table.insert(messages, 'no units')
        end
    end
    if cardSet['Antimass Deflectors'] then
        table.insert(messages, enemyColor .. ' has Antimass Deflectors')
    end
    if #messages > 0 then
        message = message .. table.concat(messages, ', ') .. '.'
    end
    printToAll(message, params.clickerColor)

    injectValues{
        multiRoller = assert(multiRoller),
        unitCount = assert(unitCount),
        hasAntimassDeflectors = cardSet['Antimass Deflectors'],
        suggestPdsUnitName = psUnit and psUnit.unitName,
        clickerColor = assert(params.clickerColor),
        clickButtonLabel = autofillTypeAttributes.clickButtonLabel,
        doClick = params.altClick
    }
end

-------------------------------------------------------------------------------

function injectValues(params)
    local multiRoller = assert(params.multiRoller)
    local color = assert(params.clickerColor)
    local unitCount = params.unitCount

    --multiRoller.call('resetCounters')
    CrLua.TTS.ClickButtonHack.invoke(multiRoller, 'RESET', color)

    local inputs = params.multiRoller.getInputs()
    for unitName, count in pairs(unitCount) do
        local inputLabel = 'UNIT:' .. unitName
        local found = false
        for _, input in ipairs(inputs) do
            if input.label == inputLabel then
                found = true
                params.multiRoller.editInput({ index = input.index, value = count })
                break
            end
        end
        if not found then
            error('Warning: no input ' .. inputLabel)
        end
    end

    if params.hasAntimassDeflectors then
        --multiRoller.call('clickAMD')
        CrLua.TTS.ClickButtonHack.invoke(multiRoller, 'AMD', color)
    end

    if params.suggestPdsUnitName then
        local button = assert(PLASMA_SCORING_BUTTON[params.suggestPdsUnitName])
        multiRoller.call(button)
    end

    -- "Update" by calling the associated function.  Call can only pass one argument!
    --multiRoller.call('detectCards', color)
    CrLua.TTS.ClickButtonHack.invoke(multiRoller, 'UPDATE', color)

    if params.doClick then
        CrLua.TTS.ClickButtonHack.invoke(multiRoller, params.clickButtonLabel, color)
    end
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/TI4/Faction>
#include <~/CrLua/TI4/Hex>
#include <~/CrLua/TI4/Unit>
#include <~/CrLua/TI4/Wormhole>

#include <~/CrLua/TTS/ClickButtonHack>
#include <~/CrLua/TTS/Object>
#include <~/CrLua/TTS/Player>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Polygon>
#include <~/CrLua/RedBlobHex>
#include <~/CrLua/Table>
#include <~/CrLua/Util>

--CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)
--#include <~/CrLua/UnitTest>
--CrLua.UnitTest.runTests(TAG, CrLua, true)

CrLua.assertRequired({
    'TI4.Hex',
    'TI4.Unit',
    'TI4.Wormhole',
    'TTS.Player',
    'TTS.ClickButtonHack',
    'List',
    'Log' })
CrLua.lock()
