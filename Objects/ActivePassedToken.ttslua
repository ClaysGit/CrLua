--- Active/passed token.
-- @author bonkersbgg at boardgamegeek.com
--
-- Place one token near each player, each token assigns itself to the closest
-- seated player.
--
-- When flipped to "passed" the token will automatically skip that player's
-- turn, broadcasting to all players that player has passed.
--
-- Once all players have passed, the token disables turns (via Turns.enable)
-- and all tokens flip back to active.

local TAG = 'ActivePassedToken'

-------------------------------------------------------------------------------
-- OBJECT EVENT METHODS

function onLoad()
    -- Wait to be at rest (might be flying from a container to intended
    -- destination), then attempt to assign to closest player's hand.  If there
    -- already exists a peer token for that color leave self unassigned.
    local function delayedResetTokenForNewOwner()
        if self.resting then
            resetTokenForNewOwner()
        else
            Wait.time(delayedResetTokenForNewOwner, 2)
        end
    end
    Wait.time(delayedResetTokenForNewOwner, 4)
    CrLua.Log.d(TAG, 'onLoad "' .. (self.getName() or '') .. '"')
end

function onDrop(player_color)
    -- If not yet assigned to a player, attempt to do so now.
    if not myColor() then
        resetTokenForNewOwner()
    end
end

function onPlayerTurnStart(playerColorStart, playerColorPrevious)
    CrLua.Log.d(TAG, 'onPlayerTurnStart ' .. (playerColorStart or 'nil'))

    -- If not yet assigned to a player, attempt to do so now.
    if not myColor() then
        resetTokenForNewOwner()
    end

    -- Do not manipulate any Turns state now, let all objects process the
    -- same turn start values and maybe pass the turn after a few frames.
    if isMyTurn() then
        Wait.frames(maybePassTurn, 2)
    end
end

-------------------------------------------------------------------------------

--- Get the color from an Active/Passed token object name.
-- @param name string : game Object name.
-- @return color string : color, or nil if not valid.
function objectNameToColor(name)
    -- All possible player colors (including "spectators").
    local validColorNames = {
        White = true, Brown = true, Red = true, Orange = true, Yellow = true,
        Green = true, Teal = true, Blue = true, Purple = true, Pink = true,
        Grey = true, Black = true
    }
    local color = string.match(name, '^Active/Passed %((%a+)%)$')
    -- Accept "Red", "red", "RED", and I suppose even "rED".
    color = color and (string.upper(string.sub(color, 1, 1)) .. string.lower(string.sub(color, 2)))
    return validColorNames[color] and color
end

--- Get an Active/Passed token object name for the given color.
function colorToObjectName(color)
    return string.format('Active/Passed (%s)', color or 'unassigned')
end

function defaultObjectName()
    return colorToObjectName()
end

function myColor()
    return objectNameToColor(self.getName())
end

-------------------------------------------------------------------------------

--- Is this object an Active/Passed token?
-- @param name string : peer game Object name.
-- @return boolean true if peer.
function isPeerName(name)
    local color = objectNameToColor(name)
    if color then
        CrLua.Log.d(TAG, 'isPeer found ' .. color)
    end
    return color and true
end

--- Get all Active/Passed tokens on the board.
-- @param includeSelf boolean include this object too?
-- @return table list of objects
function getPeers(includeSelf)
    local result = {}
    for _, object in ipairs(getAllObjects()) do
        if isPeerName(object.getName()) and (object ~= self or includeSelf) then
            table.insert(result, object)
        end
    end
    CrLua.Log.d(TAG, 'getPeers: found ' .. #result .. ' peers')
    return result
end

--- Make sure each player is in the list without repeats.
-- @return boolean true if all players have one token.
function sanityCheckPeersWithIncludeSelf(peers)
    local result = true
    local colorCount = {}
    for _, peer in ipairs(peers) do
        local color = objectNameToColor(peer.getName())
        if color then
            colorCount[color] = (colorCount[color] or 0) + 1
        end
    end
    for color, count in pairs(colorCount) do
        if count > 1 then
            result = false
            local player = Player[color]
            local name = (player and player.steam_name) or color
            printToAll('Warning: player ' .. name .. ' has multiple active/passed tokens', color)
        end
    end
    local seated = getSeatedPlayers()
    for _, color in ipairs(seated) do
        if not colorCount[color] then
            result = false
            local player = Player[color]
            local name = (player and player.steam_name) or color
            printToAll('Warning: player ' .. name .. ' does not have an active/passed token', color)
        end
    end
    return result
end

--- Is this token showing "active"?
-- @return boolean true if active.
function isActive()
    local result = not self.is_face_down
    CrLua.Log.d(TAG, 'isActive -> ' .. tostring(result))
    return result
end

--- Is any active/passed token still active?
-- @param peers list of active/passed token objects.
-- @return boolean true if any is active.
function anyPeerIsActive(peers)
    local result = false
    for _, peer in ipairs(peers) do
        if not peer.is_face_down then
            result = true
            break
        end
    end
    CrLua.Log.d(TAG, 'anyPeerActive -> ' .. tostring(result))
    return result
end

function setActivePeersWithIncludeSelf(peers)
    for _, peer in ipairs(peers) do
        if peer.is_face_down then
            peer.flip()
        end
    end
end

--- Is the current turn the player who owns this token?
-- @return boolean true if my turn.
function isMyTurn()
    local result = Turns.enable and Turns.turn_color == myColor()
    CrLua.Log.d(TAG, 'isMyTurn -> ' .. tostring(result))
    return result
end

-------------------------------------------------------------------------------

--- Assign this to the closest seated player.
-- Also tints the side of the token for a visual confirmation.
function resetTokenForNewOwner()
    local oldColor = myColor()
    local newColor = playerColorAtPosition(self.getPosition())

    -- If another token is already assigned to that color, do not claim it.
    local peers = getPeers(false)
    for _, peer in ipairs(peers) do
        local peerColor = objectNameToColor(peer.getName())
        if peerColor == newColor then
            newColor = nil
            break
        end
    end

    -- Tint this object to indicate color.
    CrLua.Log.d(TAG, 'resetTokenForNewOwner ' .. (oldColor or '<nil>') .. ' -> ' .. (newColor or '<nil>'))
    self.setColorTint(newColor or 'Grey')

    -- Also rename self.
    local name = colorToObjectName(newColor)
    self.setName(name)
end

--- Pass turn if this token is set to "passed".  If all tokens are set to
-- "passed" then disable turns altogether, requiring turns be re-enabled
-- via some external means to proceed.
-- @return boolean true if passed turn.
function maybePassTurn()
    -- Out of paranoia make sure it is still this token owner's turn.
    -- It is possible some other script changed turns while this function
    -- was waiting to be called, or in some cases such as hot-seat games
    -- it appears TTS calls onPlayerTurnStart twice each turn.
    if not isMyTurn() then
        CrLua.Log.d(TAG, 'maybePassTurn: not my turn, aborting')
        return false
    end

    -- Make sure everyone has exactly one active/passed token.
    local peers = getPeers(true)
    local sanityCheck = sanityCheckPeersWithIncludeSelf(peers)

    -- Do nothing if still active (play normally).
    if isActive() then
        CrLua.Log.d(TAG, 'maybePassTurn: still active, aborting')
        return false
    end

    -- At this point we know it is "my" turn and the token is set to "passed".
    -- Pass this turn, or if all players have passed disable turns altogether.
    -- (Requires external event to re-enable turns.)
    -- Note: if the sanity check failed then there is not one token per player.
    -- In that case, continue to pass turns but do not consider "all" passed.
    local myColor = myColor()
    if anyPeerIsActive(peers) or not sanityCheck then
        CrLua.Log.d(TAG, 'maybePassTurn: at least one active peer, passing turn')
        local player = Player[myColor]
        local name = (player and player.steam_name) or myColor or '?'
        broadcastToAll('Player ' .. name .. ' passed.', myColor)
        Turns.turn_color = Turns.getNextTurnColor()
    else
        CrLua.Log.d(TAG, 'maybePassTurn: no active peers, disabling turns')
        broadcastToAll('All players have passed.', myColor)
        setActivePeersWithIncludeSelf(peers)
        Turns.enable = false
    end
    return true
end

-------------------------------------------------------------------------------

--- Get player for the given table position.
-- @param position table : {x,y,z} table.
-- @return color string : player at postition, or nil if none.
function playerColorAtPosition(position)
    local playerColor = CrLua.TTS.Player.closest(position)
    CrLua.Log.d(TAG, 'playerColorAtPosition -> ' .. (playerColor or '<nil>'))
    return playerColor
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Util>
#include <~/CrLua/TTS/Player>

CrLua.assertRequired({'Log'}) -- do this BEFORE lock
CrLua.lock()
