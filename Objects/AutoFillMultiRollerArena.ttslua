local TAG = 'AutoFillMultiRollerArena'

local _systemHelper = false
local _activeSystemGuid = false

function onLoad(saveState)
    _systemHelper = CrLua.TTS.HelperClient.get('TI4_SYSTEM_HELPER')
    Wait.frames(applyUi, 2)
end

function onPlayerConnect(player_id)
    Wait.frames(applyUi, 2)
end

function onSystemActivation(system)
    CrLua.Log.d(TAG, 'onSystemActivation: ' .. system.string)

    if _activeSystemGuid == system.guid then
        return
    end
    _activeSystemGuid = system.guid

    -- Replace our diffuse image with the one from the activated tile.
    local systemObject = getObjectFromGUID(system.guid)
    local systemCustom = systemObject.getCustomObject()
    local custom = self.getCustomObject()
    custom.diffuse = systemCustom.diffuse

    -- Resetting custom object triggers delete.  Tell Deleted Items it is ok.
    ignoreDeletedItem(self.getGUID())
    self.setCustomObject(custom)
    local newSelf = self.reload()
end

local _deletedItemsGuid = false
function ignoreDeletedItem(guid)
    CrLua.Log.d(TAG, 'ignoreDeletedItem ' .. guid)

    local deletedItems = _deletedItemsGuid and getObjectFromGUID(_deletedItemsGuid)
    if not deletedItems then
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == 'TI4 Deleted Items' then
                _deletedItemsGuid = object.getGUID()
                deletedItems = object
                break
            end
        end
    end
    if deletedItems then
        CrLua.Log.d(TAG, 'ignoreDeletedItem found ' .. deletedItems.getName())
        deletedItems.call('ignoreGuid', guid)
    end
end

-------------------------------------------------------------------------------

function getBoundingBox(object)
    local bounds = object.getBounds()
    return {
        min = {
            x = bounds.center.x - bounds.size.x,
            z = bounds.center.z - bounds.size.z,
        },
        max = {
            x = bounds.center.x + bounds.size.x,
            z = bounds.center.z + bounds.size.z,
        },
    }
end

function isInsideBoundingBox(p, bb)
    return p.x >= bb.min.x and p.x <= bb.max.x and p.z >= bb.min.z and p.z <= bb.max.z
end

local SMOOTH_POSITION_FAST = false

function warpIn()
    CrLua.Log.d(TAG, 'warpIn')

    local system = _systemHelper.getActivatedSystem()
    local systemObject = system and getObjectFromGUID(system.guid)
    if not systemObject then
        error(TAG .. ': no activated system')
    end

    local tokenToPos = {}
    local unitToPos = {}

    local hex = CrLua.TI4.Hex.fromPosition(systemObject.getPosition())
    local bb = getBoundingBox(systemObject)
    local function checkUnit(unit)
        local p = unit.object.getPosition()
        if isInsideBoundingBox(p, bb) and hex == CrLua.TI4.Hex.fromPosition(p) then
            p = self.positionToWorld(systemObject.positionToLocal(p))
            if unit.object.tag == 'Tile' then
                tokenToPos[unit] = p
            else
                unitToPos[unit] = p
            end
        end
    end
    CrLua.TI4.Unit.getAllUnits(checkUnit)

    local extraY = 0
    for unit, p in pairs(tokenToPos) do
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        local collide = false
        unit.object.setPositionSmooth(p, collide, SMOOTH_POSITION_FAST)
    end
    for unit, p in pairs(unitToPos) do
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        local collide = false
        unit.object.setPositionSmooth(p, collide, SMOOTH_POSITION_FAST)
    end
end

function warpOut()
    CrLua.Log.d(TAG, 'warpOut')

    local system = _systemHelper.getActivatedSystem()
    local systemObject = system and getObjectFromGUID(system.guid)
    if not systemObject then
        error(TAG .. ': no activated system')
    end

    local tokenToPos = {}
    local unitToPos = {}

    local hex = CrLua.TI4.Hex.fromPosition(systemObject.getPosition())
    local bb = getBoundingBox(self)
    local function checkUnit(unit)
        local p = unit.object.getPosition()
        if isInsideBoundingBox(p, bb) then
            p = systemObject.positionToWorld(self.positionToLocal(p))
            if hex == CrLua.TI4.Hex.fromPosition(p) then
                if unit.object.tag == 'Tile' then
                    tokenToPos[unit] = p
                else
                    unitToPos[unit] = p
                end
            end
        end
    end
    CrLua.TI4.Unit.getAllUnits(checkUnit)

    local extraY = 0
    for unit, p in pairs(tokenToPos) do
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        local collide = false
        unit.object.setPositionSmooth(p, collide, SMOOTH_POSITION_FAST)
    end
    for unit, p in pairs(unitToPos) do
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        local collide = false
        unit.object.setPositionSmooth(p, collide, SMOOTH_POSITION_FAST)
    end
end

-------------------------------------------------------------------------------

function onButtonClick(player, option, id)
    CrLua.Log.d(TAG, 'onButtonClick: id=' .. id)
    if id == 'warpIn' then
        warpIn()
    elseif id == 'warpOut' then
        warpOut()
    end
end

function applyUi()
    local function getWarpButton(position, rotation, id, value)
        return {
            tag = 'Button',
            attributes = {
                position = position,
                rotation = rotation,
                id = id,
            },
            value = value,
        }
    end
    local buttons = {
        getWarpButton('-60 247 0', '0 0 0', 'warpIn', 'WARP IN'),
        getWarpButton('60 247 0', '0 0 0', 'warpOut', 'WARP OUT')
    }
    self.UI.setXmlTable({
        {
            tag = 'Defaults',
            children = {
                {
                    tag = 'Button',
                    attributes = {
                        onClick = 'onButtonClick',
                        fontSize = 12,
                        fontStyle = 'Bold',
                        width = 100,
                        height = 25,
                    }
                },
            }
        },
        {
            tag = 'Panel',
            attributes = {
                position = '0 12 -10',
                rotation = '0 0 180',
                width = 100,
                height = 100,
            },
            children = buttons
        }
    })
end

-------------------------------------------------------------------------------

#include <~/CrLua/CrLua>
#include <~/CrLua/LockGlobals>

#include <~/CrLua/List>
#include <~/CrLua/LockTable>
#include <~/CrLua/Log>
#include <~/CrLua/Polygon>
#include <~/CrLua/RedBlobHex>
#include <~/CrLua/Table>
#include <~/CrLua/Util>

#include <~/CrLua/TI4/Hex>
#include <~/CrLua/TI4/Unit>

#include <~/CrLua/TTS/HelperClient>

--CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)

CrLua.assertRequired({
    'TI4.Hex',
    'TI4.Unit',
    'List',
    'Log'
})
CrLua.lock()
