-------------------------------------------------------------------------------
--- Tabletop Simulator helper functions.
-- Unlike the other scripts, requires the Tabletop Simulator runtime
-- (e.g., to call getSeatedPlayers).
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TTS.Player'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TTS = CrLua.TTS or {}
CrLua.TTS.Player = assert(not CrLua.TTS.Player) and {
    _require = { 'Util' }
}

-------------------------------------------------------------------------------
--- Get the closest player (hand)
-- @param position table : {x,y,z}.
-- @return string : player color.
-------------------------------------------------------------------------------
function CrLua.TTS.Player.closest(position)
    assert(position and type(position.x) == 'number')

    local function distanceFunction(color)
        local player = Player[color]
        if not player then
            return false
        end
        if player.getHandCount() == 0 then
            return false
        end
        local handPosition = player.getHandTransform(1).position
        return CrLua.Util.distanceSq(position, handPosition)
    end

    local seated = getSeatedPlayers()
    local _, color = CrLua.Util.min(seated, distanceFunction)
    return color
end

function CrLua.TTS.Player._testClosest()
    local color = CrLua.TTS.Player.closest({x = 0, y = 0, z = 0})
    assert(color and type(color) == 'string')
end

-------------------------------------------------------------------------------
--- Does the player exist?
-- @param color string : player color.
-- @return boolean : true if player is seated at the table.
-------------------------------------------------------------------------------
function CrLua.TTS.Player.isSeated(color)
    assert(type(color) == 'string')
    for _, seated in ipairs(getSeatedPlayers()) do
        if seated == color then
            return true
        end
    end
    return false
end

function CrLua.TTS.Player._testIsSeated()
    local color = getSeatedPlayers()[1]
    assert(CrLua.TTS.Player.isSeated(color))
    assert(not CrLua.TTS.Player.isSeated('does_not_exist'))
end
