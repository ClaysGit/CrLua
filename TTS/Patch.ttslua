-------------------------------------------------------------------------------
--- Patch existing TTS objects.
-- @author bonkersbgg on BoardGameGeek.com
--
-- Patch a running TTS game, modifying or replacing objects in-place.  Can
-- patch objects inside containers / decks.  To use, call Patch.patch() with a
-- 'patch config' table with functions defined below.
--
-- The 'objectData' tables are standard Object.getObjects() results with
-- { index, name, description, guid, lua_script, lua_script_state } plus an
-- additional _container field with the container the object was inside,
-- or nil for root objects.
--
-- Patch runs four phases: (1) scanning to find objects, (2) querying which
-- objects should be patched, (3) patching, and (4) cleanup / finish.
--
-- PHASE 1: SCANNING FOR CONTAINERS
--
-- This phase is about figuring out where later phases should look for objects.
-- Scan the root objects, calling your PatchConfig.shouldScanContainer to ask if
-- it should scan in those too.  If yes, repeat with that container's contents.
--
-- Note that when looking for containers inside other containers, we only have
-- the ObjectData and not the object.  If shouldScanContainer returns true for
-- what turns out not to be a container, it is not scanned.
--
-- If shouldScanContainer wants to scan a nested container, that container must
-- be unpacked before looking inside (don't worry, will put back when done).
--
--    --- Look inside this container?
--    -- @param objectData table : see above.
--    -- @return boolean : true if should inspect contents.
--    shouldScanContainer(containerObjectData)
--
-- PHASE 2: SCANNING FOR OBJECTS
--
-- Now that phase 1 found all the places we want to look, scan the root and
-- all phase 1 containers for objects.  Ask your PatchConfig.shouldPatch if
-- an object should be patched.
--
--    --- Patch this object?
--    -- @param objectData table : see above.
--    -- @return boolean : true if should patch this object.
--    shouldPatch(objectData)
--
-- PHASE 3: PATCHING
--
-- Patch each object found in phase 2.  In order to patch, unpack the object
-- from its container if needed, then ask your PatchConfig.patch to update or
-- replace the object.  This happens one object at a time, both to prevent a
-- Deck from running out of Cards (and disappearing as a container), as well
-- as to make it easier to identify which object patch is having problems when
-- testing/debugging a PatchConfig.
--
--    --- Patch an object.
--    --
--    -- Given an object, mutate it in place or spawn a replacement then return
--    -- the (new or mutated) object.  If this returns a new object, the old one
--    -- gets deleted and replaced by the new.
--    --
--    -- Oh, and if the object is a Card from a Deck, the replacement MUST
--    -- be a Card (or a Deck) in order to go back into the containing Deck.
--    --
--    -- @param object : the object being patched.
--    -- @param objectData table : see above.
--    -- @return object : Object to use in place of the original, or nil/false.
--    patch(object, objectData)
--
-- PHASE 4: CLEAN-UP AND FINISH
--
-- Now that patching is done, return any unpacked nested containers to their
-- original homes, then call your PatchConfig.onFinish.
--
--    --- Notify when patch finishes.
--    -- Perhaps the patch still needs to create some new objects, etc.
--    onFinish()
--
-------------------------------------------------------------------------------

local TAG = 'CrLua.TTS.Patch'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TTS = CrLua.TTS or {}
CrLua.TTS.Patch = assert(not CrLua.TTS.Patch) and {
    _require = { 'Kruft.Spiral' }
}

-- Keep track of {
-- - patchConfig table : see top-most comment for description.
-- - unpackPendingSet table : ObjectData waiting for or currently being unpacked.
-- - unpackedContainers table : list of containers unpacked from other containers.
-- - putGuidSet table : GUIDs of objects put into containers.
-- - sprial : place objects in a spiral pattern so they don't pile up.
-- - patchList : list of ObjectData for items to patch.
-- }
local data = false

-------------------------------------------------------------------------------
--- Prepare for a fresh scan.
-- @param patchConfig table : functions to control what gets scanned/patched.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._init(patchConfig)
    assert(type(patchConfig) == 'table')
    assert(type(patchConfig.shouldScanContainer) == 'function')
    assert(type(patchConfig.shouldPatch) == 'function')
    assert(type(patchConfig.patch) == 'function')

    if CrLua.TTS.Patch._isWorking() then
        error(TAG .. ' patch in progress, wait for it to finish before re-init')
    end

    data = {
        patchConfig = patchConfig,
        unpackPendingSet = {},
        unpackedContainers = {},
        putGuidSet = {},
        spiral = CrLua.Kruft.Spiral.new(3, 3, 5),
        patchPosition = { x = 0, y = 10, z = 0 },
        patchList = {}
    }
end

-------------------------------------------------------------------------------
--- Clear any local data.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._clear()
    data = false
end

-------------------------------------------------------------------------------
--- Is an async operation still in progress?
-- @return boolean : true if still working.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._isWorking()
    if not data then
        return false
    end
    for _, _ in pairs(data.unpackPendingSet) do
        return true
    end
    return false
end

-------------------------------------------------------------------------------
--- Get an Object.getObjects() like entry for an existing object.
-- Store the object itself in an extra _object field.
-- @param object : game Object.
-- @param index : optional index, fills result.index.
-- @return ObjectData table.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._getObjectDataFromObject(object, index)
    assert(type(object) == 'userdata')
    assert(index == nil or type(index) == 'number' and index > 0)
    return {
        index = index,
        name = object.getName(),
        description = object.getDescription(),
        guid = object.getGUID(),
        lua_script = object.script_code,
        lua_script_state = object.script_state,

        -- Add the object to the object data.
        _object = object,
    }
end

-------------------------------------------------------------------------------
--- Get Object.getObjects() entries from container, or all live objects if nil.
-- Store the container in a new _container field.
-- @param container : game Object or nil.
-- @return table : {name, guid, ...} table, or false if not a container.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._getObjectDataList(container)
    assert(not container or type(container) == 'userdata')
    local result = false

    if not container then

        -- If no container then get all objects.
        result = {}
        for i, object in ipairs(getAllObjects()) do
            -- Ignore live objects currently being put into a container.
            if not data.putGuidSet[object.getGUID()] then
                table.insert(result, CrLua.TTS.Patch._getObjectDataFromObject(object, i))
            end
        end

    elseif container.getQuantity() < 0 then

        -- Not a container.
        result = false

    elseif container.tag == 'Checker' then

        -- A stack of checkers has a quantiy, but cannot getObjects into it.
        -- Container.takeObject also fails... require the patchConfig understand
        -- that checker objects may have a quantity!
        result = false

    elseif container.tag == 'Infinite' then

        -- Infinite containers are tricky.  They have a quantity but do not
        -- support getAllObjects().  Retrieve one object to create an
        -- objectData from that live object, then delete it.
        local function takeCallback(takeObject)
            destroyObject(takeObject)
        end
        local object = container.takeObject({ index = 1, callback_function = takeCallback })
        local objectData = CrLua.TTS.Patch._getObjectDataFromObject(object, 1)
        objectData._object = nil
        result = { objectData }

    else

        -- Otherwise this is a normal container.  Well, it might not be.
        -- If getObjects fails it will print an error message and return nil,
        -- in that case act as if this was an empty container and continue.
        result = container.getObjects()
        if not result then
            print('Unable to get object in "' .. container.getName() .. '" (tag=' .. container.tag .. ')')
        end

    end

    -- Add the container to each object data entry.
    if result then
        for _, objectData in ipairs(result) do
            objectData._container = container
        end
    end

    return result
end

-------------------------------------------------------------------------------
--- Remove an object from its container.
-- Container game Object is objectData._container.
-- @param objectData table : object data, _object field is set when available.
-- @param callbackFunction function : called with objectData as lone argument.
-- @param position table : optional position, otherwise place in a spiral.
-- @return object : game Object being taken, may still be loading.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._takeObjectAsync(objectData, callbackFunction, position)
    assert(type(objectData) == 'table')
    assert(objectData.guid)
    assert(not objectData._object, 'already has object!')
    assert(type(objectData._container) == 'userdata')
    assert(type(callbackFunction) == 'function')

    local function takeFinishedCallback(takeObject)
        assert(type(takeObject) == 'userdata')
        assert(objectData._object == takeObject)

        -- Update objectData.guid in case unpack changed it.
        objectData.guid = takeObject.getGUID()

        -- Lock it in place (to keep it from falling into a bag).
        objectData._originalLocked = takeObject.getLock() or false
        takeObject.setLock(true)

        if callbackFunction then
            callbackFunction(objectData)
        end
    end

    -- Taking the last object from a deck is problematic.  After the second-last
    -- item is removed the deck gets replaced by its last entry.  Avoid this by
    -- using a get-patch-put cycle so this does not happen.
    local object = objectData._container.takeObject({
        guid = objectData.guid,
        position = position or CrLua.Kruft.Spiral.nextPosition(data.spiral),
        callback_function = takeFinishedCallback
    })

    -- Store the loading object in a new _object field, also return to caller.
    objectData._object = object
    return object
end

-------------------------------------------------------------------------------
--- Object.putObject but also keep track of in-progress puts.
-- @param container : game Object.
-- @param object : game Object to put into container.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._putObjectHelper(objectData)
    assert(type(objectData) == 'table')
    local object = objectData._object
    local container = objectData._container
    assert(type(object) == 'userdata')
    assert(type(container) == 'userdata')

    -- If this was taken via _unpackAsync the object was temporarily locked
    -- to keep it from falling (potentially into a bag or other container).
    -- Restore locked state before put.
    if type(objectData._originalLocked) == 'boolean' then
        object.setLock(objectData._originalLocked)
    end

    -- Object is going away, remove reference.
    objectData._object = nil

    -- Keep track of outstanding puts.
    data.putGuidSet[object.getGUID()] = true

    if container.tag == 'Infinite' then
        container.reset()
    end
    container.putObject(object)
end

-------------------------------------------------------------------------------
--- Look for any "should unpack" containers inside this container, unpack them.
-- Recurse and look inside those for nested containers that should also unpack.
-- Because the recursive calls are async, this may still be working when the
-- function returns.
-- As a side effect, unpacked containers get added to the _unpackedContainers
-- list in unpack order.
-- @param container : game Object.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._unpackContainers(containerObjectData, onFinishedFunction)
    local container = containerObjectData and containerObjectData._object
    assert(not container or type(container) == 'userdata')
    assert(type(onFinishedFunction) == 'function')

    local name = container and container.getName() or '<nil>'

    assert(data.patchConfig, 'need to init first')

    -- Store a special 'true' key for the root container.
    if not containerObjectData then
        data.unpackPendingSet[true] = true
    end

    -- Get objects in the container, or "get all objects" if no container.
    -- ("get all objects" does not look inside containers.)  This will be
    -- 'false' if the object is not actually a container.
    local objectDataList = CrLua.TTS.Patch._getObjectDataList(container)

    -- We did not have an object when asking shouldScanContainer, only the
    -- ObjectData fields.  It is possible it decided to scan a non-container
    -- (a simple PatchConfig might be lazy and just say yes scan everything).
    -- If the container is not actually a container put it back now.
    if not objectDataList then

        assert(containerObjectData and containerObjectData._object)

        -- If non-root, put back.
        if containerObjectData._container then
            -- If it came from an infinite container just delete it.
            -- Otherwise put it back where it came from.
            if containerObjectData._container.tag == 'Infinite' then
                destroyObject(containerObjectData._object)
            else
                CrLua.TTS.Patch._putObjectHelper(containerObjectData)
            end
        end

    elseif container and container.tag == 'Deck' then

        -- Decks cannot contain other containers.  Remember we have it, but no
        -- need to inspect contents here (do so when looking for patch items).
        table.insert(data.unpackedContainers, containerObjectData)

    else

        -- This is a normal container.
        table.insert(data.unpackedContainers, containerObjectData)

        -- Ask patchConfig if the scan should descend into nested containers.
        -- Scan in reverse order, because unpacking an item invalidates any
        -- later "index" in the objectDataList entries.  The internal takeObject
        -- does so by guid, but who knows what the patchConfig.shouldScanContainer
        -- is up to.  Be paranoid and have valid index values when calling.
        for i = #objectDataList, 1, -1 do
            local objectData = objectDataList[i]

            -- Should we scan inside this (potentially a) container?  If yes,
            -- unpack it and when ready call unpackContainer on it.
            if data.patchConfig.shouldScanContainer(objectData) then
                data.unpackPendingSet[objectData] = true

                if not objectData._container then
                    -- Root objects are already unpacked.  No need to add them
                    -- to the unpacked containers list as they do not need to
                    -- be put back.  Scan them without unpacking.
                    assert(objectData._object)
                    CrLua.TTS.Patch._unpackContainers(objectData, onFinishedFunction)
                else
                    -- After takeObject instantates the object, try to unpack it.
                    local function callBackFunction(unpackedObjectData)
                        assert(unpackedObjectData == objectData)
                        CrLua.TTS.Patch._unpackContainers(unpackedObjectData, onFinishedFunction)
                    end
                    CrLua.TTS.Patch._takeObjectAsync(objectData, callBackFunction)
                end

            end
        end

    end

    -- Remove the container we just scaned from the pending set (use special
    -- 'true' key for the root container).
    data.unpackPendingSet[containerObjectData or true] = nil

    -- If no longer working then all (should-scan) objects have been unpacked.
    -- Proceed to the patch stage.
    if not CrLua.TTS.Patch._isWorking() then
        onFinishedFunction()
    end
end

-------------------------------------------------------------------------------
--- Return unpacked containers to their parent containers.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._repackContainers()
    for i = #data.unpackedContainers, 1, -1 do
        local objectData = data.unpackedContainers[i]
        if objectData._container then
            assert(objectData._object and objectData._container)
            assert(type(objectData._originalLocked) == 'boolean')
            objectData._object.setLock(objectData._originalLocked)
            CrLua.TTS.Patch._putObjectHelper(objectData)
        end
    end
end

-------------------------------------------------------------------------------
--- After all containers are unpacked, get the list of ObjectData items that
-- the PatchConfig wants to patch.
-- @return table : list of ObjectData tables.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._getShouldPatch()
    local result = {}

    -- Scan all live objects, including any nested containers we unpacked.
    for i, object in ipairs(getAllObjects()) do
        local childObjectDataList = CrLua.TTS.Patch._getObjectDataList(object)

        -- If this object is a container, check its contents.  Otherwise
        -- is is not a container, check the object.  (Do not check container
        -- objects themselves, only their non-container children.)
        if childObjectDataList then
            -- Check contents.
            for _, childObjectData in ipairs(childObjectDataList) do
                if data.patchConfig.shouldPatch(childObjectData) then
                    table.insert(result, childObjectData)
                end
            end
        else
            -- Check the object itself.
            local objectData = CrLua.TTS.Patch._getObjectDataFromObject(object, i)
            if data.patchConfig.shouldPatch(objectData) then
                table.insert(result, objectData)
            end
        end
    end

    return result
end

-------------------------------------------------------------------------------
--- Patch this object, then put it back where it came from.
-- @param objectData table.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch._patchAndReplaceObject(objectData)
    assert(type(objectData) == 'table' and type(objectData._object) == 'userdata')

    local object = objectData._object
    local newObject = data.patchConfig.patch(object, objectData)
    newObject = newObject or object
    assert(newObject and type(newObject) == 'userdata')
    if newObject ~= object then
        if objectData._container and objectData._container.tag == 'Deck' then
            if newObject.tag ~= 'Card' and newObject.tag ~= 'Deck' then
                error(TAG .. ': cannot replace a card in a deck with a non-card')
            end
        end
        destroyObject(object)
        object = newObject
        objectData._object = newObject
        objectData.guid = newObject.getGUID()
    end
    if objectData._container then
        assert(type(objectData._container) == 'userdata')
        CrLua.TTS.Patch._putObjectHelper(objectData)
    end
end

-------------------------------------------------------------------------------
--- Patch!
-- Scans all existing objects, asking patchConfig.shouldScanContainer if it
-- should also scan that container.  If yes, repeat for its contents.
-- After scanning is finished, ask patchPatchConfig.shouldPatchObject if each
-- object should be patched (using ObjectData, in-container objects do not
-- exist in the game yet).  If yes, spawn those objects and
-------------------------------------------------------------------------------
function CrLua.TTS.Patch.patch(patchConfig)
    print(TAG .. '.patch: starting')
    CrLua.TTS.Patch._init(patchConfig)

    local function onPatchFinished()
        CrLua.TTS.Patch._repackContainers()
        CrLua.TTS.Patch._clear()

        print(TAG .. '.patch: finished')

        if patchConfig.onFinish then
            patchConfig.onFinish()
        end
    end

    -- Unpack and patch the next should-patch entry.  Only patch one at a
    -- time, call self again when each patch completes.
    local function patchNext()
        while #data.patchList > 0 do
            local objectData = table.remove(data.patchList)
            if objectData._object then
                -- The object is already live.  Patch it now.
                CrLua.TTS.Patch._patchAndReplaceObject(objectData)
            else
                -- The object is still inside a container.  Unpack it, patch,
                -- then call this function again to keep going.  Exit this
                -- function, it will get called again when unpack is ready.
                local function takeCallback(unpackedObjectData)
                    assert(unpackedObjectData == objectData)
                    CrLua.TTS.Patch._patchAndReplaceObject(objectData)
                    patchNext()
                end
                CrLua.TTS.Patch._takeObjectAsync(objectData, takeCallback, data.patchPosition)
                return
            end
        end

        -- If we got here, patch is done!
        onPatchFinished()
    end

    local function onUnpackFinished()
        print(TAG .. '.patch: scan finished, getting candidate objects')

        -- Get objectData for objects to patch.
        data.patchList = CrLua.TTS.Patch._getShouldPatch()
        local message = ''
        for i, entry in ipairs(data.patchList) do
            if i > 1 then
                message = message .. ', '
            end
            message = message .. '"' .. entry.name .. '"'
        end
        print(TAG .. '.patch: ' .. #data.patchList .. ' patch objects ' .. message)
        print(TAG .. '.patch: starting patch!')

        -- Patch time!  Patch items one at a time, both to help debugging
        -- identify which object(s) are having trouble, as well as making
        -- sure a deck is never fully exhausted and thus replaced with the
        -- last card.  That could probably be addressed by cloning one card
        -- and inserting it as a kind of sentinel, but keep it simple...ish.
        patchNext()
    end

    -- TODO XXX Oh hey, could use onObjectEnterContainer to clean up the put set.
    -- If unpacking containers accidentally unpacks any non-containers it puts
    -- them back where they came from.  Wait for those puts to finish before
    -- moving on (otherwise getAllObjects might find them).
    local function waitForOutstandingPuts()
        -- Originally this checked invidual objects looking up by guid and
        -- assuming the put had completed when that failed, however it seems
        -- getAllObjects can still find them for a moment.  Do a slightly
        -- less efficient but safer test, keep waiting if any getAllObjects
        -- guid is in the put set.
        for _, object in ipairs(getAllObjects()) do
            if data.putGuidSet[object.getGUID()] then
                Wait.frames(waitForOutstandingPuts, 5)
                return
            end
        end
        data.putGuidSet = {}
        onUnpackFinished()
    end

    CrLua.TTS.Patch._unpackContainers(nil, waitForOutstandingPuts)
end

-------------------------------------------------------------------------------
--- Given an object, destroy it and return a new object with the given sript.
-- Helper function for use by PatchConfig scripts.
-- Note: it is safe to call destroyObject on the same object multiple times.
-------------------------------------------------------------------------------
function CrLua.TTS.Patch.replaceLuaScript(object, newLuaScript)
    -- There is an Object.setLuaScript method, but it seems dangerous to apply
    -- it to an active object.  Instead, update the lua script in the JSON
    -- representation of the object and instantiate a new one.
    local savedState = object.onSave()

    local json = object.getJSON()
    json = JSON.decode(json)
    json.LuaScript = newLuaScript
    json.LuaState = savedState
    json = JSON.encode_pretty(json)
    local spawnParameters = {
        json = json,
        position = object.getPosition(),
        rotation = object.getRotation(),
        scale = object.getScale(),
        callback_function = nil,
        sound = true,
        params = {},
        snap_to_grid = object.use_grid
    }
    destroyObject(object)
    return spawnObjectJSON(spawnParameters)
end
