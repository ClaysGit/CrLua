-------------------------------------------------------------------------------
--- Lua utility functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.Util'

local CrLua = CrLua or {}
CrLua.Util = assert(not CrLua.Util) and {}

-------------------------------------------------------------------------------
--- Make a table read-only.
-- Note that the table cannot contain <nil> values, use false instead.
-- @param table : table.
-- @return table : the original table, made read-only.
-------------------------------------------------------------------------------
function CrLua.Util.readOnly(table)
    assert(type(table) == 'table')

    setmetatable(table, {
        __newindex = function(_, key, value)
            error(TAG .. ': write "' .. tostring(key or '<nil>') .. '" to read-only table')
        end,
    })
    return table
end

function CrLua.Util._testReadOnly()
    local readOnlyTable = CrLua.Util.readOnly({ 'foo', 'bar' })

    -- Access.
    assert(readOnlyTable[1] == 'foo' and readOnlyTable[2] == 'bar')

    -- Can read missing key.
    assert(not readOnlyTable.missingKey)

    -- Cannot write missing key.
    if pcall(function() readOnlyTable.missingKey = 1 end) then
        error('wrote to a missing key')
    end
end

-------------------------------------------------------------------------------
--- Compute the distance between two {x,y,z} vectors.
-- @param a table : {x,y,z} keys.
-- @param b table : {x,y,z} keys.
-- @return distance squared (sqrt it if need exact, sq is fine for sorting).
-------------------------------------------------------------------------------
function CrLua.Util.distanceSq(a, b)
    local dx = a.x - b.x
    local dy = a.y - b.y
    local dz = a.z - b.z
    return (dx * dx) + (dy * dy) + (dz * dz)
end

function CrLua.Util._testDistanceSq()
    local a = { x = 0, y = 0, z = 0 }
    local b = { x = 1, y = 2, z = 3 }
    local distanceSq = CrLua.Util.distanceSq(a, b)
    assert(distanceSq == 14)
end

-------------------------------------------------------------------------------
--- Find the minimum value in a table, with optional function for value.
-- @param table : table with arbitrary keys (may be a list).
-- @param optional minFunction : call for each value to minimize.
-- @return ? : table value with the min value.
-------------------------------------------------------------------------------
function CrLua.Util.min(table, minFunction)
    assert(type(table) == 'table' and ((not minFunction) or type(minFunction) == 'function'))

    local minScore = nil
    local minItem = nil
    for _, v in pairs(table) do
        local score = (minFunction and minFunction(v)) or tonumber(v)
        if (not minScore) or score < minScore then
            minScore = score
            minItem = v
        end
    end
    return minItem
end

function CrLua.Util._testMin()
    local list = { 2, 1, 3, 5, 4 }
    local minFunction = function(v)
        return v
    end
    local min1 = CrLua.Util.min(list)
    local min2 = CrLua.Util.min(list, minFunction)
    assert(min1 == min2 and min1 == 1)
end

-------------------------------------------------------------------------------
--- Find the maximum value in a table, with optional function for value.
-- @param table : table with arbitrary keys (may be a list).
-- @param optional maxFunction : call for each value to maximize.
-- @return ? : table value with the max value.
-------------------------------------------------------------------------------
function CrLua.Util.max(table, maxFunction)
    assert(type(table) == 'table' and ((not maxFunction) or type(maxFunction) == 'function'))

    local maxScore = nil
    local maxItem = nil
    for _, v in pairs(table) do
        local score = (maxFunction and maxFunction(v)) or tonumber(v)
        if (not maxScore) or score > maxScore then
            maxScore = score
            maxItem = v
        end
    end
    return maxItem
end

function CrLua.Util._testMax()
    local list = { 2, 1, 3, 5, 4 }
    local maxFunction = function(v)
        return v
    end
    local max1 = CrLua.Util.max(list)
    local max2 = CrLua.Util.max(list, maxFunction)
    assert(max1 == max2 and max1 == 5)
end
