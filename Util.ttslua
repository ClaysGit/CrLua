-------------------------------------------------------------------------------
--- Lua utility functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.Util'

local CrLua = CrLua or {}
CrLua.Util = assert(not CrLua.Util) and {}

-------------------------------------------------------------------------------
--- Compute the distance between two {x,y,z} vectors.
-- @param a table : {x,y,z} keys.
-- @param b table : {x,y,z} keys.
-- @return distance squared (sqrt it if need exact, sq is fine for sorting).
-------------------------------------------------------------------------------
function CrLua.Util.distanceSq(a, b)
    local dx = a.x - b.x
    local dy = a.y - b.y
    local dz = a.z - b.z
    return (dx * dx) + (dy * dy) + (dz * dz)
end

function CrLua.Util._testDistanceSq()
    local a = { x = 0, y = 0, z = 0 }
    local b = { x = 1, y = 2, z = 3 }
    local distanceSq = CrLua.Util.distanceSq(a, b)
    assert(distanceSq == 14)
end

-------------------------------------------------------------------------------
--- Find the minimum value in a table, with optional function for value.
-- Function can return false/nil to reject value from consideration.
-- @param table : table with arbitrary keys (may be a list).
-- @param optional minFunction : call for each value to minimize.
-- @return ? : table value with the min value.
-------------------------------------------------------------------------------
function CrLua.Util.min(table, minFunction)
    assert(type(table) == 'table' and ((not minFunction) or type(minFunction) == 'function'))

    local minScore = nil
    local minKey, minValue = nil, nil
    for k, v in pairs(table) do
        local score = (minFunction and minFunction(v)) or tonumber(v)
        if score and (not minScore or score < minScore) then
            minScore = score
            minKey = k
            minValue = v
        end
    end
    return minKey, minValue
end

function CrLua.Util._testMin()
    local list = { 2, 1, 3, 5, 4 }
    local minFunction = function(v)
        return v
    end
    local k1, min1 = CrLua.Util.min(list)
    local k2, min2 = CrLua.Util.min(list, minFunction)
    assert(k1 == k2 and k1 == 2, 'k=' .. (k1 or '<nil>'))
    assert(min1 == min2 and min1 == 1)
end

-------------------------------------------------------------------------------
--- Find the maximum value in a table, with optional function for value.
-- Function can return false/nil to reject value from consideration.
-- @param table : table with arbitrary keys (may be a list).
-- @param optional maxFunction : call for each value to maximize.
-- @return ? : table value with the max value.
-------------------------------------------------------------------------------
function CrLua.Util.max(table, maxFunction)
    assert(type(table) == 'table' and ((not maxFunction) or type(maxFunction) == 'function'))

    local maxScore = nil
    local maxKey, maxValue = nil, nil
    for k, v in pairs(table) do
        local score = (maxFunction and maxFunction(v)) or tonumber(v)
        if score and (not maxScore or score > maxScore) then
            maxScore = score
            maxKey = k
            maxValue = v
        end
    end
    return maxKey, maxValue
end

function CrLua.Util._testMax()
    local list = { 2, 1, 3, 5, 4 }
    local maxFunction = function(v)
        return v
    end
    local k1, max1 = CrLua.Util.max(list)
    local k2, max2 = CrLua.Util.max(list, maxFunction)
    assert(k1 == k2 and k1 == 4)
    assert(max1 == max2 and max1 == 5)
end
