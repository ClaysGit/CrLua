--- Keep track of each players' tech, and acquisition order.
-- @author Darrell
--
-- Assumes Nekro makes a copy of assimilated technology cards.
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.PlayerTech'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.PlayerTech = assert(not CrLua.TI4.PlayerTech) and {
    _require = { 'List', 'TTS.HelperClient' },
    _allowMissingKeys = { 'TECHNOLOGIES' }
}

-- Map from card name to streamer tech sheet text.
CrLua.TI4.PlayerTech.TECHNOLOGIES = {
    ['Advanced Carrier II'] = 'Adv Carrier II',
    ['Antimass Deflectors'] = 'Antimass',
    ['Assault Cannon'] = 'Assault Cannon',
    ['Bioplasmosis'] = 'Bioplas',
    ['Carrier II'] = 'Carrier II',
    ['Chaos Mapping'] = 'Chaos Map',
    ['Cruiser II'] = 'Cruiser II',
    ['Dacxive Animators'] = 'Dacxive',
    ['Destroyer II'] = 'Destroyer II',
    ['Dimensional Splicer'] = 'D. Splicer',
    ['Dreadnought II'] = 'Dread II',
    ['Duranium Armor'] = 'Duranium',
    ['E-res Siphons'] = 'E-Res',
    ['Exotrireme II'] = 'Exotrireme II',
    ['Fighter II'] = 'Fighter II',
    ['Fleet Logistics'] = 'Fleet Logistics',
    ['Floating Factory II'] = 'FF II',
    ['Graviton Laser System'] = 'Graviton',
    ['Gravity Drive'] = 'Grav Drive',
    ['Hegemonic Trade Policy'] = 'Hegemonic',
    ['Hybrid Crystal Fighter II'] = 'HCF II',
    ['Hyper Metabolism'] = 'Hyper',
    ['Impulse Core'] = 'Impulse',
    ['Infantry II'] = 'Infantry II',
    ['Inheritance Systems'] = 'Inherit. Systems',
    ['Instinct Training'] = 'Instinct Train',
    ['Integrated Economy'] = 'Integrated Eco.',
    ['L4 Disruptors'] = 'L4 Disrupt',
    ['Lazax Gate Folding'] = 'Lazax Gate',
    ['Letani Warrior II'] = 'Letani II',
    ['Light-Wave Deflector'] = 'Light/Wave',
    ['Magen Defense Grid'] = 'Magen',
    ['Mageon Implants'] = 'Mageon',
    ['Magmus Reactor'] = 'Magmus',
    ['Mirror Computing'] = 'Mirror Comp',
    ['Neural Motivator'] = 'Neural',
    ['Neuroglaive'] = 'Neuroglaive',
    ['Non-Euclidean Shielding'] = 'N.E.S.',
    ['Nullification Field'] = 'Null. Field',
    ['PDS II'] = 'PDS II',
    ['Plasma Scoring'] = 'Plasma',
    ['Production Biomes'] = 'Prod. Biomes',
    ['Prototype War Sun II'] = 'PWS II',
    ['Quantum Datahub Node'] = 'QDHN',
    ['Salvage Operations'] = 'Salvage Ops.',
    ['Sarween Tools'] = 'Sarween',
    ['Space Dock II'] = 'Space Dock II',
    ['Spacial Conduit Cylinder'] = 'Spacial Conduit',
    ['Spec Ops II'] = 'Spec Ops II',
    ['Super-Dreadnought II'] = 'SuperDread II',
    ['Transit Diodes'] = 'Transit',
    ['Transparasteel Plating'] = 'Transparasteel',
    ['Valefar Assimilator X'] = nil,
    ['Valefar Assimilator Y'] = nil,
    ['Valkyrie Particle Weave'] = 'Valkyrie PW',
    ['War Sun'] = 'War Sun',
    ['Wormhole Generator'] = 'Wormhole Gen',
    ['X-89 Bacterial Weapon Î©'] = 'X-89 B.W.',
    ['X-89 Bacterial Weapon'] = 'X-89 B.W.',
    ['Yin Spinner'] = 'Yin Spin',
    ['????_REDACTED_????'] = 'Scenario Destroyer',
    ['???_EXCEPTION_NO_ID_???'] = 'Scenario Tech'
}

local _factionHelper = CrLua.TTS.HelperClient.get('TI4_FACTION_HELPER')
local _zoneHelper = CrLua.TTS.HelperClient.get('TI4_ZONE_HELPER')

-------------------------------------------------------------------------------

--- Maintain per-player technologies, preserving add order.
-- @param playerColorToTechs table : map from player color to in-order tech list.
-- @return table : updated map from player color to in-order tech list.
function CrLua.TI4.PlayerTech.updateAllPlayersToTech(playerColorToTechs)
    assert(type(playerColorToTechs) == 'table')

    local guidToName = {}
    local guidToPosition = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if CrLua.TI4.PlayerTech.TECHNOLOGIES[name] then
            local guid = object.getGUID()
            guidToName[guid] = name
            guidToPosition[guid] = object.getPosition()
        end
    end

    local guidToZone = _zoneHelper.zonesFromPositions(guidToPosition)
    local colorToTechs = {}

    for guid, color in pairs(guidToZone) do
        local entry = colorToTechs[color]
        if not entry then
            entry = {}
            colorToTechs[color] = entry
        end
        local tech = assert(guidToName[guid])
        table.insert(entry, tech)
    end

    local prunedColorToTechs = {}
    for color, techList in pairs(colorToTechs) do
        prunedColorToTechs[color] = CrLua.List.unique(techList)
    end

    local updated = {}
    for color, _ in pairs(_factionHelper.allFactions()) do
        local oldTechs = playerColorToTechs[color] or {}
        local newTechs = prunedColorToTechs[color] or {}
        local updatedTechs = CrLua.List.pruneAndAppendMissing(oldTechs, newTechs)
        updated[color] = updatedTechs
    end
    return updated
end

-------------------------------------------------------------------------------

--- Generate the entire spreadsheet contents.
function CrLua.TI4.PlayerTech.getCells(playerColorToTechs)
    local cells = {}
    local colorToColumn = {
        Blue = 'B',
        Purple = 'C',
        Yellow = 'D',
        Red = 'E',
        Green = 'F',
        White = 'G',
        --Orange = 'H',
        --Pink = 'I',
    }
    for color, col in pairs(colorToColumn) do
        cells[col .. 3] = 'N/A'
        cells[col .. 4] = ''
    end
    for _, player in ipairs(Player.getPlayers()) do
        local col = colorToColumn[player.color]
        cells[col .. 3] = player.steam_name
    end
    for color, techs in pairs(playerColorToTechs) do
        local col = colorToColumn[color]
        for i, tech in ipairs(techs) do
            cells[col .. (i + 3)] = CrLua.TI4.PlayerTech.TECHNOLOGIES[tech]
        end
    end
    return cells
end

-------------------------------------------------------------------------------
