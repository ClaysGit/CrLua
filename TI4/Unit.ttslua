-------------------------------------------------------------------------------
--- Unit utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Unit'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Unit = assert(not CrLua.TI4.Unit) and {
    _require = { 'List', 'Table', 'Util' },
    _allowMissingKeys = { 'UNIT', 'FLAGSHIP', 'UNIT_COLORS' }
}

CrLua.TI4.Unit.ATTR = {

    -- Number, production cost.
    COST = 'cost',

    -- Boolean, is this unit a ship?
    SHIP = 'ship',

    -- Number, space cannon hit value.
    SPACE_CANNON = 'spaceCannon',

    -- Number, bombardment hit value.
    BOMBARDMENT = 'bombardment',

    -- String faction name (if flagship).
    FACTION = 'faction',

    -- String wormhole type (e.g. "delta").
    WORMHOLE = 'wormhole',

    -- Boolean, do fighters in system participate in ground combat?
    FIGHTERS_ON_GROUND = 'fightersOnGround',

    -- Boolean, do infantry in system participate in space combat?
    INFANTRY_IN_SPACE = 'infantryInSpace',

    -- Boolean, unit dice count is equal to the number of non-fighter enemy ships?
    NON_FIGHTER_DICE = 'nonFighterDice',
}

-- Unit attributes:
CrLua.TI4.Unit.UNIT = {
    ['Infantry'] = { cost = 0.5 },
    ['Fighter'] = { ship = true, cost = 0.5 },
    ['Cruiser'] = { ship = true, cost = 2 },
    ['Destroyer'] = { ship = true, cost = 1 },
    ['Carrier'] = { ship = true, cost = 3 },
    ['Space Dock'] = {},
    ['PDS'] = { spaceCannon = 5 },
    ['Dreadnought'] = { ship = true, bombardment = 5, cost = 4 },
    ['War Sun'] = { ship = true, bombardment = 3, cost = 12 },
    ['Flagship'] = { ship = true, cost = 8 }
}

-- Flagship attributes:
--     - faction string : owning faction name.
--     - wormhole string : if set, flagship is this wormhole type.
--     - bombardment number : if set, hit value for bombardment.
--     - fightersOnGround boolean : do in-system fighters participate in ground combat?
--     - infantryInSpace boolean : do in-system infantry participate in space combat?
--     - nonFighterDice boolean : dice count is equal to the number of non-fighter enemy ships?
CrLua.TI4.Unit.FLAGSHIP = {
    ['Duha Menaimon'] = { faction = 'The Arborec' },
    ['Arc Secundus'] = { faction = 'The Barony of Letnev', bombardment = 5 },
    ['Son of Ragh'] = { faction = 'The Clan of Saar' },
    ['The Inferno'] = { faction = 'The Embers of Muaat' },
    ['Wrath of Kenara'] = { faction = 'The Emirates of Hacan' },
    ['Genesis'] = { faction = 'The Federation of Sol' },
    ['Hil Colish'] = { faction = 'The Ghosts of Creuss', wormhole = 'delta' },
    ['[0.0.1]'] = { faction = 'The L1Z1X Mindnet' },
    ['Fourth Moon'] = { faction = 'The Mentak Coalition' },
    ['Matriarch'] = { faction = 'The Naalu Collective', fightersOnGround = true },
    ['The Alastor'] = { faction = 'The Nekro Virus', infantryInSpace = true },
    ["C'morran N'orr"] = { faction = "The Sardakk N'orr" },
    ['J.N.S. Hylarim'] = { faction = 'The Universities of Jol-Nar' },
    ['Salai Sai Corian'] = { faction = 'The Winnu', nonFighterDice = true },
    ['Loncara Ssodu'] = { faction = 'The Xxcha Kingdom', spaceCannon = 5 },
    ['Van Hauge'] = { faction = 'The Yin Brotherhood' },
    ["Y'sia Y'ssrila"] = { faction = 'The Yssaril Tribes' }
}

-- Unit object tint colors, hard coded from TTS/TI4 workshop objects.
CrLua.TI4.Unit.UNIT_COLORS = {
    White = { 204/255, 205/255, 204/255 },
    Blue = { 7/255, 178/255, 255/255 },
    Purple = { 118/255, 0, 183/255 },
    Green = { 0, 117/255, 6/255 },
    Red = { 203/255, 0, 0 },
    Yellow = { 165/255, 163/255, 0 }
}

-------------------------------------------------------------------------------
--- Create a unit table.
-- @param unitName string : unit name.
-- @param color string : unit player color.
-- @param count number : number of units (e.g. "x3 Infantry" token).
-- @param object : game Object.
-- @return unit table.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.unit(unitName, color, count, object)
    assert(type(count) == 'number' and count > 0 and object)
    if not CrLua.TI4.Unit.UNIT[unitName] then
        error(TAG .. '.unit: unknown unit name "' .. tostring(unitName or '<nil>') .. '"')
    end
    if unitName == 'Flagship' then
        local objectName = object.getName() or '<nil>'
        if not CrLua.TI4.Unit.FLAGSHIP[objectName] then
            -- Unpacking a faction renames the flagship, but allow generic too.
            local genericFlagshipObjectName = tostring(color) .. ' Flagship'
            if objectName ~= genericFlagshipObjectName then
                error(TAG .. '.unit: unknown Flagship "' .. objectName .. '"')
            end
        end
    end
    if color and not CrLua.TI4.Unit.UNIT_COLORS[color] then
        error(TAG .. '.unit: invalid color "' .. color .. '"')
    end

    return {
        unitName = unitName,
        color = color,
        count = count,
        object = object,
    }
end

function CrLua.TI4.Unit._testUnit()
    local unit = CrLua.TI4.Unit.unit('Fighter', 'Red', 1, CrLua.TI4.Unit._fakeObject{})
    assert(unit.unitName == 'Fighter')
    assert(unit.color == 'Red')
    assert(unit.count == 1)
    assert(unit.object)
end

function CrLua.TI4.Unit._fakeObject(args)
    local result = {}
    function result.getName()
        return args.name or '<fakeObjectName>'
    end
    function result.getColorTint()
        return args.color and CrLua.TI4.Unit.UNIT_COLORS[color] or { 0, 0, 0 }
    end
    function result.getPosition()
        return {
            x = args.position and args.position.x or 0,
            y = args.position and args.position.y or 0,
            z = args.position and args.position.z or 0
        }
    end
    return result
end

-------------------------------------------------------------------------------
--- Get units on the table.
-- @param filter function : if given, return nil/false to reject units from result.
-- @return table : list of CrLua.TI4.Unit.unit tables.
--
-- The filter function gets the same unit table that gets added to the result.
-- In addition to filtering, it could inject new unit fields.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.getAllUnits(filterFunction)
    assert(not filterFunction or type(filterFunction) == 'function')
    local result = {}
    for _, object in ipairs(getAllObjects()) do
        local unit = CrLua.TI4.Unit.fromObject(object)
        if unit and (not filterFunction or filterFunction(unit)) then
            table.insert(result, unit)
        end
    end
    return result
end

-------------------------------------------------------------------------------
--- Identify the unit from the game object.
-- @param object : game Object.
-- @return table or nil : { color, unitName, count, object } keys.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.fromObject(object)
    local name = object.getName()

    local flagship = CrLua.TI4.Unit.FLAGSHIP[name]
    if flagship then
        -- Could get the color from Zone, but for now use the tint color.
        -- zone = CrLua.TI4.Zone.fromFaction(flagship.faction)
        -- color = CrLua.TI4.Zone.color(zone)
        local color = CrLua.TI4.Unit.colorFromColorTint(object.getColorTint())
        return CrLua.TI4.Unit.unit('Flagship', color, 1, object)
    end

    -- Unit tokens do not have an explicit color.  One can guess based on the
    -- closest plastic unit color, but that could be an expensive operation.
    -- Do not attempt to assign a color now, let the caller decide if they
    -- care about the unit, then they can fill in the color.
    -- @see CrLua.TI4.Unit.assignUnitTokenColors()
    if name == 'x3 Fighter Token' then
        return CrLua.TI4.Unit.unit('Fighter', false, 3, object)
    end
    if name == 'x1 Fighter Token' then
        return CrLua.TI4.Unit.unit('Fighter', false, 1, object)
    end
    if name == 'x3 Infantry' then
        return CrLua.TI4.Unit.unit('Infantry', false, 3, object)
    end
    if name == 'x1 Infantry' then
        return CrLua.TI4.Unit.unit('Infantry', false, 1, object)
    end

    -- Most units have a "{color} {unitName}" object name, e.g. "Red Infantry".
    local startPos, endPos = string.find(name, ' ')
    if startPos then
        local color = string.sub(name, 1, startPos - 1)
        local unitName = string.sub(name, startPos + 1)
        if CrLua.TI4.Unit.UNIT_COLORS[color] and CrLua.TI4.Unit.UNIT[unitName] then
            return CrLua.TI4.Unit.unit(unitName, color, 1, object)
        end
    end

    -- Object is not a unit.
    return false
end

function CrLua.TI4.Unit._testFromObject()
    -- Flagship.
    local object = CrLua.TI4.Unit._fakeObject{name='Hil Colish', color='Green'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == 'Green' and unit.unitName == 'Flagship' and unit.count == 1)

    -- Generic flagship.
    local object = CrLua.TI4.Unit._fakeObject{name='Green Flagship'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == 'Green' and unit.unitName == 'Flagship' and unit.count == 1)

    -- Anonymous token.
    local object = CrLua.TI4.Unit._fakeObject{name='x3 Infantry'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == false and unit.unitName == 'Infantry' and unit.count == 3)

    -- Typical unit.
    local object = CrLua.TI4.Unit._fakeObject{name='Red Infantry'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == 'Red' and unit.unitName == 'Infantry' and unit.count == 1)

    -- Not a unit.
    local object = CrLua.TI4.Unit._fakeObject{name='Not a unit'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(not unit)
end

-------------------------------------------------------------------------------
--- Get unit attributes.
-- @param unit table : a Unit.unit table.
-- @return table : attribute table
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.attributes(unit)
    assert(type(unit) == 'table' and unit.unitName)

    local attributes = CrLua.TI4.Unit.UNIT[unit.unitName]

    if unit.unitName == 'Flagship' then
        local objectName = unit.object.getName()
        local flagshipAttributes = CrLua.TI4.Unit.FLAGSHIP[objectName] or {}
        attributes = CrLua.Table.join(attributes, flagshipAttributes)
    end

    return attributes
end

function CrLua.TI4.Unit._testAttributes()
    local unit = CrLua.TI4.Unit.unit('Flagship', false, 1, CrLua.TI4.Unit._fakeObject{name='Hil Colish'})
    local attributes = CrLua.TI4.Unit.attributes(unit)
    assert(attributes.ship)
    assert(attributes.wormhole == 'delta')
end

-------------------------------------------------------------------------------
--- Get the player color from a unit object's tint color.
-- @param tintColor table : {r,g,b} keys or a list of three (r,g,b) numbers.
-- @return string player color.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.colorFromColorTint(tintColor)
    local r = tintColor.r or tintColor[1]
    local g = tintColor.g or tintColor[2]
    local b = tintColor.b or tintColor[3]
    local function colorDistance(unitColor)
        local dr = unitColor[1] - r
        local dg = unitColor[2] - g
        local db = unitColor[3] - b
        local distanceSq = (dr * dr) + (dg * dg) + (db * db)
        return distanceSq
    end
    local colorName, colorTable = CrLua.Util.min(CrLua.TI4.Unit.UNIT_COLORS, colorDistance)
    return colorName
end

function CrLua.TI4.Unit._testColorFromColorTint()
    local tintColor = { 1, 1, 1 }
    local color = CrLua.TI4.Unit.colorFromColorTint(tintColor)
    assert(color == 'White', tostring(color or '<nil>'))
    local tintColor = { 1, 0, 0 }
    local color = CrLua.TI4.Unit.colorFromColorTint(tintColor)
    assert(color == 'Red', tostring(color or '<nil>'))
end

-------------------------------------------------------------------------------
--- Fill in color for unit tokens.
-- @param units table : list of units.
-- Some units such as "x3 Infantry" tokens have no explicit color.  Given a list
-- of units, fill in the color field of units to the color of the closest
-- same-type (ship vs ground) unit.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.assignUnitTokenColors(units)
    local haveColorShipUnits = {}
    local haveColorGroundUnits = {}
    local needColorShipUnits = {}
    local needColorGroundUnits = {}

    -- When splitting into ship vs ground, do not consider Flagship attributes
    -- that let infantry participate in space combat or fighters on ground.
    -- Be consistent with "real" ships vs "real" ground so assignment behaves
    -- the same independent of faction.
    for _, unit in ipairs(units) do
        local attributes = CrLua.TI4.Unit.UNIT[unit.unitName]
        if unit.color then
            if attributes.ship then
                table.insert(haveColorShipUnits, unit)
            else
                table.insert(haveColorGroundUnits, unit)
            end
        else
            if attributes.ship then
                table.insert(needColorShipUnits, unit)
            else
                table.insert(needColorGroundUnits, unit)
            end
        end
    end

    -- For each need-color unit, find the closest same {ship/ground} type
    -- and copy its color.
    local function fillColors(needColorUnits, haveColorUnits)
        for _, needColorUnit in ipairs(needColorUnits) do
            local needColorPosition = needColorUnit.object.getPosition()
            local function distance(haveColorUnit)
                local haveColorPosition = haveColorUnit.object.getPosition()
                return CrLua.Util.distanceSq(needColorPosition, haveColorPosition)
            end
            local _, haveColorUnit = CrLua.Util.min(haveColorUnits, distance)
            if haveColorUnit then
                needColorUnit.color = haveColorUnit.color
            end
        end
    end

    fillColors(needColorShipUnits, haveColorShipUnits)
    fillColors(needColorGroundUnits, haveColorGroundUnits)
end

function CrLua.TI4.Unit._testAssignUnitTokenColors()
    -- Test assign to closest same-type (ship vs ground).
    local units = {
        CrLua.TI4.Unit.unit('Infantry', false, 1, CrLua.TI4.Unit._fakeObject{position={ x = 1 }}),
        CrLua.TI4.Unit.unit('Fighter', false, 1, CrLua.TI4.Unit._fakeObject{position={ x = 4 }}),
        CrLua.TI4.Unit.unit('Flagship', 'White', 1, CrLua.TI4.Unit._fakeObject{position={ x = 2 }, name = 'Matriarch' }),
        CrLua.TI4.Unit.unit('Infantry', 'Green', 1, CrLua.TI4.Unit._fakeObject{position={ x = 3 }})
    }
    CrLua.TI4.Unit.assignUnitTokenColors(units)
    assert(units[1].color == 'Green')
    assert(units[2].color == 'White')
end

-------------------------------------------------------------------------------
--- Count units, group by color, unit name.
-- @param units table : list of units.
-- @return table : map from color to map from unit name to count.
-- Double index, e.g. result['Blue']['Infantry'] to get blue infantry count.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.count(units)
    local result = {}
    for _, unit in ipairs(units) do
        local byColor = result[unit.color or 'Anonymous']
        if not byColor then
            byColor = {}
            result[unit.color or 'Anonymous'] = byColor
        end
        byColor[unit.unitName] = (byColor[unit.unitName] or 0) + unit.count
    end
    return result
end

function CrLua.TI4.Unit._testCountUnits()
    local units = {
        CrLua.TI4.Unit.unit('PDS', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Fighter', 'Blue', 3, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Fighter', 'Blue', 1, CrLua.TI4.Unit._fakeObject{})
    }
    local count = CrLua.TI4.Unit.count(units)
    assert(CrLua.Table.deepEquals(count, {
        Red = { PDS = 1 },
        Blue = { Fighter = 4 }
    }))
end

-------------------------------------------------------------------------------
--- Get space-combat participants.
-- If Flagship with "infantry in space" attribute, include Infantry of that color.
-- @param units table : list of units.
-- @return table : list filtered to only ship units.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.filterToShips(units)
    local infantryInSpaceColorSet = {}
    for _, unit in ipairs(units) do
        if unit.unitName == 'Flagship' then
            local attributes = CrLua.TI4.Unit.attributes(unit)
            if attributes.infantryInSpace then
                infantryInSpaceColorSet[unit.color] = true
            end
        end
    end
    local function isShip(unit)
        local attributes = CrLua.TI4.Unit.attributes(unit)
        return attributes.ship or (unit.unitName == 'Infantry' and infantryInSpaceColorSet[unit.color])
    end
    return CrLua.List.filter(units, isShip)
end

function CrLua.TI4.Unit._testFilterToShips()
    local units = CrLua.TI4.Unit._getTestFilterUnits()
    local filtered = CrLua.TI4.Unit.filterToShips(units)
    local count = CrLua.TI4.Unit.count(filtered)
    assert(CrLua.Table.deepEquals(count, {
        Red = { Fighter = 1, Dreadnought = 1, Flagship = 1, Infantry = 1 },
        Blue = { Fighter = 1, Flagship = 1 },
        Green = { Fighter = 1, Flagship = 1 }
    }))
end

function CrLua.TI4.Unit._getTestFilterUnits()
    -- Red infantry in space, blue fighters on ground, green Flagship space cannon.
    return {
        CrLua.TI4.Unit.unit('PDS', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Fighter', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Dreadnought', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Flagship', 'Red', 1, CrLua.TI4.Unit._fakeObject{ name = 'The Alastor' }),

        CrLua.TI4.Unit.unit('PDS', 'Blue', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Fighter', 'Blue', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Blue', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Flagship', 'Blue', 1, CrLua.TI4.Unit._fakeObject{ name = 'Matriarch' }),

        CrLua.TI4.Unit.unit('PDS', 'Green', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Fighter', 'Green', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Green', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Flagship', 'Green', 1, CrLua.TI4.Unit._fakeObject{ name = 'Loncara Ssodu' })
    }
end

-------------------------------------------------------------------------------
--- Get ground-combat participants.
-- If Flagship with "fighters on ground" attribute, include Fighters of that color.
-- @param units table : list of units.
-- @return table : list filtered to only ground units.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.filterToGround(units)
    local fightersOnGroundColorSet = {}
    for _, unit in ipairs(units) do
        if unit.unitName == 'Flagship' then
            local attributes = CrLua.TI4.Unit.attributes(unit)
            if attributes.fightersOnGround then
                if not unit.color then
                    local objectName = unit.object.getName() or '<nil>'
                    error(TAG .. '.filterToGround: no color for Flagship "' .. objectName .. '"')
                end
                fightersOnGroundColorSet[unit.color] = true
            end
        end
    end
    local function isGround(unit)
        local attributes = CrLua.TI4.Unit.attributes(unit)
        return (not attributes.ship) or ((unit.unitName == 'Fighter') and fightersOnGroundColorSet[unit.color])
    end
    return CrLua.List.filter(units, isGround)
end

function CrLua.TI4.Unit._testFilterToGround()
    local units = CrLua.TI4.Unit._getTestFilterUnits()
    local filtered = CrLua.TI4.Unit.filterToGround(units)
    local count = CrLua.TI4.Unit.count(filtered)
    assert(CrLua.Table.deepEquals(count, {
        Red = { PDS = 1, Infantry = 1 },
        Blue = { PDS = 1, Infantry = 1, Fighter = 1 },
        Green = { PDS = 1, Infantry = 1 }
    }))
end

-------------------------------------------------------------------------------
--- Get scace cannon participants.
-- Include Flagship with the "space cannon" attribute.
-- @param units table : list of units.
-- @return table : list filtered to only space cannon units.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.filterToSpaceCannon(units)
    local function isSpaceCannon(unit)
        local attributes = CrLua.TI4.Unit.attributes(unit)
        return attributes.spaceCannon
    end
    return CrLua.List.filter(units, isSpaceCannon)
end

function CrLua.TI4.Unit._testFilterToSpaceCannon()
    local units = CrLua.TI4.Unit._getTestFilterUnits()
    local filtered = CrLua.TI4.Unit.filterToSpaceCannon(units)
    local count = CrLua.TI4.Unit.count(filtered)
    assert(CrLua.Table.deepEquals(count, {
        Red = { PDS = 1 },
        Blue = { PDS = 1 },
        Green = { PDS = 1, Flagship = 1 }
    }))
end

-------------------------------------------------------------------------------
--- Get bombardment participants.
-- @param units table : list of units.
-- @return table : list filtered to only space cannon units.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.filterToBombardment(units)
    local function isBombardment(unit)
        local attributes = CrLua.TI4.Unit.attributes(unit)
        return attributes.bombardment
    end
    return CrLua.List.filter(units, isBombardment)
end

function CrLua.TI4.Unit._testFilterToBombardment()
    local units = CrLua.TI4.Unit._getTestFilterUnits()
    local filtered = CrLua.TI4.Unit.filterToBombardment(units)
    local count = CrLua.TI4.Unit.count(filtered)
    assert(CrLua.Table.deepEquals(count, {
        Red = { Dreadnought = 1 }
    }))
end

-------------------------------------------------------------------------------
--- Get non-fighter ships.
-- Flagship "infantry in space" do not count Infantry as ships.
-- @param units table : list of units.
-- @return table : list filtered to only non-fighter ships.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.filterToNonFighterShips(units)
    -- The "infrantyInSpace" Flagship attribute lets infantry participate in
    -- space combat "as if they were ships."  The BGG ruling is that "as if"
    -- does not mean "they are" and do not count as non-fighter ships.
    local function isNonFighterShip(unit)
        local attributes = CrLua.TI4.Unit.attributes(unit)
        return attributes.ship and unit.unitName ~= 'Fighter'
    end
    return CrLua.List.filter(units, isNonFighterShip)
end

function CrLua.TI4.Unit._testfilterToNonFighterShips()
    local units = CrLua.TI4.Unit._getTestFilterUnits()
    local filtered = CrLua.TI4.Unit.filterToNonFighterShips(units)
    local count = CrLua.TI4.Unit.count(filtered)
    assert(CrLua.Table.deepEquals(count, {
        Red = { Dreadnought = 1, Flagship = 1 },
        Blue = { Flagship = 1 },
        Green = { Flagship = 1 }
    }))
end

-------------------------------------------------------------------------------
--- Given a player color and a collection of units (in the activated hex),
-- deduce the enemy color(s).
--
-- The enemy can change over the course of a turn, for instance there might be
-- space combat against one enemy, the ground combat against another.  When
-- there are non-self ships, enemy is for space combat (or space cannon
-- offense).  Otherwise enemy is non-self ground force.
--
-- Ground combat does not attempt to assign units to planets.  Planets in a
-- multi-planet system by be controlled by different players.  (There is a
-- right answer depending on how units are placed, but that is not handled here.)
-- (On a related note, bombardment and space cannon defense should be split.)
--
-- It is possible for there to be multiple non-self ground force colors in
-- multi-planet systems when planets are controlled by different players.
--
-- @param selfColor string : who are we?
-- @param activatingColor string : who activated the system?
-- @param units table : list of units in the system.
-- @return table : list of enemy colors.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.getEnemyColors(selfColor, activatingColor, units)
    assert(type(selfColor) == 'string' and type(activatingColor) == 'string' and type(units) == 'table')
    assert(CrLua.TI4.Unit.UNIT_COLORS[selfColor])
    assert(CrLua.TI4.Unit.UNIT_COLORS[activatingColor])

    -- If self is not the activating player, then activating player is enemy.
    if selfColor ~= activatingColor then
        return { activatingColor }
    end

    local resultSet = false

    -- If there are any non-self ships, those are the enemies.
    local shipUnits = CrLua.TI4.Unit.filterToShips(units)
    for _, unit in ipairs(shipUnits) do
        if unit.color ~= selfColor then
            resultSet = resultSet or {}
            resultSet[unit.color] = true
        end
    end
    if resultSet then
        local result = CrLua.List.fromKeys(resultSet)
        if #result > 1 then
            error(TAG .. '.getEnemyColors: too many ship colors in system')
        end
        return result
    end

    -- If there are any non-self ground forces, those are the enemies.
    local groundUnits = CrLua.TI4.Unit.filterToGround(units)
    for _, unit in ipairs(groundUnits) do
        if unit.color ~= selfColor then
            resultSet = resultSet or {}
            resultSet[unit.color] = true
        end
    end
    if resultSet then
        return CrLua.List.fromKeys(resultSet)
    end

    -- Not non-self units, there is no enemy.
    return false
end

function CrLua.TI4.Unit._testGetEnemyColors()
    -- Red activated and moved in a carrier with one infantry.  Blue has a ship
    -- in that system.  Green and yellow control different planets.
    -- Purple has a PDS2 in an adjacent system.
    local units = {
        CrLua.TI4.Unit.unit('Carrier', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Cruiser', 'Blue', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('PDS', 'Green', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Yellow', 1, CrLua.TI4.Unit._fakeObject{})
    }
    local expectEnemies = {
        Purple = { 'Red' },
        Red = { 'Blue' },
        Blue = { 'Red' },
        Green = { 'Red' },
        Yellow = { 'Red' }
    }
    for selfColor, expected in pairs(expectEnemies) do
        local observed = CrLua.TI4.Unit.getEnemyColors(selfColor, 'Red', units)
        if not CrLua.Table.deepEquals(expected, observed) then
            error('mismatch for selfColor ' .. selfColor)
        end
    end

    -- Space combat is over, Red won.
    -- Space cannon from an adjacent Purple PDS2.
    local units = {
        CrLua.TI4.Unit.unit('Carrier', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Red', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('PDS', 'Green', 1, CrLua.TI4.Unit._fakeObject{}),
        CrLua.TI4.Unit.unit('Infantry', 'Yellow', 1, CrLua.TI4.Unit._fakeObject{})
    }
    local expectEnemies = {
        Purple = { 'Red' }, -- N/A really, only PDS on invaded planet do SC Defense
        Red = { 'Green', 'Yellow' },
        Blue = { 'Red' },
        Green = { 'Red' },
        Yellow = { 'Red' }
    }
    for selfColor, expected in pairs(expectEnemies) do
        local observed = CrLua.TI4.Unit.getEnemyColors(selfColor, 'Red', units)
        if not CrLua.Table.deepEquals(expected, observed) then
            error('mismatch for selfColor ' .. selfColor)
        end
    end
end
