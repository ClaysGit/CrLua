-------------------------------------------------------------------------------
--- Unit utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Unit'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Unit = assert(not CrLua.TI4.Unit) and {
    _require = { 'List', 'Table', 'Util' },
    _allowMissingKeys = { 'UNIT', 'FLAGSHIP', 'UNIT_COLORS' }
}

CrLua.TI4.Unit.ATTR = {

    -- Boolean, is this unit a ship?
    SHIP = 'ship',

    -- Number, space cannon hit value.
    SPACE_CANNON = 'spaceCannon',

    -- Number, bombardment hit value.
    BOMBARDMENT = 'bombardment',

    -- String wormhole type (e.g. "delta").
    WORMHOLE = 'wormhole',

    -- Boolean, do fighters in system participate in ground combat?
    FIGHTERS_ON_GROUND = 'fightersOnGround',

    -- Boolean, do infantry in system participate in space combat?
    INFANTRY_IN_SPACE = 'infantryInSpace',

    -- Boolean, unit dice count is equal to the number of non-fighter enemy ships?
    NON_FIGHTER_DICE = 'nonFighterDice',

    -- String name of the associated Plasma Sccoring button in the MultiRoller.
    MULTIROLLER_PS = 'multirollerPS'
}

-- Unit attributes:
--     - ship boolean : is a ship?
--     - spaceCannon number : if set, hit value for space cannon.
--     - bombardment number : if set, hit value for bombardment.
--     - plasmaScoringButton string : if set, MultiRoller button name for plasma scoring.
CrLua.TI4.Unit.UNIT = {
    ['Infantry'] = {},
    ['Fighter'] = { ship = true },
    ['Cruiser'] = { ship = true },
    ['Destroyer'] = { ship = true },
    ['Carrier'] = { ship = true },
    ['Space Dock'] = {},
    ['PDS'] = { spaceCannon = 5, multirollerPS = 'PS9' },
    ['Dreadnought'] = { ship = true, bombardment = 5, multirollerPS = 'PS4' },
    ['War Sun'] = { ship = true, bombardment = 3, multirollerPS = 'PS2' },
    ['Flagship'] = { ship = true, multirollerPS = 'PS1' }
}

-- Flagship attributes:
--     - faction string : owning faction name.
--     - wormhole string : if set, flagship is this wormhole type.
--     - bombardment number : if set, hit value for bombardment.
--     - fighersOnGround boolean : do in-system fighters participate in ground combat?
--     - infantryInSpace boolean : do in-system infantry participate in space combat?
--     - nonFighterDice boolean : dice count is equal to the number of non-fighter enemy ships?
CrLua.TI4.Unit.FLAGSHIP = {
    ['Duha Menaimon'] = { faction = 'The Arborec' },
    ['Arc Secundus'] = { faction = 'The Barony of Letnev', bombardment = 5 },
    ['Son of Ragh'] = { faction = 'The Clan of Saar' },
    ['The Inferno'] = { faction = 'The Embers of Muaat' },
    ['Wrath of Kenara'] = { faction = 'The Emirates of Hacan' },
    ['Genesis'] = { faction = 'The Federation of Sol' },
    ['Hil Colish'] = { faction = 'The Ghosts of Creuss', wormhole = 'delta' },
    ['[0.0.1]'] = { faction = 'The L1Z1X Mindnet' },
    ['Fourth Moon'] = { faction = 'The Mentak Coalition' },
    ['Matriarch'] = { faction = 'The Naalu Collective', fighersOnGround = true },
    ['The Alastor'] = { faction = 'The Nekro Virus', infantryInSpace = true },
    ["C'morran N'orr"] = { faction = "The Sardakk N'orr" },
    ['J.N.S. Hylarim'] = { faction = 'The Universities of Jol-Nar' },
    ['Salai Sai Corian'] = { faction = 'The Winnu', nonFighterDice = true },
    ['Loncara Ssodu'] = { faction = 'The Xxcha Kingdom', spaceCannon = 5 },
    ['Van Hauge'] = { faction = 'The Yin Brotherhood' },
    ["Y'sia Y'ssrila"] = { faction = 'The Yssaril Tribes' }
}

-- Unit object tint colors, hard coded from TTS/TI4 workshop objects.
CrLua.TI4.Unit.UNIT_COLORS = {
    White = { 204/255, 205/255, 204/255 },
    Blue = { 7/255, 178/255, 255/255 },
    Purple = { 118/255, 0, 183/255 },
    Green = { 0, 117/255, 6/255 },
    Red = { 203/255, 0, 0 },
    Yellow = { 165/255, 163/255, 0 }
}

-------------------------------------------------------------------------------
--- Create a unit table.
-- @param unitName string : unit name.
-- @param color string : unit player color.
-- @param count number : number of units (e.g. "x3 Infantry" token).
-- @param object : game Object.
-- @return unit table.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.unit(unitName, color, count, object)
    assert(CrLua.TI4.Unit.UNIT[unitName])
    assert(not color or CrLua.TI4.Unit.UNIT_COLORS[color])
    assert(type(count) == 'number' and count > 0 and object)

    return {
        unitName = unitName,
        color = color,
        count = count,
        object = object,
    }
end

function CrLua.TI4.Unit._testUnit()
    local unit = CrLua.TI4.Unit.unit('Fighter', 'Red', 1, CrLua.TI4.Unit._fakeObject{})
    assert(unit.unitName == 'Fighter')
    assert(unit.color == 'Red')
    assert(unit.count == 1)
    assert(unit.object)
end

function CrLua.TI4.Unit._fakeObject(args)
    local result = {}
    function result.getName()
        return args.name or '<objectName>'
    end
    function result.getColorTint()
        return args.color and CrLua.TI4.Unit.UNIT_COLORS[color] or { 0, 0, 0 }
    end
    function result.getPosition()
        return {
            x = args.position and args.position.x or 0,
            y = args.position and args.position.y or 0,
            z = args.position and args.position.z or 0
        }
    end
    return result
end

-------------------------------------------------------------------------------
--- Get units on the table.
-- @param filter function : if given, return nil/false to reject units from result.
-- @return table : list of CrLua.TI4.Unit.unit tables.
--
-- The filter function gets the same unit table that gets added to the result.
-- In addition to filtering, it could inject new unit fields.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.getAllUnits(filterFunction)
    assert(not filterFunction or type(filterFunction) == 'function')
    local result = {}
    for _, object in ipairs(getAllObjects()) do
        local unit = CrLua.TI4.Unit.fromObject(object)
        if unit and (not filterFunction or filterFunction(unit)) then
            table.insert(result, unit)
        end
    end
    return result
end

-------------------------------------------------------------------------------
--- Identify the unit from the game object.
-- @param object : game Object.
-- @return table or nil : { color, unitName, count, object } keys.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.fromObject(object)
    local name = object.getName()

    local flagship = CrLua.TI4.Unit.FLAGSHIP[name]
    if flagship then
        -- Could get the color from Zone, but for now use the tint color.
        -- zone = CrLua.TI4.Zone.fromFaction(flagship.faction)
        -- color = CrLua.TI4.Zone.color(zone)
        local color = CrLua.TI4.Unit.colorFromColorTint(object.getColorTint())
        return CrLua.TI4.Unit.unit('Flagship', color, 1, object)
    end

    -- Unit tokens do not have an explicit color.  One can guess based on the
    -- closest plastic unit color, but that could be an expensive operation.
    -- Do not attempt to assign a color now, let the caller decide if they
    -- care about the unit, then they can fill in the color.
    -- @see CrLua.TI4.Unit.assignUnitTokenColors()
    if name == 'x3 Fighter Token' then
        return CrLua.TI4.Unit.unit('Fighter', false, 3, object)
    end
    if name == 'x1 Fighter Token' then
        return CrLua.TI4.Unit.unit('Fighter', false, 1, object)
    end
    if name == 'x3 Infantry' then
        return CrLua.TI4.Unit.unit('Infantry', false, 3, object)
    end
    if name == 'x1 Infantry' then
        return CrLua.TI4.Unit.unit('Infantry', false, 1, object)
    end

    -- Most units have a "{color} {unitName}" object name, e.g. "Red Infantry".
    local startPos, endPos = string.find(name, ' ')
    if startPos then
        local color = string.sub(name, 1, startPos - 1)
        local unitName = string.sub(name, startPos + 1)
        if CrLua.TI4.Unit.UNIT_COLORS[color] and CrLua.TI4.Unit.UNIT[unitName] then
            return CrLua.TI4.Unit.unit(unitName, color, 1, object)
        end
    end

    -- Object is not a unit.
    return false
end

function CrLua.TI4.Unit._testFromObject()
    -- Flagship.
    local object = CrLua.TI4.Unit._fakeObject{name='Hil Colish', color='Green'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == 'Green' and unit.unitName == 'Flagship' and unit.count == 1)

    -- Anonymous token.
    local object = CrLua.TI4.Unit._fakeObject{name='x3 Infantry'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == false and unit.unitName == 'Infantry' and unit.count == 3)

    -- Typical unit.
    local object = CrLua.TI4.Unit._fakeObject{name='Red Infantry'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(unit.color == 'Red' and unit.unitName == 'Infantry' and unit.count == 1)

    -- Not a unit.
    local object = CrLua.TI4.Unit._fakeObject{name='Not a unit'}
    local unit = CrLua.TI4.Unit.fromObject(object)
    assert(not unit)
end

-------------------------------------------------------------------------------
--- Get unit attributes.
-- @param unitTable table : a Unit.fromObject result.
-- @return table : attribute table
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.attributes(unitTable)
    assert(type(unitTable) == 'table' and unitTable.unitName)

    local unit = CrLua.TI4.Unit.UNIT[unitTable.unitName]
    local flagship

    if unitTable.unitName == 'Flagship' then
        local objectName = unitTable.object.getName()
        local flagship = CrLua.TI4.Unit.FLAGSHIP(objectName)
    end

    -- Always return a new list, in case recipient wants to mutate it.
    return CrLua.Table.join(unit, flagship or {})
end

-------------------------------------------------------------------------------
--- Get the player color from a unit object's tint color.
-- @param tintColor table : {r,g,b} keys or a list of three (r,g,b) numbers.
-- @return string player color.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.colorFromColorTint(tintColor)
    local r = tintColor.r or tintColor[1]
    local g = tintColor.g or tintColor[2]
    local b = tintColor.b or tintColor[3]
    local function colorDistance(unitColor)
        local dr = unitColor[1] - r
        local dg = unitColor[2] - g
        local db = unitColor[3] - b
        local distanceSq = (dr * dr) + (dg * dg) + (db * db)
        return distanceSq
    end
    local colorName, colorTable = CrLua.Util.min(CrLua.TI4.Unit.UNIT_COLORS, colorDistance)
    return colorName
end

function CrLua.TI4.Unit._testColorFromColorTint()
    local tintColor = { 1, 1, 1 }
    local color = CrLua.TI4.Unit.colorFromColorTint(tintColor)
    assert(color == 'White', tostring(color or '<nil>'))
    local tintColor = { 1, 0, 0 }
    local color = CrLua.TI4.Unit.colorFromColorTint(tintColor)
    assert(color == 'Red', tostring(color or '<nil>'))
end

-------------------------------------------------------------------------------
--- Fill in color for unit tokens.
-- @param units table : list of units.
-- Some units such as "x3 Infantry" tokens have no explicit color.  Given a list
-- of units, fill in the color field of units to the color of the closest
-- same-type (ship vs ground) unit.
-------------------------------------------------------------------------------
function CrLua.TI4.Unit.assignUnitTokenColors(units)
    local haveColorShipUnits = {}
    local haveColorGroundUnits = {}
    local needColorShipUnits = {}
    local needColorGroundUnits = {}

    for _, unit in ipairs(units) do
        local attributes = CrLua.TI4.Unit.UNIT[unit.unitName]
        if unit.color then
            if attributes.ship then
                table.insert(haveColorShipUnits, unit)
            else
                table.insert(haveColorGroundUnits, unit)
            end
        else
            if attributes.ship then
                table.insert(needColorShipUnits, unit)
            else
                table.insert(needColorGroundUnits, unit)
            end
        end
    end

    local function fillColors(needColorUnits, haveColorUnits)
        for _, needColorUnit in ipairs(needColorUnits) do
            local needColorPosition = needColorUnit.object.getPosition()
            local function distance(haveColorUnit)
                local haveColorPosition = haveColorUnit.object.getPosition()
                return CrLua.Util.distanceSq(needColorPosition, haveColorPosition)
            end
            local _, haveColorUnit = CrLua.Util.min(haveColorUnits, distance)
            if haveColorUnit then
                needColorUnit.color = haveColorUnit.color
            end
        end
    end

    fillColors(needColorShipUnits, haveColorShipUnits)
    fillColors(needColorGroundUnits, haveColorGroundUnits)
end

function CrLua.TI4.Unit._testAssignUnitTokenColors()
    -- Test assign to closest same-type (ship vs ground).
    local units = {
        CrLua.TI4.Unit.unit('Infantry', false, 1, CrLua.TI4.Unit._fakeObject{position={ x = 1 }}),
        CrLua.TI4.Unit.unit('Fighter', false, 1, CrLua.TI4.Unit._fakeObject{position={ x = 4 }}),
        CrLua.TI4.Unit.unit('Flagship', 'White', 1, CrLua.TI4.Unit._fakeObject{position={ x = 2 }}),
        CrLua.TI4.Unit.unit('Infantry', 'Green', 1, CrLua.TI4.Unit._fakeObject{position={ x = 3 }})
    }
    CrLua.TI4.Unit.assignUnitTokenColors(units)
    assert(units[1].color == 'Green')
    assert(units[2].color == 'White')
end
