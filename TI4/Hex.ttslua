-------------------------------------------------------------------------------
--- Hex utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author Darrell
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Hex'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Hex = assert(not CrLua.TI4.Hex) and {
    _require = { 'Polygon', 'RedBlobHex' },
    _data = { layout = false }
}

-------------------------------------------------------------------------------
--- Get the RedBlobHex layout for the TI4 grid.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex._layout()
    local result = CrLua.TI4.Hex._data.layout
    if not result then
        local orientation = CrLua.RedBlobHex.ORIENTATION.FLAT_TOP
        local size = {
            x = (Grid.sizeX or 7) / 2.0,
            y = (Grid.sizeY or 7) / 2.0,
        }
        local hexSize = CrLua.RedBlobHex.point(size.x, size.y)
        local origin = CrLua.RedBlobHex.point(0, 0)
        result = CrLua.RedBlobHex.layout(orientation, hexSize, origin)
        CrLua.TI4.Hex._data.layout = result
    end
    return result
end

-------------------------------------------------------------------------------
--- Get hex from world position.
-- @param position table : {x,y,z} keys.
-- @return hex string : hex, string encoded.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex.fromPosition(position)
    assert(type(position.x) == 'number')
    local layout = CrLua.TI4.Hex._layout()
    local point = CrLua.RedBlobHex.point(position.x, position.z)
    local hex = CrLua.RedBlobHex.fromPoint(layout, point)
    local roundedHex = CrLua.RedBlobHex.round(hex)
    return CrLua.RedBlobHex.toString(roundedHex)
end

function CrLua.TI4.Hex._testFromPosition()
    local position = { x = 0, y = 0, z = 0 }
    local hexString = CrLua.TI4.Hex.fromPosition(position)
    assert(hexString == '<0,0,0>')
end

-------------------------------------------------------------------------------
--- Get world position from hex.
-- @param hexString string : string-encoded hex
-- @return table : {x,y,z} position.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex.toPosition(hexString)
    assert(type(hexString) == 'string')
    local layout = CrLua.TI4.Hex._layout()
    local hex = CrLua.RedBlobHex.fromString(hexString)
    local point = CrLua.RedBlobHex.toPoint(layout, hex)
    return { x = point.x, y = 1, z = point.y }
end

function CrLua.TI4.Hex._testToPosition()
    local hexString = '<0,0,0>'
    local position = CrLua.TI4.Hex.toPosition(hexString)
    assert(position.x == 0 and position.y == 1 and position.z == 0)
end

-------------------------------------------------------------------------------
--- Get adjacent hexes.
-- @param hexString string : string-encoded hex
-- @return table : list of string-encoded neighbor hexes.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex.neighbors(hexString)
    assert(type(hexString) == 'string')
    local hex = CrLua.RedBlobHex.fromString(hexString)
    local neighborHexes = CrLua.RedBlobHex.neighbors(hex)
    local result = {}
    for _, neighborHex in ipairs(neighborHexes) do
        local neighborHexString = CrLua.RedBlobHex.toString(neighborHex)
        table.insert(result, neighborHexString)
    end
    return result
end

function CrLua.TI4.Hex._testNeighbors()
    local hexString = '<0,0,0>'
    local neighbors = CrLua.TI4.Hex.neighbors(hexString)
    assert(#neighbors == 6)
end

-------------------------------------------------------------------------------
--- Find the common edge, if any.
-- Common edge points in clockwise winding with respect to primary hex.
-- @param hexString : hex.
-- @param neighborHexString : neighbor.
-- @return positions table : list of {1, 2 -> {x,y,z}} edge, or false.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex.commonEdge(hexString, neighborHexString)
    assert(type(hexString) == 'string' and type(neighborHexString) == 'string')

    local neighbors = CrLua.TI4.Hex.neighbors(hexString)
    local which = false
    for i, neighbor in ipairs(neighbors) do
        if neighbor == neighborHexString then
            which = i
            break
        end
    end
    if not which then
        return false
    end

    local layout = CrLua.TI4.Hex._layout()
    local hex = CrLua.RedBlobHex.fromString(hexString)
    local corners = CrLua.RedBlobHex.corners(layout, hex)

    -- First corner is at the END of first neighbor.
    local prev = which > 1 and (which - 1) or 6
    return {
        {x = corners[prev].x, y = 1, z = corners[prev].y },
        {x = corners[which].x, y = 1, z = corners[which].y }
    }
end

function CrLua.TI4.Hex._testCommonEdge()
    local hexString = '<0,0,0>'
    local neighbors = CrLua.TI4.Hex.neighbors(hexString)
    assert(#neighbors == 6)
    for i = 1, 6 do
        local neighbor = neighbors[i]
        local neighborNeighbors = CrLua.TI4.Hex.neighbors(neighbor)

        -- We are the opposite neighbor index in our neighbor
        local backward = (((i - 1) + 3) % 6) + 1
        local backwardNeighbor = neighborNeighbors[backward]
        assert(hexString == backwardNeighbor)

        -- Make sure we agree about the common corner-corner edge.
        local edgeF = CrLua.TI4.Hex.commonEdge(hexString, neighbor)
        local edgeB = CrLua.TI4.Hex.commonEdge(neighbor, hexString)
        assert(edgeF, 'edge[1]')
        assert(edgeB, 'edge[2]')

        -- Edge winding means the reverse will be 'backward'.
        assert(math.abs(edgeF[1].x - edgeB[2].x) < 0.01, 'edge[1].x')
        assert(math.abs(edgeF[1].z - edgeB[2].z) < 0.01, 'edge[1].z')
        assert(math.abs(edgeF[2].x - edgeB[1].x) < 0.01, 'edge[2].x')
        assert(math.abs(edgeF[2].z - edgeB[1].z) < 0.01, 'edge[2].z')
    end
end

-------------------------------------------------------------------------------
--- Generate a vector lines entry for Global.setVectorLines.
-- @param hexString string : string-encoded hex
-- @param parameters : table key->value override parameters for vector lines result.
-- @return table : vector lines entry.
-------------------------------------------------------------------------------
function CrLua.TI4.Hex.vectorLine(hexString, parameters)
    assert(type(hexString) == 'string' and type(parameters) == 'table' and not parameters.points)
    local layout = CrLua.TI4.Hex._layout()
    local hex = CrLua.RedBlobHex.fromString(hexString)
    local corners = CrLua.RedBlobHex.corners(layout, hex)

    -- Inset by the line thickness.
    local defaultThickness = 0.2
    local inset = parameters.thickness or defaultThickness
    local insetCorners = CrLua.Polygon.inset(corners, inset, 'x', 'y')

    -- Convert to {x,y,z} positions.
    local points = {}
    for _, corner in ipairs(insetCorners) do
        table.insert(points, { x = corner.x, y = 1.2, z = corner.y })
    end

    local result = {
        points = points,
        color = {1, 1, 1},
        thickness = 0.1,
        rotation = {0, 0, 0},
        loop = true,
        square = false,
    }
    for k, v in pairs(parameters) do
        result[k] = v
    end
    return result
end
