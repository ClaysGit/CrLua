-------------------------------------------------------------------------------
--- Wormhole utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Wormhole'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Wormhole = assert(not CrLua.TI4.Wormhole) and {
    _require = { 'List', 'TTS.Object' }
}

CrLua.TI4.Wormhole.TYPE = {
    ALPHA = 'ALPHA',
    BETA = 'BETA',
    DELTA = 'DELTA',
}

CrLua.TI4.Wormhole.GUIDS = {
    -- Planet tiles.
    ['c56a8a'] = CrLua.TI4.Wormhole.TYPE.DELTA,
    ['71e1bf'] = CrLua.TI4.Wormhole.TYPE.BETA,
    ['f11ef5'] = CrLua.TI4.Wormhole.TYPE.ALPHA,
    ['0378a4'] = CrLua.TI4.Wormhole.TYPE.ALPHA,
    ['ccd7ac'] = CrLua.TI4.Wormhole.TYPE.BETA,
    ['f38182'] = CrLua.TI4.Wormhole.TYPE.DELTA,

    -- Ghost flagship.
    -- Hmm, is this static?  Find it by name rather than guid.

    -- Ghost extra wormhole tokens.
    ['0d2f86'] = CrLua.TI4.Wormhole.TYPE.ALPHA,
    ['cba3a7'] = CrLua.TI4.Wormhole.TYPE.BETA,
}

CrLua.TI4.Wormhole.OBJECT_NAMES = {
    ['Hil Colish'] = CrLua.TI4.Wormhole.TYPE.DELTA,
}

-------------------------------------------------------------------------------
--- Create a wormhole table.
-- @param wormholeType string, CrLua.TI4.Wormhole.TYPE value.
-- @param object : game Object.
-- @return table : {type->CrLua.TI4.Wormhole.TYPE value, object->Object}
-------------------------------------------------------------------------------
function CrLua.TI4.Wormhole.wormhole(type, object)
    assert(CrLua.TI4.Wormhole.TYPE[type] and object)

    return {
        type = type,
        object = object
    }
end

function CrLua.TI4.Wormhole._testWormhole()
    local wormholeType = CrLua.TI4.Wormhole.TYPE.DELTA
    local fakeObject = {}
    local wormhole = CrLua.TI4.Wormhole.wormhole(wormholeType, fakeObject)
    assert(wormhole.type == wormholeType)
    assert(wormhole.object == fakeObject)
end

-------------------------------------------------------------------------------
--- Find wormholes.
-- Type is one of CrLua.TI4.Wormhole.TYPE values.
-- @param filter function : if given, return nil/false to reject wormholes from result.
-- @return table : list of CrLua.TI4.Wormhole.wormhole tables.
-- The filter function gets the same wormhole table that gets added to the result.
-- In addition to filtering, it could inject new unit fields.
-------------------------------------------------------------------------------
function CrLua.TI4.Wormhole.getAllWormholes(filterFunction)
    local result = {}

    for guid, wormholeType in pairs(CrLua.TI4.Wormhole.GUIDS) do
        local object = getObjectFromGUID(guid)
        if object then
            local wormhole = CrLua.TI4.Wormhole.wormhole(wormholeType, object)
            if not filterFunction or filterFunction(wormhole) then
                table.insert(result, wormhole)
            end
        end
    end

    local objectNames = CrLua.List.fromKeys(CrLua.TI4.Wormhole.OBJECT_NAMES)
    local objectsByName = CrLua.TTS.Object.getByName(objectNames)
    for name, objects in pairs(objectsByName) do
        local wormholeType = CrLua.TI4.Wormhole.OBJECT_NAMES[name]
        for _, object in ipairs(objects) do
            local wormhole = CrLua.TI4.Wormhole.wormhole(wormholeType, object)
            if not filterFunction or filterFunction(wormhole) then
                table.insert(result, wormhole)
            end
        end
    end

    return result
end
