#include ~/CrLua/Polygon
#include ~/CrLua/List
#include ~/CrLua/LockTable
#include ~/CrLua/Util

-------------------------------------------------------------------------------
--- Zone utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Zone'

local CrLua = CrLua or {}
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Zone = assert(not CrLua.TI4.Zone) and {}

CrLua.TI4.Zone.TYPE = CrLua.LockTable.readOnlyRequireKey(TAG .. '.TYPE', {
    PLAYER = 'player',
    TILES = 'tiles'
})

--- List of per-player zone polygons.  Final entry (7) is the map/tiles area.
-- Zones include:
-- - current color (based on command sheet within zone).
-- - default color based on standard game setup.
-- - polygon not-closed XZ polygon around the zone.
-- - bounding box of zone, XZ (computed on demand).
CrLua.TI4.Zone._zones = {
    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'Yellow',
        polygon = {
            { 21, -50 }, { 21, -6 }, { 51, -6 }, { 51, -50 }
        },
        boundingBox = false
    },
    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'Red',
        polygon = {
            { -21, -50 }, { -21, -6 }, { -1.5, -21 }, { 1.5, -21 }, { 21, -6 }, { 21, -50 }
        },
        boundingBox = false
    },
    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'Green',
        polygon = {
            { -51, -50 }, { -51, -6 }, { -21, -6 }, { -21, -50 }
        },
        boundingBox = false
    },
    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'Purple',
        polygon = {
            { 21, 6 }, { 21, 49 }, { 51, 49 }, { 51, 6 }
        },
        boundingBox = false
    },

    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'Blue',
        polygon = {
            { -21, 6 }, { -21, 49 }, { 21, 49 }, { 21, 6 }, { 1.5, 21 }, { -1.5, 21 }
        },
        boundingBox = false
    },
    {
        type = CrLua.TI4.Zone.TYPE.PLAYER,
        color = false,
        defaultColor = 'White',
        polygon = {
            { -51, 6 }, { -51, 49 }, { -21, 49 }, { -21, 6 }
        },
        boundingBox = false
    },
    {
        type = CrLua.TI4.Zone.TYPE.TILES,
        color = false,
        defaultColor = 'Grey',
        polygon = {
            { -28, -28 }, { -28, 28 }, { 28, 28 }, { 28, -28 }
        },
        boundingBox = false
    }
}

-------------------------------------------------------------------------------
--- Fill in the zones' color field.
-- Scans the table for command sheeds in each zone.
-- @return list : table of updated zones with integer indices, or nil if none updated.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.updateZoneColors()
    -- Once updated, no need to check if later command sheets are inside.
    local updatedZonesSet = {}

    for _, obj in ipairs(getAllObjects()) do
        local name = obj.getName()
        if string.find(name, 'Command Sheet') then
            local cmdSheetColor = string.sub(name, 16, -2)
            local pos = obj.getPosition()
            for i, zone in ipairs(CrLua.TI4.Zone.playerZones()) do
                if not updatedZonesSet[zone] and CrLua.TI4.Zone.inside(zone, pos) then
                    zone.color = cmdSheetColor
                    updatedZonesSet[zone] = true
                end
            end
        end
    end

    local updatedZonesList = CrLua.List.fromSet(updatedZonesSet)
    return #updatedZonesList > 0 and updatedZonesList
end

function CrLua.TI4.Zone._testUpdateZoneColors()
    local updatedZones = CrLua.TI4.Zone.updateZoneColors()
    assert(#updatedZones > 0)
end

-------------------------------------------------------------------------------
--- Get zone color.
-- Zones have a default color for a "normal" TI4 mod setup, or call
-- "updateZoneColors" to assign colors based on command sheet in zone.
-- @param zone table
-- @return string : color name.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.color(zone)
    assert(zone and type(zone) == 'table' and zone.polygon)
    return zone.color or zone.defaultColor
end

-------------------------------------------------------------------------------
--- Get the list of zones.
-- @return table : list of TI4 player zones.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.playerZones()
    local result = {}
    -- Could hardcode to 'return {table.unpack(_zones, 1, 6)}'
    -- but play it safe (not that bad efficiency wise) for extensibility.
    for _, zone in ipairs(CrLua.TI4.Zone._zones) do
        if zone.type == CrLua.TI4.Zone.TYPE.PLAYER then
            table.insert(result, zone)
        end
    end
    return result
end

-------------------------------------------------------------------------------
--- Get the tiles/map zone.
-- @return table : tiles/map zone.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.tilesZone()
    for _, zone in ipairs(CrLua.TI4.Zone._zones) do
        if zone.type == CrLua.TI4.Zone.TYPE.TILES then
            return zone
        end
    end
end

-------------------------------------------------------------------------------
--- Is the position inside the zone?
-- @param zone table
-- @param position table : {x,y,z}.
-- @return boolean : true if inside zone.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.inside(zone, position)
    assert(zone and type(zone) == 'table' and zone.polygon)
    assert(position and type(position.x) == 'number')

    return CrLua.Polygon.inside(zone.polygon, { position.x, position.z })
end

-------------------------------------------------------------------------------
--- Return player zone containing position.
-- @param position table : {x,y,z}.
-- @return zone table, or false if not inside any.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.insideWhichPlayerZone(position)
    assert(position and type(position.x) == 'number')
    for _, zone in ipairs(CrLua.TI4.Zone._zones) do
        if zone.type == CrLua.TI4.Zone.TYPE.PLAYER and CrLua.TI4.Zone.inside(zone, position) then
            return zone
        end
    end
    return false
end

-------------------------------------------------------------------------------
--- Find the zone closest to the position.
-- @param position table : {x,y,z}.
-- @return zone table
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.closestPlayerZone(position)
    assert(position and type(position.x) == 'number')

    local zones = CrLua.TI4.Zone.playerZones()

    -- Precompute and cache zone bounding boxes.
    for _, zone in ipairs(zones) do
        if not zone.boundingBox then
            zone.boundingBox = CrLua.Polygon.boundingBox(zone.polygon)
            zone.boundingBox = CrLua.Polygon.insetBoundingBox(zone.boundingBox, 0.01)
        end
    end

    -- Because the zones are not equal sized, distance to centers can
    -- give incorrect results.  Instead, use the distance to the closest
    -- (slightly inset) corner.
    local function distanceToCorner(point2D)
        return CrLua.Util.distanceSq(position, { x = point2D[1], y = 1, z = point2D[2] })
    end
    local function distanceToZone(zone)
        local corners = CrLua.Polygon.corners(zone.boundingBox)
        local distanceToCorners = CrLua.List.map(corners, distanceToCorner)
        return math.min(table.unpack(distanceToCorners))
    end
    local _, zone = CrLua.Util.min(zones, distanceToZone)

    return zone
end

-------------------------------------------------------------------------------
--- Get a "setVectorLines" entry for a zone.
-- Must be added to a list of lines, then passed to setVectorLines:
-- 'linesList = { vectorLines(zone) }; Global.setVectorLines(linesList)'
-- @param zone table
-- @param parameters table : override setVectorLines parameters.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.vectorLines(zone, parameters)
    assert(type(zone) == 'table' and zone.polygon and type(parameters) == 'table' and not parameters.points)

    local function addY(point)
        return { x = point[1], y = 1, z = point[2] }
    end
    local points = CrLua.List.map(zone.polygon, addY)
    local result = {
        points = points,
        color = zone.color or zone.defaultColor,
        thickness = 0.1,
        rotation = { 0, 0, 0 },
        loop = true,
        square = false
    }
    for k, v in pairs(parameters) do
        result[k] = v
    end
    return result
end

-------------------------------------------------------------------------------
--- Get a "setVectorLines" list for all zones.
-- This result can be used directly, 'Global.setVectorLines(allZonesVectorLines())'.
-- @param parameters table : override setVectorLines parameters.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.allZonesVectorLines(parameters)
    assert(type(parameters) == 'table' and not parameters.points)

    local lines = {}
    local playerZones = CrLua.TI4.Zone.playerZones()
    for _, zone in ipairs(playerZones) do
        assert(zone.color)
        table.insert(lines, CrLua.TI4.Zone.vectorLines(zone, {}))
    end
    local tilesZone = CrLua.TI4.Zone.tilesZone()
    table.insert(lines, CrLua.TI4.Zone.vectorLines(tilesZone, {}))
    return lines
end

CrLua.LockTable.readOnlyRequireKey(TAG, CrLua.TI4.Zone)
