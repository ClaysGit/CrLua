-------------------------------------------------------------------------------
--- Player zones.
-- @author Darrell
--
-- Manage "zones" in a TTS/TI4 table, command sheets guide zone colors.
-- Hard-code zones for standard 6 and 8 player tables.
--
-- Each zone has:
-- - color (string) : from "Command Sheet (COLOR)".
-- - polygon (table) : list of XZ points in clockwise winding order.
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4.Zone'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Zone = assert(not CrLua.TI4.Zone) and {
    _require = { 'Polygon', 'Util', },
    _data = { zones = {}, tiles = false, y = false },

    DEFAULT_VECTOR_LINE_THICKNESS = 0.2,

    -- Table setup for Raptor1210's "Twilight Imperium IV".
    TABLE_6P = {
        _allowMissingKeys = { 'POLYGON' },
        POLYGON = {
            Yellow = {{21, -50}, {21, -6}, {51, -6}, {51, -50}},
            Red = {{-21, -50}, {-21, -6}, {-1.5, -21}, {1.5, -21}, {21, -6}, {21, -50}},
            Green = {{-51, -50}, {-51, -6}, {-21, -6}, {-21, -50}},
            Purple = {{21, 6}, {21, 49}, {51, 49}, {51, 6}},
            Blue = {{-21, 6}, {-21, 49}, { 21, 49}, {21, 6}, {1.5, 21}, {-1.5, 21}},
            White = {{-51, 6}, {-51, 49}, {-21, 49}, {-21, 6}},
        },
        TILES = {{-48, -28}, {-48, 28}, {48, 28}, {48, -28}},
        Y = 1
    },

    -- Table set for the_mantis's "TI4 8 Player Madness".
    TABLE_8P = {
        _allowMissingKeys = { 'POLYGON' },
        POLYGON = {
            Pink = {{40.5, -100}, {40.5, -15}, {78, -15}, {78, -100}},
            White = {{0, -100}, {0, -15}, {40.5, -15}, {40.5, -100}},
            Red = {{-40.5, -100}, {-40.5, -15}, {0, -15}, {0, -100}},
            Orange = {{-78, -100}, {-78, -15}, {-40.5, -15}, {-40.5, -100}},
            Yellow = {{-78, 15}, {-78, 100}, {-40.5, 100}, {-40.5, 15}},
            Green = {{-40.5, 15}, {-40.5, 100}, {0, 100}, {0, 15}},
            Blue = {{0, 15}, {0, 100}, {40.5, 100}, {40.5, 15}},
            Purple = {{40.5, 15}, {40.5, 100}, {78, 100}, {78, 15}},
        },
        TILES = {{-78, -15}, {-78, 15}, {78, 15}, {78, -15}},
        Y = 5
    }
}

-------------------------------------------------------------------------------
--- Get all zones.
-- @return table : list of zone tables.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.all()
    CrLua.TI4.Zone.updateIfNeeded()
    return CrLua.TI4.Zone._data.zones
end

-------------------------------------------------------------------------------
--- Get zone from color.
-- Prefer command sheet color, then look for seated player color.
-- @param color string.
-- @return zone table.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.fromColor(color)
    assert(type(color) == 'string')
    CrLua.TI4.Zone.updateIfNeeded()
    for _, zone in ipairs(CrLua.TI4.Zone._data.zones) do
        if zone.color == color then
            return zone
        end
    end
end

-------------------------------------------------------------------------------
--- Is position inside 'tiles' area?
-- Requires hard-coded 6P or 8P table.
-- @param position table : {x,y,z} table.
-- @return boolean : true if inside tiles.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.insideTiles(position)
    assert(type(position) == 'table' and position.x)
    CrLua.TI4.Zone.updateIfNeeded()
    local tilesPolygon = CrLua.TI4.Zone._data.tiles
    if tilesPolygon then
        local pointXZ = { position.x, position.z }
        return CrLua.Polygon.inside(tilesPolygon, pointXZ)
    end
end

-------------------------------------------------------------------------------
--- Get zone from position.
-- @param position table : {x,y,z} table.
-- @return zone table : zone containing the position.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.insideWhich(position)
    assert(type(position) == 'table' and position.x)
    CrLua.TI4.Zone.updateIfNeeded()
    for _, zone in ipairs(CrLua.TI4.Zone._data.zones) do
        if CrLua.TI4.Zone.inside(zone, position) then
            return zone
        end
    end
end

-------------------------------------------------------------------------------
--- Is position inside zone?
-- @param zone table : CrLua.TI4.Zone._data.zones entry.
-- @param position table : {x,y,z} position.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.inside(zone, position)
    assert(type(zone) == 'table' and zone.color and type(position) == 'table' and position.x)
    CrLua.TI4.Zone.updateIfNeeded()
    if zone.polygon then
        local pointXZ = { position.x, position.z }
        return CrLua.Polygon.inside(zone.polygon, pointXZ)
    end
end

-------------------------------------------------------------------------------
--- Get vector lines around zone border, inset so outer edge matches zone.
-- @param zone table : CrLua.TI4.Zone._data.zones entry.
-- @param thickness number : line thickness or nil/false for default.
-- @return line table : setVectorLines entry.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.vectorLine(zone, thickness)
    assert(type(zone) == 'table' and zone.color and not thickness or type(thickness) == 'number')
    CrLua.TI4.Zone.updateIfNeeded()
    local thickness = thickness or CrLua.TI4.Zone.DEFAULT_VECTOR_LINE_THICKNESS
    local polygon = zone.polygon
    local inset = polygon and CrLua.Polygon.inset(polygon, thickness / 2.0)
    local points = inset and CrLua.Polygon.toXYZ(inset, CrLua.TI4.Zone._data.y)
    return {
        points = points or {},
        color = zone.color,
        thickness = thickness,
        rotation = { x = 0, y = 0, z = 0 },
        loop = true,
        square = false
    }
end

-------------------------------------------------------------------------------
--- Get vector lines for all zones.
-- @param thickness number : line thickness or nil/false for default.
-- @return lines table : setVectorLines list.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.allVectorLines(thickness)
    CrLua.TI4.Zone.updateIfNeeded()
    local thickness = thickness or CrLua.TI4.Zone.DEFAULT_VECTOR_LINE_THICKNESS
    local result = {}
    for _, zone in ipairs(CrLua.TI4.Zone._data.zones) do
        table.insert(result, CrLua.TI4.Zone.vectorLine(zone, thickness))
    end
    local tiles = CrLua.TI4.Zone._data.tiles
    if tiles then
        local polygon = tiles
        local inset = CrLua.Polygon.inset(polygon, thickness / 2.0)
        local points = CrLua.Polygon.toXYZ(inset, CrLua.TI4.Zone._data.y)
        table.insert(result, {
            points = points,
            color = 'Grey',
            thickness = thickness,
            rotation = { x = 0, y = 0, z = 0 },
            loop = true,
            square = false
        })
    end
    return result
end

-------------------------------------------------------------------------------
--- Update if have not done so yet.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.updateIfNeeded()
    if not CrLua.TI4.Zone._data.lastUpdateFrameCount then
        CrLua.TI4.Zone.update()
    end
end

-------------------------------------------------------------------------------
--- Fill in the zones' runtime fields.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.update()
    -- Abort if already updated this frame.
    local frameCount = Time.frame_count
    if CrLua.TI4.Zone._data.lastUpdateFrameCount == frameCount then
        return
    end
    CrLua.TI4.Zone._data.lastUpdateFrameCount = frameCount

    -- Find command sheets (indexed by color).
    local colorToCommandSheet = {}
    local numCommandSheets = 0
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()

        -- Look for 'Command Sheet (COLOR)' and 'FACTION Sheet' objects.
        -- First use the cheap string.find to test if 'Sheet' is in the name.
        -- Once we have a candidate, do more expensive pattern matching.
        if string.find(name, ' Sheet') then
            -- "Command Sheet (COLOR)"
            local color = string.match(name, '^Command Sheet %((%a+)%)$')
            if color then
                colorToCommandSheet[color] = object
                numCommandSheets = numCommandSheets + 1
            end
        end
    end

    -- Get 'official' zone polygon, hard-coded from 6 and 8 player tables.
    local hardCodedValues = false
    if numCommandSheets == 6 then
        hardCodedValues = CrLua.TI4.Zone.TABLE_6P
    elseif numCommandSheets == 8 then
        hardCodedValues = CrLua.TI4.Zone.TABLE_8P
    end
    CrLua.TI4.Zone._data.y = hardCodedValues and hardCodedValues.Y or false
    CrLua.TI4.Zone._data.tiles = hardCodedValues and hardCodedValues.TILES or false

    local function polygon(color)
        local commandSheet = assert(colorToCommandSheet[color])
        local position = commandSheet.getPosition()
        local pointXZ = { position.x, position.z }

        local polygons = hardCodedValues and hardCodedValues.POLYGON
        if polygons then
            -- First check the zone normally used for the given color.
            local polygon = polygons[color]
            if polygon and CrLua.Polygon.inside(polygon, pointXZ) then
                return polygon
            end

            -- If no default zone or does not match, scan for polygon.
            for defaultColor, polygon in pairs(polygons) do
                if CrLua.Polygon.inside(polygon, pointXZ) then
                    return polygon
                end
            end
        end
    end

    CrLua.TI4.Zone._data.zones = {}
    for color, _ in pairs(colorToCommandSheet) do
        local tableName = TAG .. '._data.zones[color=' .. color .. ']'
        table.insert(CrLua.TI4.Zone._data.zones, {
            color = assert(color),  -- command sheet color
            polygon = polygon(color) or false,
        })
    end
end
