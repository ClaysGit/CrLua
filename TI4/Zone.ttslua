#include ~/CrLua/Polygon
#include ~/CrLua/List
#include ~/CrLua/Util

-------------------------------------------------------------------------------
--- Zone utils for Darth Batman and Raptor1210's "Twilight Imperium IV" TTS mod.
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.TI4'

local CrLua = CrLua or {}
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.Zone = assert(not CrLua.TI4.Zone) and {}

--- List of per-player zone polygons.  Final entry (7) is the map/tiles area.
-- Zones include:
-- - current color (based on command sheet within zone).
-- - default color based on standard game setup.
-- - polygon not-closed XZ polygon around the zone.
-- - bounding box of zone, XZ (computed on demand).
CrLua.TI4.Zone._zones = {
    {
        color = false,
        defaultColor = 'Yellow',
        polygon = {
            { 21, -50 }, { 21, -6 }, { 51, -6 }, { 51, -50 }
        },
        boundingBox = false
    },
    {
        color = false,
        defaultColor = 'Red',
        polygon = {
            { -21, -50 }, { -21, -6 }, { -1.5, -21 }, { 1.5, -21 }, { 21, -6 }, { 21, -50 }
        },
        boundingBox = false
    },
    {
        color = false,
        defaultColor = 'Green',
        polygon = {
            { -51, -50 }, { -51, -6 }, { -21, -6 }, { -21, -50 }
        },
        boundingBox = false
    },
    {
        color = false,
        defaultColor = 'Purple',
        polygon = {
            { 21, 6 }, { 21, 49 }, { 51, 49 }, { 51, 6 }
        },
        boundingBox = false
    },

    {
        color = false,
        defaultColor = 'Blue',
        polygon = {
            { -21, 6 }, { -21, 49 }, { 21, 49 }, { 21, 6 }, { 1.5, 21 }, { -1.5, 21 }
        },
        boundingBox = false
    },
    {
        color = false,
        defaultColor = 'White',
        polygon = {
            { -51, 6 }, { -51, 49 }, { -21, 49 }, { -21, 6 }
        },
        boundingBox = false
    },
    {
        isTiles = true,
        color = false,
        defaultColor = 'Grey',
        polygon = {
            { -28, -28 }, { -28, 28 }, { 28, 28 }, { 28, -28 }
        },
        boundingBox = false
    }
}
-------------------------------------------------------------------------------
--- Fill in the zones' color field.
-- Scans the table for command sheeds in each zone.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.updateZoneColors()
    local foundZoneIndexSet = {}
    for _, obj in ipairs(getAllObjects()) do
        local name = obj.getName()
        local checkName = string.find(name, 'Command Sheet')
        if checkName ~= nil then
            local cmdSheetColor = string.sub(name, 16, -2)
            local pos = obj.getPosition()
            for i, zone in ipairs(CrLua.TI4.Zone._zones) do
                if not foundZoneIndexSet[i] and (not zone.isTiles) and CrLua.TI4.Zone.inside(zone, pos) then
                    foundZoneIndexSet[i] = true
                    zone.color = cmdSheetColor
                end
            end
        end
    end
end

-------------------------------------------------------------------------------
--- Get the list of zones.
-- @return table : list of TI4 player zones.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.playerZones()
    return { table.unpack(CrLua.TI4.Zone._zones, 1, 6) }
end

-------------------------------------------------------------------------------
--- Get the tiles/map zone.
-- @return table : tiles/map zone.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.tilesZone()
    return CrLua.TI4.Zone._zones[7]
end

-------------------------------------------------------------------------------
--- Find the zone closest to the position.
-- @param position table : {x,y,z}.
-- @return zone table
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.closestPlayerZone(position)
    assert(position and type(position.x) == 'number')

    local function distance(zone)
        -- Because the zones are not equal sized, distance to centers can
        -- give incorrect results.  Instead, use the distance to the closest
        -- (slightly inset) corner.
        if not zone.boundingBox then
            local min, max = CrLua.Polygon.boundingBox(zone.polygon)
            zone.boundingBox = { min = min, max = max }
        end
        local box = zone.boundingBox
        local inset = 0.01
        local insetCorners = {
            { x = box.min[1] + inset, y = 1, z = box.min[2] + inset },
            { x = box.min[1] + inset, y = 1, z = box.max[2] - inset },
            { x = box.max[1] - inset, y = 1, z = box.min[2] + inset },
            { x = box.max[1] - inset, y = 1, z = box.max[2] - inset }
        }
        local distances = {}
        for _, insetCorner in ipairs(insetCorners) do
            local distanceSq = CrLua.Util.distanceSq(position, insetCorner)
            table.insert(distances, distanceSq)
        end
        return math.min(table.unpack(distances))
    end
    local _, zone = CrLua.Util.min(CrLua.TI4.Zone.playerZones(), distance)

    return zone
end

-------------------------------------------------------------------------------
--- Find the zone closest to the position.
-- @param zone table
-- @param position table : {x,y,z}.
-- @return boolean : true if inside zone.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.inside(zone, position)
    assert(zone and type(zone) == 'table' and zone.polygon)
    return CrLua.Polygon.inside(zone.polygon, { position.x, position.z })
end

-------------------------------------------------------------------------------
--- Get a "setVectorLines" entry for a zone.
-- @param zone table
-- @param parameters table : override setVectorLines parameters.
-------------------------------------------------------------------------------
function CrLua.TI4.Zone.vectorLines(zone, parameters)
    assert(type(zone) == 'table' and zone.polygon and type(parameters) == 'table' and not parameters.points)

    local function addY(point)
        return { x = point[1], y = 1, z = point[2] }
    end
    local points = CrLua.List.map(zone.polygon, addY)
    local result = {
        points = points,
        color = zone.color or zone.defaultColor,
        thickness = 0.1,
        rotation = { 0, 0, 0 },
        loop = true,
        square = false
    }
    for k, v in pairs(parameters) do
        result[k] = v
    end
    return result
end

#include ~/CrLua/UnitTest
-- #include ~/CrLua/TI4
function onLoad()
    print('xxx onLoad')

    CrLua.TI4.Zone.updateZoneColors()

    local lines = {}
    local playerZones = CrLua.TI4.Zone.playerZones()
    for _, zone in ipairs(playerZones) do
        assert(zone.color)
        table.insert(lines, CrLua.TI4.Zone.vectorLines(zone, {}))
    end
    local tilesZone = CrLua.TI4.Zone.tilesZone()
    table.insert(lines, CrLua.TI4.Zone.vectorLines(tilesZone, {}))
    Global.setVectorLines(lines)

    --[[
    local lines = {}
    for color, line in pairs(zones) do
        table.insert(lines, {
            points = line,
            color = color,
            thickness = 0.5,
            rotation = { 0, 0, 0 },
            loop = true,
            square = false
        })
    end
    Global.setVectorLines(lines)
    ]]
end

function onDrop(player_color)
    local pos = self.getPosition()
    local zone = CrLua.TI4.Zone.closestPlayerZone(pos)
    self.setColorTint(zone.color)
end
