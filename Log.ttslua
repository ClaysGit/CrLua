-------------------------------------------------------------------------------
--- Lua logging functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.Log'

local CrLua = CrLua or {}
CrLua.Log = assert(not CrLua.Log) and {}

CrLua.Log.LOG_LEVEL = {
    DEBUG = 1,
    INFO = 2,
    WARNING = 3,
	ERROR = 4,
    NONE = 5,
}
CrLua.Log._level = LOG_LEVEL.NONE

-------------------------------------------------------------------------------
--- Set the log level, only log messagees at this level and above.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.setLogLevel(level)
    assert(level >= 1 and level <= 5)
    CrLua.Log._level = level
end

function CrLua.Log._logTable(message, prefix, table)
    print(prefix .. message .. ' = {')
    prefix = '  ' .. prefix
    for k, v in pairs(table) do
        if type(v) == 'table' then
            print(prefix .. k .. ' = {')
            CrLua.Log._logTable(prefix .. k, prefix, v)
            print(prefix .. '}')
        else
            print(prefix .. k .. ' = ' .. v)
        end
    end
    print('}')
end

function CrLua.Log._log(logLevel, message, table)
    if logLevel < CrLua.Log._level then
        return
    end
    if table then
        CrLua.Log._logTable(message, '', table)
    else
        print(message)
    end
end

-------------------------------------------------------------------------------
--- Log a debug message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.d(message, table)
    assert(type(message) == 'string' and not table or type(table) == 'table')
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.DEBUG, message, table)
end

-------------------------------------------------------------------------------
--- Log an info message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.i(message, table)
    assert(type(message) == 'string' and not table or type(table) == 'table')
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.INFO, message, table)
end

-------------------------------------------------------------------------------
--- Log a warning message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.w(message, table)
    assert(type(message) == 'string' and not table or type(table) == 'table')
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.WARNING, message, table)
end

-------------------------------------------------------------------------------
--- Log an error message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.e(message, table)
    assert(type(message) == 'string' and not table or type(table) == 'table')
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.ERROR, message, table)
end
