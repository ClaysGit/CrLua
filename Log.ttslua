#include ~/CrLua/Util

-------------------------------------------------------------------------------
--- Lua logging functions
-- @author bonkersbgg on BoardGameGeek.com
-------------------------------------------------------------------------------

local TAG = 'CrLua.Log'

local CrLua = CrLua or {}
CrLua.Log = assert(not CrLua.Log) and {}

CrLua.Log.LOG_LEVEL = CrLua.Util.lockRecursive(TAG .. '.LOG_LEVEL', {
    DEBUG = { level = 1, shortString = 'd' },
    INFO = { level = 2, shortString = 'i' },
    WARNING = { level = 3, shortString = 'w' },
	ERROR = { level = 4, shortString = 'e' },
    NONE = { level = 5, shortString = 'x' },
})
CrLua.Log._level = CrLua.Log.LOG_LEVEL.NONE

-------------------------------------------------------------------------------
--- Set the log level, only log messagees at this level and above.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.setLogLevel(level)
    assert(level and type(level.level) == 'number' and type(level.shortString) == 'string')
    CrLua.Log._level = level
end

function CrLua.Log._logTable(message, prefix, table)
    print(prefix .. message .. ' = {')
    local indentedPrefix = prefix .. '   '
    for k, v in pairs(table) do
        if type(v) == 'table' then
            CrLua.Log._logTable(k, indentedPrefix, v)
        else
            print(indentedPrefix .. k .. ' = ' .. v)
        end
    end
    print(prefix .. '}')
end

function CrLua.Log._log(logLevel, message, table)
    if logLevel.level < CrLua.Log._level.level then
        return
    end

    -- Inject a [timestamp/level] prefix.
    local timestamp = os.date('%I:%M.%S')
    message = '[' .. timestamp .. '/' .. logLevel.shortString .. '] ' .. message

    if table then
        CrLua.Log._logTable(message, '', table)
    else
        print(message)
    end
end

function CrLua.Log._testLog()
    local originalLogLevel = CrLua.Log._level
    CrLua.Log.setLogLevel(CrLua.Log.LOG_LEVEL.DEBUG)
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.DEBUG, 'test message', { foo = 1, bar = { a = 1, b = 2 } })
    CrLua.Log.setLogLevel(originalLogLevel)
end

-------------------------------------------------------------------------------
--- Log a debug message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.d(message, table)
    assert(type(message) == 'string' and (not table or type(table) == 'table'))
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.DEBUG, message, table)
end

-------------------------------------------------------------------------------
--- Log an info message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.i(message, table)
    assert(type(message) == 'string' and (not table or type(table) == 'table'))
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.INFO, message, table)
end

-------------------------------------------------------------------------------
--- Log a warning message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.w(message, table)
    assert(type(message) == 'string' and (not table or type(table) == 'table'))
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.WARNING, message, table)
end

-------------------------------------------------------------------------------
--- Log an error message.
-- @param message string.
-- @table optional table, logging contents if given.
-------------------------------------------------------------------------------
function CrLua.Log.e(message, table)
    assert(type(message) == 'string' and (not table or type(table) == 'table'))
    CrLua.Log._log(CrLua.Log.LOG_LEVEL.ERROR, message, table)
end

CrLua.Util.lock(TAG, CrLua.Log, { '_level' })
